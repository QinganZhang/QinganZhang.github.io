<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>effective-modern-cpp-notes on Paul&#39;s Blog</title>
    <link>/categories/effective-modern-cpp-notes/</link>
    <description>Recent content in effective-modern-cpp-notes on Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 01 Feb 2024 21:56:31 +0800</lastBuildDate>
    <atom:link href="/categories/effective-modern-cpp-notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Effective Modern Cpp Notes] Ch08 微调</title>
      <link>/posts/effective-modern-cpp/ch08-%E5%BE%AE%E8%B0%83/</link>
      <pubDate>Thu, 01 Feb 2024 21:56:31 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch08-%E5%BE%AE%E8%B0%83/</guid>
      <description>41：针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递 一般C++传参方式有三种： 对左值引用和右值引用分别重载，需要实</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch07 并发API</title>
      <link>/posts/effective-modern-cpp/ch07-%E5%B9%B6%E5%8F%91api/</link>
      <pubDate>Thu, 01 Feb 2024 21:56:20 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch07-%E5%B9%B6%E5%8F%91api/</guid>
      <description></description>
    </item>
    <item>
      <title>Effective Modern Cpp Reading Notes</title>
      <link>/posts/effective-modern-cpp/effective-modern-cpp-reading-notes/</link>
      <pubDate>Thu, 01 Feb 2024 21:53:53 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/effective-modern-cpp-reading-notes/</guid>
      <description></description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch06 Lambda表达式</title>
      <link>/posts/effective-modern-cpp/ch06-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 01 Feb 2024 21:48:40 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch06-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>31：避免默认捕获模式 闭包：lambda所创建的运行期对象 默认捕获可能导致引用悬挂 默认传引用可能导致引用悬挂 显式传引用也可能导致引用悬挂，但</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch05 右值引用、移动语句和完美转发</title>
      <link>/posts/effective-modern-cpp/ch05-%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E7%A7%BB%E5%8A%A8%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 01 Feb 2024 21:48:16 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch05-%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E7%A7%BB%E5%8A%A8%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</guid>
      <description>23：理解std::move和std::forward std::move：返回变量的右值引用 对const对象的移动操作会被转换为拷贝操作 因为</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch04 智能指针</title>
      <link>/posts/effective-modern-cpp/ch04-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:58 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch04-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>18：使用std::unique_ptr管理具备专属所有权的资源 std::unique_ptr表示独占所有权，因此无法拷贝（拷贝构造、拷贝赋</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch03 转向现代C&#43;&#43;</title>
      <link>/posts/effective-modern-cpp/ch03-%E8%BD%AC%E5%90%91%E7%8E%B0%E4%BB%A3c&#43;&#43;/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:37 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch03-%E8%BD%AC%E5%90%91%E7%8E%B0%E4%BB%A3c&#43;&#43;/</guid>
      <description>07：在创建对象时注意区分()和{} 初始化方式 1 2 3 4 int x1(1); int x2 = 2; int x3{3}; // 统一初始化（列表初始化） int x4 = {4}; // 和第三种方式相同 ()和=初始化的限</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch02 Auto</title>
      <link>/posts/effective-modern-cpp/ch02-auto/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:20 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch02-auto/</guid>
      <description>05：优先选用auto，而非显式类型推断 优点一：避免变量未初始化 使用auto声明的变量未初始化，直接导致编译报错 优点二：简化变量声明（避免写</description>
    </item>
    <item>
      <title>[Effective Modern Cpp Notes] Ch01 类型推导</title>
      <link>/posts/effective-modern-cpp/ch01-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:04 +0800</pubDate>
      <guid>/posts/effective-modern-cpp/ch01-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/</guid>
      <description>01：理解模板类型推导 在模板类型推导中，引用类型参数将被视为非引用类型处理，也就是说其引用性被忽略。 - 在万能引用参数类型推导时，左值参数被特</description>
    </item>
  </channel>
</rss>
