<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>blog on Paul&#39;s Blog</title>
    <link>https://qinganzhang.github.io/tags/blog/</link>
    <description>Recent content in blog on Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Feb 2024 14:50:20 +0800</lastBuildDate><atom:link href="https://qinganzhang.github.io/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo&#43;Github Pages搭建个人博客</title>
      <link>https://qinganzhang.github.io/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 29 Feb 2024 14:50:20 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>本地搭建博客 本地环境：windows10 使用主题：PaperModX 安装过程 安装Go并配置环境 下载prebuilt版本的hugo 注意hugo</description>
      <content:encoded><![CDATA[<h1 id="本地搭建博客">本地搭建博客</h1>
<blockquote>
<p>本地环境：windows10</p>
<p>使用主题：PaperModX</p>
</blockquote>
<h2 id="安装过程">安装过程</h2>
<ul>
<li>
<p>安装Go并配置环境</p>
</li>
<li>
<p>下载prebuilt版本的hugo</p>
<ul>
<li>注意hugo有普通版本和extended版本，最好使用extended版本，因为在使用PaperModX主题时，需要使用到extended版本（但是PaperMod主题使用普通版本就可以）</li>
</ul>
</li>
<li>
<p>新建站点：<code>hugo new site myblog</code></p>
</li>
<li>
<p>下载主题：在<code>myblog/themes/</code>下<code>git clone git@github.com:reorx/hugo-PaperModX.git</code></p>
<ul>
<li>也可以使用<code>git submodule</code>的方式添加主题，此时方便进行版本控制和管理</li>
</ul>
</li>
</ul>
<h2 id="本地配置">本地配置</h2>
<p><code>myblog/</code>下的配置文件参考<a href="https://www.sulvblog.cn/posts/blog/build_hugo/#4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">sulvblog&rsquo;s config.yaml</a>和<a href="https://github.com/reorx/hugo-PaperModX/blob/master/exampleSite/config.default.yml">PaperModX example&rsquo;s config.yaml</a>进行配置，自己慢慢调吧（papermodx在papermod的基础上添加了一些特性，比如侧边目录）</p>
<p>个人主要进行的修改有：</p>
<ul>
<li>在<code>archetypes/posts.md</code>中设定默认的meta内容</li>
<li>修改为posts、archive、search、tags、categories、about六个menu，其中posts、categories、tags在<code>content</code>下为目录，archive、search、about在<code>content</code>下为md文件
<ul>
<li>在文件夹下创建<code>_index.md</code>文件可以在里面添加Front Matter，用来设置当前文件夹下的meta信息</li>
<li>在配置时留意是posts还是post，是archive还是archives</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/WongSSH/article/details/126962069">加入数学公式的支持</a>
<ul>
<li>但是当使用带有<code>/begin{} /end{}</code>的多行公式，或者多行公式中含有若干下划线时，此时可能无法正确渲染，我的解决办法是将没有正确渲染的多行数学公式放在<code>&lt;span&gt;&lt;/span&gt;</code>标签对中，这样在网页博客和本地typora中都可以正常显示。考虑到平时不怎么写复杂的多行数学公式，因此手动修改也不多。</li>
<li>在<a href="https://du33169.tech/posts/notes/hugomath/">Hugo中优雅地使用数学公式</a>中，博主的方法三自己编译一份加入了goldmark数学插件的hugo版本，但是注意编译过程中gcc版本不宜过高（我的gcc原来是8.1.0，编译不过，后来改到5.1.0，编译通过）。但是最终使用好像针对原生latex的多行公式支持不足（？不确定，可能是自己后面配置不正确？），最后没有使用这个方案</li>
</ul>
</li>
<li>调整了主页中Welcome部分的高度，在<code>themes/hugo-PaperModX/assets/css/common/main.css</code>的<code>.first-entry</code>中<code>min-height</code>修改为80px</li>
<li>调整了页面中内容的宽度（原来侧边留空感觉有点多，可以适当减小），<code>themes/hugo-PaperModX/assets/css/common/main.css</code>的<code>.main.post</code>中添加<code>right: 60px;</code></li>
<li>在<code>themes/hugo-PaperModX/assets/css/common/post-single.css</code>中调整h1~h6标题的高度</li>
</ul>
<h2 id="内容管理">内容管理</h2>
<ul>
<li>
<p>写文章：<code>hugo new posts/文章名称.md</code>，注意写对md文件的路径</p>
</li>
<li>
<p>本地预览：<code>hugo server -D</code>在<code>localhost:1313</code>上进行预览</p>
<ul>
<li><code>-D</code>表示<code>draft: true</code>的内容在预览时展示</li>
<li>有时将draft改为false，使用<code>hugo server</code>进行预览时，对应文章没有出现，此时关掉PowerShell重开一个，重新运行一下命令</li>
</ul>
</li>
<li>
<p>构建：<code>hugo</code>会将构建的网站内容保存到public文件夹中，默认只会向public中添加内容，而不会删除外部不存在但是public中还存在的文件</p>
<ul>
<li><code>hugo -F --cleanDestinationDir</code>表示每次生成的public都是全新的，会覆盖原来的</li>
<li><code>--theme</code>指定主题，<code>--baseURL=&quot;xxx&quot;</code>指定url</li>
</ul>
</li>
</ul>
<h2 id="将内容发布到github-pages上">将内容发布到GitHub Pages上</h2>
<ul>
<li>
<p>将public文件夹转换为git库：</p>
<ul>
<li>进入到public文件夹，<code>git init -b main</code> 生成的默认主分支名字为main</li>
</ul>
</li>
<li>
<p>将git库关联到远程库：</p>
<ul>
<li><code>git remote add origin git@github.com:QinganZhang/QinganZhang.github.io.git</code></li>
<li>检查是否关联成功：<code>cat .git/config </code>
<ul>
<li>如果<code>[remote &quot;origin&quot;]</code>信息正常显示，说明本地git库已经成功关联到远程库</li>
</ul>
</li>
</ul>
</li>
<li>
<p>将修改commit到本地库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git status # 查看当前修改状态
</span></span><span class="line"><span class="cl">git add . # 添加所有修改过的文件，也可以只添加某个文件
</span></span><span class="line"><span class="cl">git commit -m &#34;add a new post&#34; # 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将修改push到远程库</p>
<ul>
<li><code>git push -u origin main --force</code></li>
<li>报错： <code>error: src refspec main does not match any</code>
<ul>
<li>本地的branch为master，但是远程库默认branch是main，先将本地branch的名字修改为main</li>
<li><code>git branch -m master main </code></li>
</ul>
</li>
<li>报错：<code> ! [rejected]        main -&gt; main (fetch first)</code>
<ul>
<li>提交冲突，远程库和本地库不一致。通常出现在初始化仓库有readme而本地没有等情况。<a href="https://cloud.tencent.com/developer/article/2145265">参考</a></li>
<li><code>git pull --rebase origin main</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看是否部署成功</p>
<ul>
<li>
<p>网页样式（css）丢失，但是内容还在，浏览器F12控制台报错：<code>Failed to find a vlid digest in the 'integrity' attribute for source 'xxx.css' with computed SHA-256 integrity '***'. The resource has been blocked. </code>（关键词：”integrity“）</p>
<ul>
<li>
<p>尝试方法一：<a href="https://smc.im/post/resolve-integrity-error-in-hugo/">解决 hugo 中关于 integrity 的错误</a>，仍然出现原来的错误</p>
</li>
<li>
<p>尝试方法二：<a href="https://qing.shuncs.com/post/tech/hugo/">解决Hugo无法加载css文件</a>，仍然出现原来的错误，而且第一遍文章会覆盖在h1标题Posts上，</p>
</li>
<li>
<p>最终方法：在<code>themes/hugo-PaperModX/layouts/partial/head.html</code>中，将</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{- if not site.Params.assets.disableFingerprinting }}
</span></span><span class="line"><span class="cl">{{- $stylesheet := $stylesheet | fingerprint }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.RelPermalink }}&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.Data.Integrity }}&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload stylesheet&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;style&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- else }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.RelPermalink }}&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload stylesheet&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;style&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- end }}
</span></span></code></pre></td></tr></table>
</div>
</div><p>注释掉，只保留<code>&lt;link crossorigin=&quot;anonymous&quot; href=&quot;{{ $stylesheet.RelPermalink }}&quot; rel=&quot;preload stylesheet&quot; as=&quot;style&quot;&gt;</code>这一行。猜想可能是与使用的主题相关，但是暂时没有找到使用相同主题类似错误的信息。</p>
</li>
<li>
<p>更多参考：<a href="https://stackoverflow.com/questions/65040931/hugo-failed-to-find-a-valid-digest-in-the-integrity-attribute-for-resource">Hugo - Failed to find a valid digest in the &lsquo;integrity&rsquo; attribute for resource - The resource has been blocked - Host on Github</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="使用github-actions自动构建博客">使用GitHub Actions自动构建博客</h1>
<p>使用上面的方式（手动构建），在本地写好博客之后，然后使用hugo在本地构建好静态博客，生成public目录，最终是将public目录push到GitHub仓库，构建静态博客。</p>
<p>还有一种方式，看起来更加高级，那就是基于GitHub Action自动构建博客。大致流程为：在本地写好博客之后，直接push到远程GitHub仓库，在远端而非本地构建博客。这个方式只是节省了自己使用hugo手动进行构建的这一步，但是如果当自己手工进行操作的步骤比较繁琐且固定时，使用GitHub Action自动化就很方便了。</p>
<p>在实际配置过程中，这里使用了两个仓库。一个是private的myblog仓库，本地写好博客后就push到这个myblog仓库；另一个仓库是public的、作为GitHub Pages的仓库，myblog仓库使用GitHub Action自动进行构建，将最终得到的public文件就放到这个仓库中。下面简要介绍基于Github Action自动构建博客的过程，着重介绍与上面手动构架不同的地方。</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-02-29-14:30:09.png" alt="image-20240229143009260" style="zoom: 60%;" />
<p>具体过程：</p>
<ul>
<li>
<p>在Github远程新建一个仓库，比如命名为myblog</p>
</li>
<li>
<p>在本地使用hugo新建站点时（比如<code>hugo new site myblog</code>），在本地<code>myblog</code>目录下<code>git init -b main</code>，并且使用<code>git remote add</code>将本地的<code>myblog</code>目录关联到远程<code>myblog</code>仓库</p>
<ul>
<li>注意之前手动构建的方式中，是在public目录下<code>git init</code>，并关联到远程仓库的，而且该远程仓库即为Github Pages</li>
</ul>
</li>
<li>
<p>在下载主题时，可以直接git clone源码，也可以使用<code>git submodule</code>的方式将主题作为子项目添加进来</p>
<ul>
<li>注意<code>git submodule</code>的子模块和原来的主模块是两个单独的项目，所以进入到子模块和主模块中进行git操作，是针对不同仓库的。<a href="https://cloud.tencent.com/developer/article/2136829">Git Submodules介绍</a></li>
<li>但是这里想将主题添加进来，自己进行一些修改，因此使用了另一种方法将主题添加进来：<code>git subtree</code>，这样可以直接将子项目作为主仓库的一个目录添加进来
<ul>
<li><a href="https://daief.tech/post/git-subtree/"><code>git subtree</code>的使用</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>在myblog根目录下，创建<code>.github/workflows/deploy.yaml</code>，个人的<code>deploy.yaml</code>配置文件为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="c"># 表示GitHub Action的触发条件（即push）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w"> </span><span class="c"># 设定触发的分支为main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w"> </span><span class="c"># 可以在Github项目仓库的Action工具栏手动调用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">permissions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">contents</span><span class="p">:</span><span class="w"> </span><span class="l">read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pages</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id-token</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w"> </span><span class="c"># 表示GitHub Action的任务，这里定义了一个build的任务</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w"> </span><span class="c"># 指定GitHub Action的运行环境</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HUGO_VERSION</span><span class="p">:</span><span class="w"> </span><span class="m">0.122.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 其中run表示执行的命令，uses时GitHub Action中的一个插件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w"> </span><span class="c"># 使用actions/checkout插件检出GitHub仓库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># with:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># submodules: false # 同时检出子模块</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># fetch-depth: 0 # 完整检出所有历史记录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w"> </span><span class="c"># 使用peaceiris/actions-hugo插件来安装Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.122.0&#34;</span><span class="w"> </span><span class="c"># 0.122.0 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Web</span><span class="w"> </span><span class="c"># 运行hugo命令生成博客的静态文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENVIRONMENT</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENV</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --gc --minify </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># --baseURL &#34;${{ steps.pages.outputs.base_url }}/&#34; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload artifact</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-pages-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy Web</span><span class="w"> </span><span class="c"># 使用peaceiris/actions-gh-pages插件将静态网页部署到GitHub Pages上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PERSONAL_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PERSONAL_BLOG_TOKEN }}</span><span class="w"> </span><span class="c"># 个人访问令牌</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">EXTERNAL_REPOSITORY</span><span class="p">:</span><span class="w"> </span><span class="l">QinganZhang/QinganZhang.github.io</span><span class="w"> </span><span class="c"># 部署到的GitHub Pages仓库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PUBLISH_BRANCH</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w"> </span><span class="c"># Github Pages分支</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PUBLISH_DIR</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w"> </span><span class="c"># hugo静态文件的目录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">commit_message</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.head_commit.message }}</span><span class="w"> </span><span class="c"># 提交更改时使用的提交消息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># cname: ${{ secrets.DOMAIN }} # 自定义域名，默认使用github pages域名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference1: https://blog.csdn.net/m0_51993913/article/details/132657065   </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference2: https://blog.csdn.net/freeking101/article/details/135515958使用Github Actions自动化部署部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference3: https://github.com/reorx/hugo-PaperModX/blob/master/.github/workflows/gh-pages.yml</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>然后生成Token，<a href="https://blog.csdn.net/m0_51993913/article/details/132657065">参考</a></p>
<ul>
<li>因为需要从myblog仓库推送public目录到Github Pages仓库，所以需要向myblog仓库添加身份验证凭据</li>
</ul>
</li>
<li>
<p>最后将本地博客push到myblog远程仓库，然后myblog远程仓库下使用GitHub Actions将public目录推送到Github Pages仓库中</p>
</li>
</ul>
<p>其他问题：</p>
<ul>
<li>如何将obsidian双链转换为HTML的<code>&lt;a&gt;&lt;/a&gt;</code>标签对？
<ul>
<li>目前发现的一个方案是<a href="https://github.com/manunamz/jekyll-wikilinks#header-level-wikilinks">jekyll-wililinks</a>，但是这个方案需要使用jeklly搭建静态博客</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
