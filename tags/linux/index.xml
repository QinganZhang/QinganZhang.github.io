<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on Paul&#39;s Blog</title>
    <link>https://qinganzhang.github.io/tags/linux/</link>
    <description>Recent content in linux on Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Feb 2024 15:29:41 +0800</lastBuildDate><atom:link href="https://qinganzhang.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用vim操作</title>
      <link>https://qinganzhang.github.io/posts/%E5%B8%B8%E7%94%A8vim%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 29 Feb 2024 15:29:41 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/%E5%B8%B8%E7%94%A8vim%E6%93%8D%E4%BD%9C/</guid>
      <description>1. 查看 1.1 移动光标 w/W, b/B移动到下一单词、上一单词的开头，e/E移动到下一单词的结尾，大写空格分割，小写非字母分割 $, ^行尾 行首，0行间第一个字</description>
      <content:encoded><![CDATA[<h1 id="1-查看">1. 查看</h1>
<h2 id="11--移动光标">1.1  移动光标</h2>
<ul>
<li><code>w/W, b/B</code>移动到下一单词、上一单词的开头，<code>e/E</code>移动到下一单词的结尾，大写空格分割，小写非字母分割</li>
<li><code>$, ^</code>行尾 行首，<code>0</code>行间第一个字符</li>
<li><code>Ctrl+f/b</code>翻页，<code>Ctrl+d/u</code>翻半页，<code>Ctrl+e/y</code>上下滚动一行</li>
<li><code>数字+方向键</code>移动多次（<code>数字+cmd</code>执行多次cmd）</li>
<li><code>gg, G</code>文件首尾</li>
<li><code>50%</code>移动到文件50%的位置，<code>:50</code>移动到第50行，<code>.</code>表示当前行号，<code>$</code>表示最后一行的行号</li>
<li><code>/pattern</code>正则匹配查找，<code>n/N</code>上下跳转</li>
<li>光标移动到括号上时，使用<code>%</code>进行括号配对</li>
</ul>
<h2 id="12--文件编码">1.2  文件编码</h2>
<ul>
<li><code>:set fileencoding</code>查看当前文件编码</li>
<li><code>:e ++enc=utf-8</code>使用utf-8重新打开文件</li>
</ul>
<h2 id="13--显示">1.3  显示</h2>
<ul>
<li><code>:set nu, :set nonu</code>显示/不显示行号，在<code>~/.vimrc</code>中设置<code>set nu</code>持久化设置</li>
<li><code>Ctrl+G</code>显示当前状态</li>
</ul>
<h2 id="14--分屏">1.4  分屏</h2>
<ol>
<li>打开
<ul>
<li><code>vim -O file1 file2 </code>打开多个文本（<code>-O</code>垂直分屏，<code>-o</code>水平分屏）</li>
<li><code>:vs file</code>在当前vim中打开file的垂直分屏，<code>:sp file</code>在当前vim中打开file的水平分屏</li>
<li><code>Ctrl+w v/s</code>复制当前屏为相同垂直分屏或水平分屏</li>
<li><code>:new newfile</code>在vim中创建新文本并创建分屏</li>
</ul>
</li>
<li>切换
<ul>
<li><code>Ctrl+w+w</code>切换下一个</li>
<li><code>Ctrl+w+h/j/k/l</code>，hl左右，jk上下</li>
</ul>
</li>
<li>改变位置
<ul>
<li><code>Ctrl+w Shift+h/j/k/l</code>，当前屏左上下右移动</li>
</ul>
</li>
<li>改变大小
<ul>
<li><code>Ctrl+w Shift+|</code>水平加宽，<code>Ctrl+w Shift+_</code>垂直加宽，<code>Ctrl+w =</code>重置大小</li>
<li><code>Ctrl+w n +</code>增加高度n，<code>Ctrl+w n -</code>减少高度n，<code>Ctrl+w n Shift+&lt;</code>界线左移n，<code>Ctrl+w n Shift+&gt;</code>界线右移n</li>
</ul>
</li>
<li>关闭
<ul>
<li><code>Ctrl+w c</code>关闭当前分屏</li>
<li><code>Ctrl+w o</code>只保留当前分屏</li>
</ul>
</li>
</ol>
<h1 id="2-编辑">2. 编辑</h1>
<h2 id="21-进入编辑模式">2.1 进入编辑模式</h2>
<ul>
<li><code>i</code>光标处插入，<code>a</code>光标右边插入，<code>o,O</code>下面、上面另起一行，<code>I,A</code>行首尾插入</li>
</ul>
<h2 id="22-简单编辑">2.2 简单编辑</h2>
<h3 id="221--选中v">2.2.1  选中：<code>v</code></h3>
<ul>
<li><code>v, V, Ctrl+v</code>字符、行、块选中</li>
<li>可以结合<code>w/W, b/B, e/E</code></li>
<li>结合text object</li>
</ul>
<h3 id="222--text-object">2.2.2  text object</h3>
<pre><code>包括范围和文本对象，可以结合各种操作使用
</code></pre>
<ul>
<li>范围：<code>i</code>：inner,<code>a</code>：around</li>
<li>文本对象：<code>w</code>：word，<code>s</code>：sentence，各种括号引号</li>
</ul>
<h3 id="223--删除和剪切d">2.2.3  删除和剪切：<code>d</code></h3>
<ul>
<li>
<p>删除将内容复制到匿名寄存器中（即剪切），可以使用黑洞寄存器<code>&quot;_</code>避免剪切内容</p>
<ul>
<li>
<p>不剪切的删除（将删除内容复制到黑洞寄存器中，相当于不保存）：<code>&quot;_cmd</code>，其中cmd是删除相关的命令，eg：<code>&quot;_x</code></p>
</li>
<li>
<p>使用键盘映射实现更简便的写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34;在~/.vimrc中,将删除映射为不剪切的删除，剪切映射为删除命令前加前缀&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">let mapleader = &#34;,&#34;
</span></span><span class="line"><span class="cl">nnoremap x &#34;_x
</span></span><span class="line"><span class="cl">nnoremap X &#34;_X
</span></span><span class="line"><span class="cl">nnoremap d &#34;_d
</span></span><span class="line"><span class="cl">nnoremap dd &#34;_dd
</span></span><span class="line"><span class="cl">nnoremap D &#34;_D
</span></span><span class="line"><span class="cl">vnoremap d &#34;_d
</span></span><span class="line"><span class="cl">vnoremap dd &#34;_dd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;&lt;leader&gt;是前缀，通过mapleader设定&#34;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;x &#34;&#34;x
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;X &#34;&#34;X
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;d &#34;&#34;d
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;dd &#34;&#34;dd
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;D &#34;&#34;D
</span></span><span class="line"><span class="cl">vnoremap &lt;leader&gt;d &#34;&#34;d
</span></span><span class="line"><span class="cl">vnoremap &lt;leader&gt;dd &#34;&#34;dd
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>~/.vimrc</code>中输入<code>:source ~/.vimrc</code>使设定生效</p>
<p>在vim中输入<code>:map</code>查看当前的键盘映射</p>
</li>
</ul>
</li>
<li>
<p><code>D, d$</code>删除光标至行尾，<code>dd</code>删除当前行</p>
</li>
<li>
<p><code>x</code>删除当前字符，<code>daw</code>删除单词及后面的空格，<code>diw</code>删除单词，结合text object</p>
</li>
<li>
<p><code>:m,nd</code>删除m-n行</p>
</li>
<li>
<p><code>s</code>删除字符并插入，<code>S</code>清空行并插入</p>
</li>
<li>
<p>先选中，然后<code>x</code>删除选中部分，<code>D</code>删除选中行</p>
</li>
</ul>
<h3 id="224--复制y">2.2.4  复制：<code>y</code></h3>
<ul>
<li><code>yy</code>复制当前行，<code>:m,ny</code>复制m-n行到剪贴板</li>
<li>结合text object</li>
</ul>
<h3 id="225--粘贴p">2.2.5  粘贴：<code>p</code></h3>
<ul>
<li><code>p，P</code>粘贴到光标处/后</li>
<li><code>m,ncok</code>复制m-n行到k行下一行</li>
<li><code>m,nmk</code>移动m-n行到k行下一行</li>
</ul>
<h3 id="226--搜索">2.2.6  搜索</h3>
<ul>
<li><code>/pattern</code>匹配，<code>n, N</code>下一个上一个匹配对象</li>
<li><code>*, #</code>匹配下一个，上一个相同的单词</li>
</ul>
<h3 id="227--替换c">2.2.7  替换：<code>c</code></h3>
<ul>
<li>结合text object</li>
<li><code>r</code>单字符替换，<code>R</code>字符串替换</li>
<li><code>[range]s/pattern/replace/[flags]</code>
<ul>
<li><code>[range]</code>：<code>%</code>(全文)，<code>.</code>，<code>m,n</code>，<code>m</code></li>
<li><code>[flags]</code>：<code>g</code>全局替换，<code>c</code>替换前询问，不写默认替换首个</li>
</ul>
</li>
</ul>
<h3 id="228--撤销重做">2.2.8  撤销重做</h3>
<ul>
<li><code>u</code>撤销</li>
<li><code>Ctrl+r</code>重做</li>
</ul>
<h3 id="229--批量注释">2.2.9  批量注释</h3>
<ol>
<li>方法一：
<ul>
<li>注释：<code>Ctrl+v</code>选择，<code>Shift+i</code>进入编辑模式，输入插入的字符比如<code>#</code>，再两次<code>Esc</code></li>
<li>取消注释：<code>Ctrl+v</code>选择，<code>x</code>或<code>d</code>删除（就是选择然后删除）</li>
</ul>
</li>
<li>方法二：正则替换
<ul>
<li>注释：<code>:m,ns/^/#/g</code></li>
<li>取消注释：<code>:m,ns/^#//g</code>（替换成空白）</li>
</ul>
</li>
</ol>
<h3 id="2210--其他">2.2.10  其他</h3>
<ul>
<li><code>J</code>将当前行下面的行合并到当前行</li>
</ul>
<h1 id="3-其他">3. 其他</h1>
<h2 id="31--优质blog">3.1  优质Blog</h2>
<ul>
<li><a href="https://harttle.land/vim-practice.html">完全用Vim工作</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux笔记</title>
      <link>https://qinganzhang.github.io/posts/linux%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Jan 2024 15:39:32 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/linux%E7%AC%94%E8%AE%B0/</guid>
      <description>1. linux入门 1.1 实用程序 man：查询联机手册 1 2 man (section) name # section:1命令，2系统调用，3库函数，5配置文件（因为可能有同名的） man -k regexp</description>
      <content:encoded><![CDATA[<h1 id="1-linux入门">1. linux入门</h1>
<h2 id="11--实用程序">1.1  实用程序</h2>
<ol>
<li>
<p><code>man</code>：查询联机手册</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man (section) name	# section:1命令，2系统调用，3库函数，5配置文件（因为可能有同名的）
</span></span><span class="line"><span class="cl">man -k regexp	# 用正则匹配
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>date</code>：获取时间和日期</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">date &#34;+%Y-%m-%d %H:%M:%S Day %j&#34;	# 格式控制字符串必须以+号开头
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>bc</code>：计算器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bc -l	# 类似于ipython的交互式界面
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>重定向</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -l &gt; filelist.txt	# 输出重定向
</span></span><span class="line"><span class="cl">sort &lt; filelist.txt		# 输入重定向
</span></span><span class="line"><span class="cl">ls -l &gt;&gt; filelist.txt	# 追加内容
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>管道</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -l | sort # 将ls的stdout作为sort的输入
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>more, less</code>：逐屏显示（文件或输出），less可以向上翻页但是more不行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">less -Nm	 # fb翻页，du翻半页，gG第一/最后一行，v编辑，/?向下或上搜索字符串(nN上一个下一个)
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>cat</code>：列出文件内容；<code>od</code>：逐字节打印</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat -n test.txt
</span></span><span class="line"><span class="cl">cat &gt; file.txt # 没有命令行参数，从stdin获取输出，直到Ctrl-D，将内容写入文件
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>head, tail</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">head -n 20 file.txt 	# 显示前20行
</span></span><span class="line"><span class="cl">hand -n -20 file.txt	# 除了尾部20行，其余算头并显示
</span></span><span class="line"><span class="cl">tail -f file.txt		# 实时打印文件尾部追加的内容
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>tee</code>：三通，将stdin输出到stdout，同时写入文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -lh | tee out.txt
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>wc</code></p>
<ul>
<li><code>-w</code>：字计数</li>
<li><code>-l</code>：行计数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ps -ef | wc -l	# 查看当前进程总数
</span></span><span class="line"><span class="cl">ls | wc -w # 查看当前文件夹下文件个数
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>sort</code>：</p>
<ul>
<li><code>-r</code>：降序</li>
<li><code>-o</code>：结果覆盖原文件</li>
<li><code>-n</code>：按照数字而非字符串排序</li>
</ul>
</li>
<li>
<p><code>tr str1 str2</code>：替换字符串，将stdin中str1的字符替换为str2的字符，然后标准输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat file.txt | tr &#39;[a-z]&#39; &#39;[A-Z]&#39;	# 将file.txt文件中小写字母替换为大写字母
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>unique</code>：筛选文件中重复的行</p>
</li>
</ol>
<h2 id="12--了解系统状态">1.2  了解系统状态</h2>
<ol>
<li>
<p><code>who</code>：确定谁在系统中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tty # 输出当前终端设备文件名
</span></span><span class="line"><span class="cl">who am i 	# 输出当前终端上的登录用户
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>uptime</code>：已开机时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">当前时间 开机时间 用户数量 CPU负载（1，5，15分钟内有几个进程在等待调度运行）
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>top</code>：列出资源占用排名靠前的进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">top -d 1 -n 5	# delay=1, 运行5次
</span></span><span class="line"><span class="cl">当前时间 开机时间 用户数量 CPU负载
</span></span><span class="line"><span class="cl">任务（进程）
</span></span><span class="line"><span class="cl">PID USER PR NI VIRT进程虚拟地址空间 RES驻留内存数（占用物理内存数） SHR共享内存数 %CPU %MEM TIME+占用CPU的时间 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>ps</code>：查询进程状态，列出当前终端上启动的进程</p>
<ul>
<li><code>-e</code>：列出系统中所有进程</li>
<li><code>-f</code>：以full格式列出</li>
<li><code>-l</code>：以long格式列出</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">UID PID PPID C（最近几秒占用CPU情况） PRI优先级 SZ进程逻辑地址空间 WCHAN进程在何处睡眠 TTY终端名字 TIME累计占用CPU时间 CMD
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>free</code>：了解内存使用情况</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">内存总量 已使用内存 空闲内存 共享内存 缓冲使用的内存 现在实际可以使用的内存
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>vmstat</code>：了解系统负载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vmstat 1 -Sm # 每一秒更新一次
</span></span><span class="line"><span class="cl">最关注的是cpu使用率，us=user, sy=system, id=idle, wa=wait for disk IO
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h1 id="2-正则表达式">2. 正则表达式</h1>
<h2 id="21--元字符">2.1  元字符</h2>
<pre><code>[正则表达式](https://www.runoob.com/regexp/regexp-tutorial.html)与文件名通配符规则不同
</code></pre>
<ul>
<li>
<p><code>.</code>：匹配任意单字符</p>
</li>
<li>
<p><code>*</code>：匹配前面单字符0次或任意多次</p>
</li>
<li>
<p><code>[</code>：方括号内的字符为集合，表示其中任意一个，方括号内的<code>.</code> <code>*</code> <code>\</code> 表示自己，<code>[ ][ ]</code>表示左右中括号的两个字符，<code>-</code>表示一个区间（如果在最后则不表示区间）</p>
</li>
<li>
<p><code>\</code></p>
</li>
<li>
<p><code>^</code>：在中括号内时开头表示补集，<code>[^a-z]</code>表示匹配任一非小写字母（如果不在中括号内开头则不表示补集），在正则表达式开头时表示首部的限制（不在首部则不表示此限制）</p>
</li>
<li>
<p><code>$</code>：在正则表达式尾部时表示尾部的限制（不在尾部则不表示此限制）</p>
</li>
</ul>
<h2 id="22--正则表达式拓展">2.2  正则表达式拓展</h2>
<ul>
<li><code>()</code>：分组</li>
<li><code>|</code>：逻辑或</li>
<li><code>+</code>：匹配前面单字符1次或任意多次</li>
<li><code>?</code>：匹配前面单字符0次或1次</li>
<li><code>{m,n}</code>：匹配前面的单字符m到n次</li>
<li><code>{m}</code>：匹配前面的单字符m次</li>
<li><code>{m,}</code>：匹配前面的单字符至少m次</li>
<li><code>\d</code>：数字， <code>\D</code>：非数字，<code>\s</code>：空白符（包括换行）， <code>\S</code>：非空白符（不包括换行）， <code>\w</code>：数字字母下划线（相当于 [A-Za-z0-9_]）</li>
</ul>
<h2 id="23--常用命令">2.3  常用命令</h2>
<ol>
<li>
<p><code>grep</code> -n 模式 文件名列表</p>
<ul>
<li>
<p><code>-F</code>：按字符串搜索（同fgrep）</p>
</li>
<li>
<p><code>-G</code>：基本正则语法，默认</p>
</li>
<li>
<p><code>-E</code>：拓展正则语法（同egrep）</p>
</li>
<li>
<p><code>-n</code>：显示行号</p>
</li>
<li>
<p><code>-o</code>：提取匹配的部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">grep -n &#39;main&#39; *.cpp	# 从文件中筛选
</span></span><span class="line"><span class="cl">ps -ef | grep -n &#39;^zhang&#39;	# 从输入中筛选
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><code>sed</code>：利用正则表达式处理文本（替换、删除等）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sed &#39;s/^zhang/ZHANG/g&#39;	# 将开头为zhang的替换为ZHNAG，s表示替换，用/划分不同的部分，g表示如果有多个符合则全部替换
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>awk</code>：逐行扫描进行条件判断，满足条件执行动作</p>
</li>
</ol>
<h1 id="3-文件编辑">3. 文件编辑</h1>
<h2 id="31--vim常用操作">3.1  vim常用操作</h2>
<h2 id="32--常见问题">3.2  常见问题</h2>
<ol>
<li>
<p>vim编辑结束后Ctrl+S：Linux进入了流量控制状态，Ctrl+Q流量控制解除</p>
</li>
<li>
<p>Ctrl+Z导致进程挂起（进程还在但是处于Stopped状态）：使用<code>jobs</code>命令查看当前Stopped的进程，使用<code>%1</code>将1号作业恢复到前台运行</p>
</li>
<li>
<p>backspace无法使用：Ctrl+H或者<code>stty erase ^H</code></p>
</li>
<li>
<p>Linux和Windows的文本文件存储格式不同（行尾不同），dos2unix/unix2dos转换</p>
</li>
</ol>
<h1 id="4-目录管理">4. 目录管理</h1>
<h2 id="41--系统目录">4.1  系统目录</h2>
<ul>
<li>/etc：配置文件</li>
<li>/tmp：临时文件</li>
<li>/var：系统运行时要改变的数据（比如日志）</li>
<li>/bin：系统常用命令（eg：ls、cp、cat）</li>
<li>/usr/bin：常用命令（eg：ssh，ftp，make， gcc，git）</li>
<li>/sbin, /usr/bin：系统管理员专用命令</li>
<li>/dev：设备文件</li>
<li>/usr/include：C语言头文件</li>
<li>/lib, /usr/lib：C语言链接库文件，静态链接库（.a文件)和动态链接库（.so文件，共享的目标代码，多个.o文件的集成，广泛使用）
<ul>
<li><code>ldd</code>：用来查看程序运行时所需的共享库</li>
</ul>
</li>
</ul>
<h2 id="42--文件通配符">4.2  文件通配符</h2>
<pre><code>command后面跟着的是参数或文件通配符，shell进行替换，而正则表达式不进行替换
</code></pre>
<ol>
<li>元字符
<ul>
<li><code>*</code>：匹配任意长度的文件名字符串（包括空串），当<code>.</code>作为开头或是包含<code>/</code>时，必须显示匹配</li>
<li><code>?</code>：匹配任一单字符</li>
<li><code>[]</code>：集合，匹配其中任一字符</li>
<li><code>~</code>：当前用户主目录</li>
<li><code>.</code>：当前目录</li>
<li><code>/</code>：根目录，斜线<code>/</code>，反斜线<code>\</code></li>
</ul>
</li>
</ol>
<h2 id="43--常用命令">4.3  常用命令</h2>
<ol>
<li>
<p><code>ls</code></p>
<ul>
<li>
<p><code>-F</code>：如果是目录，名字后面带<code>/</code>，如果是可执行文件，名字后面带<code>*</code>，如果是链接文件，名字后面带<code>@</code>，普通文件无标记（现在文件都用颜色表示）</p>
</li>
<li>
<p><code>-l</code>：</p>
<p>第一个字符为文件类型，-普通文件，d目录文件，l符号链接文件，c字符设备文件，b块设备文件，p管道文件</p>
<p>访问权限（文件所有者、同组用户、其他用户）</p>
<p>文件链接数</p>
<p>文件所有者名字和组名</p>
<p>文件大小（单位为字节，如果是目录则列出目录表大小不是目录大小）</p>
<p>最后修改日期和时间，文件名</p>
</li>
<li>
<p><code>-d</code>：列出目录自身的信息</p>
</li>
<li>
<p><code>ls *</code>：递归一层列出</p>
</li>
<li>
<p><code>-a</code>：列出所有文件</p>
</li>
</ul>
</li>
<li>
<p><code>cp</code>：复制</p>
<ul>
<li><code>cp file1 file2</code>：将file1复制到file2（如果file2不存在则创建，如果存在则覆盖）</li>
<li><code>cp -r dir1 dir2</code>：如果dir2不存在则复制dir1并改名为dir2，如果dir2存在则将dir1复制到dir2下</li>
<li><code>cp file1 file2 dir</code>：将file1，file2复制到dir目录</li>
<li><code>-u</code>：增量拷贝，便于备份目录</li>
</ul>
</li>
<li>
<p><code>mv</code>：移动</p>
<ul>
<li><code>mv file1 file2</code>：相当于将file1改名为file2</li>
<li><code>mv file1 file2 dir</code>：要求dir存在</li>
<li><code>mv dir1 dir2</code>：如果dir2不存在则相当于改名，如果dir2存在移动dir1到dir2下</li>
</ul>
</li>
<li>
<p><code>rm</code></p>
<p>-r递归删除， -i删除前确认， -f强迫删除只读文件</p>
<p><code>--</code>后参数被shell认为是处理对象而不是命令选项</p>
</li>
<li>
<p><code>mkdir</code>和<code>rmdir</code></p>
<ul>
<li><code>-p</code>：自动创建路径中不存在的目录</li>
</ul>
</li>
<li>
<p><code>touch</code>：将文件最后一次修改时间设置为当前时间（如果文件不存在，则创建文件）</p>
</li>
<li>
<p><code>find</code>：遍历目录树， find 查找范围 条件 动作</p>
<ul>
<li>
<p>条件</p>
<ul>
<li><code>-name wildcard</code>：文件名与wildcard匹配，wildcard加单引号，wildcard可以是正则表达式</li>
<li><code>-regex pattern</code>：整个路径名与pattern匹配</li>
<li><code>-type</code>：f普通文件，d目录，l符号链接文件，c（char），b（block），p（pipe）</li>
<li><code>-size +-n</code> ：指定文件大小（大于+，默认等于，小于-），单位是c（字符），b（块，512字节），k，M，G，默认b</li>
<li><code>-mtime +-n</code>：文件是最近n天内修改的</li>
<li><code>-newer file</code>：文件修改时间比file还新</li>
<li><code>!</code>：非，前后要有空格， 默认是与</li>
<li><code>\( 条件1 -o 条件2 \)</code>：或，因为<code>()</code>是shell的特殊符号</li>
</ul>
</li>
<li>
<p>动作</p>
<ul>
<li>
<p><code>-print</code>：打印查找的文件路径名</p>
</li>
<li>
<p><code>-exec</code>：对查找到的目标执行命令，在-exec之后和分号之前作为一条命令，{}表示文件路径名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find . -type f -name &#39;utils.*&#39; -exec ls -lh {} \;
</span></span><span class="line"><span class="cl">find . ! -newer file.txt \( -name &#39;*.c&#39; -o -name &#39;*.h&#39; \) -exec grep -n -- --help {} /dev/null \;	# 查找早于file.txt的.c或.h文件，并且在检索到的文件(用{}表示)中查找包含--help的内容，通过grep添加两个文件（{}和/dev/null）来显示查找到的内容是在哪一个文件中
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>-ok</code>：类似-exec，在执行命令前需要确认</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>xargs</code>：批量处理文件，常用于先列出文件然后再xargs批处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find . -name &#39;*.c&#39; -print | grep -n --help	# 每找到一个文件都要创建一个进程来grep
</span></span><span class="line"><span class="cl">find . -name &#39;*.c&#39; -print | xargs grep -n --help	# 找到所有文件后，只创建一个进程来批处理(grep)这些找到的文件，将标准输入追加到参数列表后面,效率高
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>tar</code>：<code>tar c/t/x vzj f my.tar filelist</code></p>
<ol>
<li>必选参数
<ul>
<li><code>c</code>：<code>tar cvf my.tar filelist</code>将filelist中文件打包到my.tar中</li>
<li><code>t</code>：<code>tar tvf my.tar</code>查看my.tar中有什么文件</li>
<li><code>x</code>：<code>tar xvf my.tar</code>解包，此时不需要压缩算法</li>
<li><code>f</code>：指定设备文件名（即.tar文件）</li>
</ul>
</li>
<li>可选参数
<ul>
<li><code>v</code>：verbose</li>
<li><code>z</code>：gzip压缩，快，常<code>gz</code>后缀</li>
<li><code>j</code>：bzip2压缩，压缩率高，常<code>bz2</code>后缀</li>
</ul>
</li>
</ol>
</li>
<li>
<p><code>gzip, gunzip; bzip2, bunzip2</code>：压缩解压缩</p>
</li>
<li>
<p><code>du</code>：<code>du -d 1 -h</code>显示文件大小，类似windows</p>
<ul>
<li><code>-d</code>：递归深度</li>
</ul>
</li>
</ol>
<h1 id="5-文件管理">5. 文件管理</h1>
<h2 id="51--运行时获取信息">5.1  运行时获取信息</h2>
<ol>
<li>配置文件</li>
<li>环境变量：<code>env</code>打印当前环境变量，PATH是可执行文件的查找路径，CLASSPATH是类库查找路径，使用export来添加环境变量</li>
<li>命令行参数</li>
<li>交互式键盘输入</li>
</ol>
<h2 id="52--文件系统">5.2  文件系统</h2>
<ol>
<li>
<p>文件系统命令</p>
<ul>
<li>
<p><code>mkfs</code>：创建文件系统</p>
</li>
<li>
<p><code>mount, umount</code>：安装、卸载文件系统</p>
</li>
<li>
<p><code>df </code>：查看文件系统空间空间</p>
</li>
</ul>
</li>
<li>
<p>文件系统结构</p>
<ul>
<li>
<p>引导块：启动系统</p>
</li>
<li>
<p>专用块：管理快（或超级块），存放文件系统的管理信息</p>
</li>
<li>
<p>i节点区：每个文件一个i-node，包括索引、指针和文件信息</p>
</li>
<li>
<p>文件存储区：目录表（文件名和i-node指针）和文件内容</p>
</li>
</ul>
</li>
</ol>
<h2 id="53--链接">5.3  链接</h2>
<ol>
<li>
<p>硬链接：目录项指定的“文件名 i-node”映射关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln file.txt lnk	# 创建file.txt的硬链接lnk，删除lnk时对应i-node的link数减一，仅限于同一个文件系统中的普通文件
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>软链接（符号链接）：创建一个“符号链接文件”，里面存储路径（如果时相对路径，则相对于该符号链接文件）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln -s file.txt lnk # 创建file.txt的软链接lnk
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="54--可执行文件">5.4  可执行文件</h2>
<ol>
<li>程序文件：二进制</li>
<li>脚本文件：第一行指定解释程序，在运行中由解释程序创建一个进程进行解释执行</li>
</ol>
<h2 id="55--权限">5.5  权限</h2>
<ol>
<li>目录权限：实际上是对目录表的权限，无读权限则无法ls，无写权限则无法创建、删除文件等（但文件可能可以修改），执行权限表示分析路径名中可以检索该目录</li>
<li><code>chmod [ugoa][+-=][rwxst] file</code>
<ul>
<li>u=user, g=group, o=other, a=all,</li>
</ul>
</li>
</ol>
<h1 id="6-shell">6. Shell</h1>
<h2 id="61--shell">6.1  shell</h2>
<pre><code>命令解释器，交互式方式下替换、转义、内部外部命令，非交互式方式下编写脚本程序批量处理
</code></pre>
<h2 id="62--bash启动方式">6.2  bash启动方式</h2>
<ol>
<li>
<p>注册shell，启动时自动执行</p>
<p>（用户级）：~/.bash_profile</p>
<p>（系统级）：/etc/profile</p>
<p>退出时，自动执行</p>
<p>（用户级）：~/.bash_logout</p>
<p>（系统级）：/etc/bash.bash.logout</p>
</li>
<li>
<p>交互式shell，启动时自动执行</p>
<p>（用户级）：~/.bashrc</p>
<p>（系统级）：/etc/bash.bashrc</p>
</li>
<li>
<p>脚本解释器：</p>
<ul>
<li>新创建子进程，在子进程中执行脚本
<ul>
<li><code>bash &lt; test.sh</code>：无法携带命令行参数</li>
<li><code>bash test.sh ..</code>：<code>-x</code>参数便于调试和观察</li>
<li><code>chmod u+x test.sh; ./test.sh ..</code></li>
</ul>
</li>
<li>在当前shell中执行
<ul>
<li><code>chmod u+x test.sh; . test.sh ..</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="63--别名">6.3  别名</h2>
<p>在.bashrc中添加一个别名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">alias lls = &#34;ls -lh&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="64--重定向">6.4  重定向</h2>
<ol>
<li>
<p>输入重定向</p>
<ul>
<li>
<p><code>&lt;</code>：从file中获取输入</p>
</li>
<li>
<p><code>&lt;&lt;</code>：从shell脚本中获取输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">cat</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Now</span><span class="p">:</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># WORD是定界符，之间内容进行替换并执行获取输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">cat</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s1">&#39;WORD&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Now</span><span class="p">:</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 当定界符有单引号时，之间内容不做替换
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>&lt;&lt;&lt;</code>：从命令行获取信息作为标准输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">base64 &lt;&lt;&lt; &#39;test&#39;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>输出重定向</p>
<ul>
<li>
<p><code>&gt;</code>：覆盖，stdout重定向</p>
</li>
<li>
<p><code>&gt;&gt;</code>：追加，stdout重定向</p>
</li>
<li>
<p><code>2&gt;</code>：将句柄2（stderr）重定向（句柄1是stdout）</p>
</li>
<li>
<p><code>2&gt;&amp;1</code>：将句柄2重定向到文件描述符1指向的文件，放在命令最后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc test.c &gt; test.err 2&gt;&amp;1
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>管道<code>|</code>将前一命令的stdout作为后一命令的stdin，同样可以使用<code>2&gt;&amp;1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc test.c &gt; test.err 2&gt;&amp;1 | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h2 id="65--设置">6.5  设置</h2>
<ol>
<li><code>set -u</code>：当引用一个未定义的变量时，产生一个错误</li>
<li><code>set +u</code>：当引用一个未定义的变量时，视为一个空字符串</li>
<li><code>set -x</code>：打印出shell替换后的命令和参数，常用于观察命令经过shell替换后哪里错误</li>
<li><code>set +x</code>：取消<code>set -x</code></li>
</ol>
<h2 id="66--常用命令">6.6  常用命令</h2>
<ol>
<li>
<p><code>echo</code>：打印命令行参数</p>
<ul>
<li><code>-e</code>：转义打印</li>
</ul>
</li>
<li>
<p><code>printf</code>：类似C语言</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">printf &#34;home:%s\n&#34; $HOME
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>read</code>：获取用户输入</p>
</li>
</ol>
<h2 id="67--环境变量">6.7  环境变量</h2>
<p>子进程继承父进程的环境变量，以后再不影响</p>
<ul>
<li>使用export将局部变量转为环境变量</li>
<li>PATH：命令查找路径，不要将<code>.</code>放入PATH，PATH以<code>:</code>分隔路径</li>
<li><code>env</code>：列出环境变量</li>
<li><code>set</code>：列出环境变量、局部变量、函数定义</li>
</ul>
<h2 id="68--替换">6.8  替换</h2>
<ol>
<li>
<p>文件名生成替换：遵循文件通配符规则</p>
</li>
<li>
<p>变量替换：<code>$var</code></p>
</li>
<li>
<p>命令替换：以命令的stdout进行替换，  `````` ````(反撇号)或者 <code>$()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="kt">date</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="69--语法">6.9  语法</h2>
<h3 id="691--变量">6.9.1  变量</h3>
<ul>
<li><strong>shell先替换，再执行</strong></li>
<li>变量都是字符串，可以修改</li>
<li>赋值语句等号两边不能有空格（否则会认为是参数），右侧字符串如果有特殊字符需要用双引号</li>
<li>引用变量：<code>$var</code>或<code>${var}</code>，引用未定义变量认为是空字符串</li>
<li>内部变量：位置参数
<ul>
<li><code>$0, $1, $2</code>：第一个命令行参数（脚本文件本身的名字），第二个命令行参数，第三个命令行参数</li>
<li><code>$#</code>：命令行参数的个数</li>
<li><code>$*</code>：相当于<code>&quot;$1 $2 $3 ...&quot;</code>将整体作为一个参数</li>
<li><code>$@</code>：相当于<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; ... </code>将变长的命令行参数传递给其他命令</li>
<li><code>shift n</code> ：位置参数的移位操作，位置参数顺次向前移动n个位置</li>
</ul>
</li>
</ul>
<h3 id="692--元字符">6.9.2  元字符</h3>
<ul>
<li>
<p>空格，tab：命令行参数分隔符</p>
</li>
<li>
<p>回车：运行命令</p>
</li>
<li>
<p><code>&gt;&lt;|</code>：重定向与管道（还有<code>||</code>）</p>
</li>
<li>
<p><code>;</code>：一个内多个命令（还有<code>;;</code>）</p>
</li>
<li>
<p><code>&amp;</code>：后台运行（还有<code>&amp;&amp;</code>）</p>
</li>
<li>
<p><code>$</code>：引用变量</p>
</li>
<li>
<p>````` <code>：反撇号用于命令替换，出现元字符注意转义，可以嵌套但要转义`\\` 、</code>` ````</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">year=`expr \`date &#39;+%Y&#39;\` - 10 `
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>文件通配符：<code>*[]?</code></p>
</li>
<li>
<p><code>()</code>：用于定义shell函数或在子shell中执行一组命令</p>
</li>
<li>
<p><code>&quot;</code>：除了<code>$</code>和````` <code>，其他的特殊字符都不转义，里面只能有四种转义：`\&quot;` 、 `\$`、 </code>` ````、  <code>\\</code></p>
</li>
<li>
<p><code>'</code>：都不转义，中间不能有单引号（可以拆分成多段）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">在*.conf文件中匹配&#39;192.168.x.x&#39;结尾
</span></span><span class="line"><span class="cl">pattern:  &#39;192\.168\.[0-9.]*&#39;$
</span></span><span class="line"><span class="cl">grep \&#39;&#39;192\.168\.[0-9.]*&#39;\&#39;&#39;$&#39; *.conf	# 使用单引号
</span></span><span class="line"><span class="cl">grep &#34;&#39;192\\.168\\.[0-9.]*&#39;\S&#34; *.conf	# 使用双引号
</span></span><span class="line"><span class="cl">grep \&#39;192\\.168\\.\[0-9.]\*\&#39;\$ *.conf	# 只使用转义,不被引号包括的字符串
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="693--条件判断">6.9.3  条件判断</h3>
<ol>
<li>
<p>逻辑判断</p>
<ul>
<li>
<p>命令的返回码是0，则命令执行成功</p>
</li>
<li>
<p><code>$?</code>输出上一个命令的返回码，用管道连接时以最后一个命令的返回码为准</p>
</li>
<li>
<p><code>&amp;&amp;</code> <code>||</code>：与，或，可以短路</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cmd1 &amp;&amp; cmd2	# cmd1执行失败就不执行cmd2
</span></span><span class="line"><span class="cl">cmd1 || cmd2	# cmd1执行成功就不执行cmd2
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>检测命令：<code>test</code>或<code>[</code>(是一个命令而非词法符号，最后一个参数必须是])</p>
<ul>
<li>
<p>文件特性检测：</p>
<ul>
<li>
<p><code>-f</code>普通文件，<code>-d</code>目录文件，<code>-r</code>可读，<code>-w</code>可写，<code>-x</code>可执行，<code>-s</code>size&gt;0</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">test -r myfile.txt &amp;&amp; echo readable
</span></span><span class="line"><span class="cl">[ -r myfile.txt] &amp;&amp; echo readable
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>检测命令是否执行成功</p>
</li>
<li>
<p>比较</p>
<ul>
<li>
<p>字符串比较：shell中有三种字符串</p>
<p><code>str1 = str2</code>或<code>str1 != str2</code>等号两边一定要有空格</p>
</li>
<li>
<p>整数的比较</p>
<p><code>-eq</code>=，<code>-ne</code>!=， <code>-gt</code>&gt;，  <code>-lt</code>&lt;， <code>-ge</code>&gt;=， <code>-le</code>&lt;=</p>
</li>
<li>
<p>逻辑运算</p>
<p><code>!</code> 非，<code>-o</code>或， <code>-a</code>与</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>命令组合：经常命令检测之后执行多条命令</p>
<ul>
<li>
<p><code>{}</code>：在当前shell中执行，命令组合最后有分号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ -d $DIR ] &amp;&amp; { cd ..; ls -l; ps; } | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>()</code>：在子进程中执行，命令组合最后无分号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ -d $DIR ] $$ ( cd..; ls -l; ps ) | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>条件结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">if condition
</span></span><span class="line"><span class="cl">	then list
</span></span><span class="line"><span class="cl">elif condition
</span></span><span class="line"><span class="cl">	then list
</span></span><span class="line"><span class="cl">else
</span></span><span class="line"><span class="cl">	list
</span></span><span class="line"><span class="cl">fi
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="694--表达式运算expr">6.9.4  表达式运算<code>expr</code></h3>
<ul>
<li>运算类型：<code>()</code>，五种算术运算，六种关系运算，<code>&amp; |</code>与或， <code>:</code>正则</li>
<li>注意运算符的转义</li>
<li><code>:</code>正则：<code>expr str : pattern</code>
<ul>
<li>从最左字符开始尽量匹配，最终输出匹配的长度</li>
<li>使用的是基本正则语法，但是<code>\+</code> <code>\?</code> <code>\|</code>表示匹配一个或多个，匹配0个或1个，或（两端任选其一）</li>
<li>使用<code>\( \)</code>，将其中匹配的内容提取出来</li>
</ul>
</li>
</ul>
<h3 id="695--循环结构">6.9.5  循环结构</h3>
<ol>
<li>
<p><code>while</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">while condition
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>for</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for name in word1, word2, ...
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 或者
</span></span><span class="line"><span class="cl">for name
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl"># 相当于
</span></span><span class="line"><span class="cl">for name in $1, $2, ...
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">for i in `seq 1 255` # 相当于for i in range(1,256)
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>break n</code>：跳出n层循环</p>
</li>
<li>
<p><code>continue</code></p>
</li>
<li>
<p><code>exit val</code>：结束脚本执行，返回值为val</p>
</li>
</ol>
<h3 id="696--其他">6.9.6  其他</h3>
<ol>
<li><code>eval</code>：将参数先进行变量替换或加工，然后将结果作为程序来执行</li>
</ol>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
