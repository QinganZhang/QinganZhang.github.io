<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>architecture on Paul&#39;s Blog</title>
    <link>https://qinganzhang.github.io/tags/architecture/</link>
    <description>Recent content in architecture on Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 29 Feb 2024 14:52:29 +0800</lastBuildDate><atom:link href="https://qinganzhang.github.io/tags/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机架构科普和梳理</title>
      <link>https://qinganzhang.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%B6%E6%9E%84%E7%A7%91%E6%99%AE%E5%92%8C%E6%A2%B3%E7%90%86/</link>
      <pubDate>Thu, 29 Feb 2024 14:52:29 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%B6%E6%9E%84%E7%A7%91%E6%99%AE%E5%92%8C%E6%A2%B3%E7%90%86/</guid>
      <description>指令集架构 指令集 说明了操作种类、指令格式（操作码和地址码，地址码个数，操作码定长与拓展）、寻址方式、地址空间大小和寄存器个数等。简单可以理解</description>
      <content:encoded><![CDATA[<h2 id="指令集架构">指令集架构</h2>
<h3 id="指令集">指令集</h3>
<p>说明了操作种类、指令格式（操作码和地址码，地址码个数，操作码定长与拓展）、寻址方式、地址空间大小和寄存器个数等。简单可以理解为汇编指令用01表示。</p>
<blockquote>
<p>CPU位数=CPU中寄存器的位数=数据总线宽度</p>
</blockquote>
<ul>
<li>
<p>硬件厂商开发某种指令集的CPU，需要该指令集专利持有者进行授权</p>
<ul>
<li>
<p>比如ARM公司自己的研发指令集叫ARM指令集，对外授权（同时ARM公司还进行微架构的授权）</p>
</li>
<li>
<p>一些大型公司都获得ARM公司针对ARM指令集的授权，开发兼容ARM指令集的不同的微架构</p>
<ul>
<li>比如Intel授权AMD可以生产兼容x86指令集的CPU</li>
</ul>
</li>
</ul>
</li>
<li>
<p>编译：高级语言翻译成特定ISA的机器码</p>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/19893066">关于CPU、指令集、架构、芯片的一些科普</a></li>
</ul>
</li>
</ul>
<h3 id="复杂指令集cisc">复杂指令集CISC</h3>
<ul>
<li>
<p>x86：在1978年的Intel 8086 CPU（16位）指令集基础上，发展而来的一些列指令集的泛称</p>
<ul>
<li>桌面级CPU一般都是x86的，兼容8086指令集</li>
</ul>
</li>
<li>
<p>IA-32(x86,i386)：Intel将16位的x86拓展为32位的IA-32，但是由于IA-32的统治地位，x86也一般指IA-32的CPU</p>
<ul>
<li>Intel 80386是第一款i386 CPU（第一款IA-32架构的CPU）
<ul>
<li>i386，i486：即Intel 80386， Intel 80486</li>
<li>Pentium（i586）：Intel 80586</li>
<li>Pentium Pro（Pentium Ⅱ，i686）：Intel 80686</li>
</ul>
</li>
<li>此后，x86成为一些列架构的泛称，不限于16位，32位，64位</li>
</ul>
</li>
<li>
<p>IA-64：1994年Intel推出的与x86完全无关的新架构（也不兼容之），基于显式并行指令运算（EPIC）的64位指令集架构</p>
<ul>
<li>2001年发布第一款基于IA-64的CPU，叫Itanium安腾，IA-64也称为Intel Itanium</li>
<li>但是由于软件环境的缺乏和AMD的竞争，导致市场不好</li>
</ul>
</li>
<li>
<p>x86-64(x64)：1999年，AMD推出x86-64架构（简称x64），是对IA-32(x86)的兼容和拓展</p>
<ul>
<li>
<p>2003年AMD发布的一款基于x86-64的CPU，x86-64也称为AMD64</p>
</li>
<li>
<p>后来Intel也用AMD64架构，称为IA-32e(IA-32 extension)，后来又叫Intel64</p>
</li>
<li>
<p>x86-64, x64, AMD64, Intel64, IA-32e(IA-32 extension)基本是一个东西</p>
<ul>
<li>
<p>苹果公司和 <code>RPM</code> 包管理员以 <code>x86-64</code> 或 <code>x86_64</code> 称呼此 <code>64</code> 位架构。甲骨文公司及 <code>Microsoft</code> 称之为<code>x64</code>。<code>BSD</code> 家族及其他 <code>Linux</code> 发行版则使用 <code>amd64</code>，<code>32</code> 位版本则称为<code>i386</code>（或 <code>i486/586/686</code>），<code>Arch Linux</code> 用<code>x86_64</code> 称呼此 <code>64</code> 位架构。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/113157931#:~:text=CPU%20%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E7%9B%AE%E5%89%8D%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%A4%E5%A4%A7%E7%B1%BB%E3%80%82%20%E5%A4%8D%E6%9D%82%E6%8C%87%E4%BB%A4%E9%9B%86%E6%98%AF%20x86%20%E3%80%81%20x64%20%28%E4%B9%9F%E5%8F%AB%20x86-64%2C,%E4%B8%80%E7%A7%8D%E6%9E%B6%E6%9E%84%EF%BC%8C%E4%B8%93%E5%88%A9%E5%9C%A8%20ARM%20%E5%85%AC%E5%8F%B8%E6%89%8B%E9%87%8C%EF%BC%8C%E8%AF%A5%E6%9E%B6%E6%9E%84%20CPU%20%E4%B8%BB%E8%A6%81%E6%9C%89%E9%AB%98%E9%80%9A%E3%80%81%E4%B8%89%E6%98%9F%E3%80%81%E8%8B%B9%E6%9E%9C%E3%80%81%E5%8D%8E%E4%B8%BA%E6%B5%B7%E6%80%9D%E3%80%81%E8%81%94%E5%8F%91%E7%A7%91%E7%AD%89%E5%85%AC%E5%8F%B8%E3%80%82%20%E8%BF%99%E7%A7%8D%20CPU%20%E5%B8%B8%E7%94%A8%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%AE%89%E5%8D%93%E5%92%8C%E8%8B%B9%E6%9E%9C%E3%80%82">x86,x64,x86-64,amd64,arm指令集架构之间的关系</a>中x86 架构发展</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://www.jianshu.com/p/70872b91ab46">i386、i486、i586、 i686、 x86、x86_64、x64、amd_64详解【写的很好】</a></li>
</ul>
</li>
</ul>
<h3 id="精简指令集risc">精简指令集RISC</h3>
<ul>
<li>ARM
<ul>
<li>ARMv3~ARMv7都是32位</li>
<li>ARMv8：向前兼容32位指令，同时
<ul>
<li>AArch64：64位执行状态，使用全新的ARM 64位指令集</li>
<li>AArch32：32位执行状态</li>
</ul>
</li>
</ul>
</li>
<li>RISC-V：伯克利发明的一种基于RISC的开源指令集架构
<ul>
<li><a href="https://www.sohu.com/a/225906734_132567">一文看懂RISC-V</a></li>
</ul>
</li>
<li>MIPS</li>
<li>PowerPC</li>
</ul>
<h2 id="微架构">微架构</h2>
<ul>
<li>微架构：硬件电路（或CPU单个核心core）的结构和实现</li>
<li>CPU研发能力一般指的是独立的微架构研发能力，是否使用自行研发的指令集关系不大
<ul>
<li>研发兼容的指令集可以没有获得授权，指令集的研发不是很难，但是之后获得授权后才能合法销售</li>
<li>微架构的设计细节是保密且复杂的</li>
<li>SoC（System on Chip）封装相对简单</li>
</ul>
</li>
<li>商业模式
<ul>
<li>之前在PC时代，CPU研发厂商自己的微架构只有自己用</li>
<li>后来在智能设备时代，ARM公司将自己的微架构出售，其他厂商可以拿来组装，比如Cortex系列核心</li>
<li>由于ARM公司的成功，ARM公司针对PC领域发布了ARM v8 64位指令集
<ul>
<li>以前ARM适合低功耗的场景，随着技术进步，指令集对微架构的影响越来越小</li>
</ul>
</li>
</ul>
</li>
<li>指令集的选择：倾向于选择软件生态良好的指令集
<ul>
<li>以前获得指令集的授权很困难，主要通过技术交换的形式（指令集多授权一家，就多一个对手）</li>
<li>后来ARM对指令集授权略微放松</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://www.jianshu.com/p/c80850ccfb27">指令集、微架构、手机芯片(Soc)及ARM的介绍(偏硬件科普)</a></li>
</ul>
</li>
</ul>
<h2 id="计算机架构">计算机架构</h2>
<ul>
<li>冯.诺伊曼架构：程序和指令存储在一起</li>
<li>哈佛架构：程序和指令分开存储
<ul>
<li>比如单片机（51单片机，STM32单片机），Cortex-M系列</li>
</ul>
</li>
<li>现代处理器架构一般指令和数据共享存储，但是CPU内部缓存分开</li>
</ul>
<h2 id="特别介绍arm">特别介绍：ARM</h2>
<h3 id="arm商业发展">ARM商业发展</h3>
<ul>
<li>
<p>由于商业需要，1985年，Acorn公司基于RISC，自研CPU（包括指令集和微架构），称为ARM（Acorn RISC Machine），型号命名为ARM1（对标80286）</p>
</li>
<li>
<p>后来，Acorn公司和苹果公司联合成立了一家叫ARM（Advanced RISC Machines）的公司，开启新的产品策略：授权</p>
<blockquote>
<p>传统商业模式：</p>
<ul>
<li>IDM(Integrated Design and Manufacture)：从设计，到制造、封装测试以及投向消费市场一条龙全包，比如Intel</li>
<li>无工厂模式Fabless：自己设计，制造交给代工厂，比如AMD，NVIDIA</li>
<li>Foundry：只做代工</li>
</ul>
</blockquote>
<ul>
<li>使用层级授权（处理器授权）：只能买来已经封装好的CPU，不能更改原来设计，可以配置的地方不多</li>
<li>内核层级授权（POP授权）：以一个内核（或IP核）为基础然后在加上自己的外设</li>
<li>架构层级授权：授权使用ARM指令集，可以修改指令集，但是比较贵
<ul>
<li>比如华为基于ARMv8，自研达芬奇架构</li>
</ul>
</li>
</ul>
</li>
<li>
<p>后来ARM公司越来越成功，苹果公司逐渐卖掉其股份，开发ipod（基于ARM指令集）。</p>
<ul>
<li>2007年，苹果公司发布iphone，基于ARM指令集</li>
<li>2008年，谷歌发布Android系统，也是基于ARM指令集</li>
</ul>
</li>
<li>
<p>2016年，ARM公司被软银集团收购</p>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://www.zhihu.com/question/296178433/answer/692275926">如何看待观点「华为没有核心技术，因为芯片用的是ARM（安谋）架构，一旦被停止授权，就会做不出芯片」？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/266092621">【推荐】到底什么是Cortex、ARMv8、arm架构、ARM指令集、soc？一文帮你梳理基础概念【科普】</a></li>
</ul>
</li>
</ul>
<h3 id="arm处理器">ARM处理器</h3>
<blockquote>
<p>一般处理器就是指CPU</p>
<p>但是ARM处理器指的是单个核（或IP核，或内核），因为厂商可以在IP核上进一步封装，最终CPU不尽相同</p>
<blockquote>
<p>IP核，全称知识产权核（英语：intellectual property core），是在集成电路的可重用设计方法学中，指某一方提供的、形式为逻辑单元、芯片设计的可重用模组。IP核通常已经通过了设计验证，设计人员以IP核为基础进行设计，可以缩短设计所需的周期。</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/362648496">armv7-A系列0 - arm 处理器架构发展史</a>中的处理器到底指的是什么</li>
<li><a href="https://zhuanlan.zhihu.com/p/266092621">到底什么是Cortex、ARMv8、arm架构、ARM指令集、soc？一文帮你梳理基础概念【科普】</a>中的ARM内核与架构</li>
<li><a href="https://www.jianshu.com/p/c80850ccfb27">指令集、微架构、手机芯片(Soc)及ARM的介绍(偏硬件科普)</a></li>
</ul>
</blockquote>
<ul>
<li>
<p>指令集架构：</p>
<ul>
<li>ARMv1~ARMv9（可以有一定的变种比如ARMv8-A）</li>
<li>ARMv8是首款64位的ARM指令集</li>
</ul>
</li>
<li>
<p>处理器架构</p>
<ul>
<li>ARMv3~ARMv6：
<ul>
<li>ARM6, ARM7, ARM9, ARM11系列</li>
</ul>
</li>
<li>ARMv7及以后
<ul>
<li>Cortex-A：大型嵌入式系统（手机）</li>
<li>Cortex-R：实时处理器</li>
<li>Cortex-M：单片机</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考：</p>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/494924815#:~:text=ARM%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20%7C%20ARM%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%201%201.%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%20%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E5%91%BD%E5%90%8D%E6%A0%BC%E5%BC%8F%3A%20Armv%EF%BC%9A%E5%9B%BA%E5%AE%9A%E5%AD%97%E7%AC%A6%2C%20%E5%8D%B3ARM,x%EF%BC%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%B3%BB%E5%88%97%2C%20%E6%9C%896%2C%207%2C%209%20%2C%2011%E7%AD%89%E5%A4%9A%E4%B8%AA%E7%B3%BB%E5%88%97%20y%EF%BC%9A%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%2F%E4%BF%9D%E6%8A%A4%E5%8D%95%E5%85%83%20">ARM基础教程 | ARM命名规则</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/25681832">ARM 命名规则——指令架构、CPU的历史回顾</a></p>
</li>
</ul>
</li>
</ul>
<p>参考：</p>
<p><a href="https://dongka.github.io/2018/11/17/cpu/arm%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8F%91%E5%B1%95/">ARM体系架构概述</a></p>
<h3 id="android">Android</h3>
<h4 id="简介">简介</h4>
<ul>
<li>
<p>Android是一个开源的，基于Linux的移动设备操作系统，主要使用于移动设备</p>
</li>
<li>
<p>谷歌在2007年发布了第一个测试版本的 Android 软件开发工具包（SDK），第一个商业版本的 Android 1.0，则发布于2008年9月。</p>
</li>
<li>
<p>Android 应用程序一般使用 Android 软件开发工具包，采用 Java 语言来开发。</p>
</li>
</ul>
<h4 id="版本">版本</h4>
<ul>
<li>
<p><a href="https://developer.android.com/about/versions?hl=zh-cn">Android版本</a>（版本代号）</p>
<ul>
<li>每个Android 版本对应一个Android SDK，可以类比JDK</li>
</ul>
</li>
<li>
<p>Android API版本：有利于设置和解决兼容性问题</p>
<p><a href="https://developer.android.com/about/versions/13/get?hl=zh-cn">Android API级别官方说明</a></p>
<p><a href="https://apilevels.com/">Android版本和 Android API level的对应关系</a></p>
</li>
<li>
<p>Android NKD</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-09-04-15:56:07.png" alt="image-20230710173808296" style="zoom:80%;" />
</li>
</ul>
<h2 id="工具链">工具链</h2>
<p>背景：</p>
<ul>
<li>使用GCC编译，很多时候需要手动链接（只有标准库才默认链接）</li>
<li>当需要链接的文件很多时，一来每次在命令行中写一遍繁琐容易出错，二来无法使用增量编译</li>
</ul>
<h3 id="makefile">Makefile</h3>
<ul>
<li>
<p>背景：make命令根据编译规则进行编译，而且可以进行增量编译，makefile用于写编译规则</p>
</li>
<li>
<p>简要语法：</p>
<ul>
<li><a href="http://ruanyifeng.com/blog/2015/02/make.html">阮一峰make教程</a></li>
<li><a href="https://blog.csdn.net/Nire_Yeyu/article/details/106373974">简明make教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/376493209">GNU make/Makefile 简明实用教程</a></li>
</ul>
</li>
<li>
<p>语法笔记</p>
<ul>
<li>
<p>make：即制作出某个指定的文件（默认makefile中第一个文件）</p>
<ul>
<li>越是接近目标文件的命令，就越是要写在前面。因为程序是按照递归的方式进行依赖文件查找的，看到第一行有一个没见过的依赖文件，就往下一行进行查找，以此类推。</li>
</ul>
</li>
<li>
<p>核心概念：目标target，前置条件prerequisite，命令command</p>
</li>
<li>
<p>伪目标的使用</p>
<ul>
<li>
<p>伪目标是一个命令，且没有前置条件：比如clean，显式使用内置目标名指定为伪目标，主要用于执行命令</p>
</li>
<li>
<p>伪目标是一个文件，但是前置条件有多个，且没有命令：比如生成多个文件</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="cmake">CMake</h3>
<ul>
<li>背景：
<ul>
<li>当工程很大的时候，手写Makefile也不简单</li>
<li>Makefile与平台相关，无法实现跨平台</li>
</ul>
</li>
<li>cmake：跨平台的项目管理工具，自动生成makefile文件，然后make构建
<ul>
<li>手写CMakeLists.txt文件，cmake生成Makefile，然后再make构建</li>
</ul>
</li>
<li>cmake简要语法
<ul>
<li>
<p>指令大小写无关，变量大小写相关</p>
</li>
<li>
<p>可以使用双引号将文件名或目录名包含其中</p>
</li>
<li>
<p><code>add_executable</code>：将源文件编译成可执行文件</p>
</li>
<li>
<p><code>add_library</code>：将源文件编译为库文件</p>
<ul>
<li>在构建时，静态库和动态库重名会导致后面的构建失败，<a href="https://blog.csdn.net/qq_34796146/article/details/108877159">参考</a></li>
<li><code>SET_TARGET_PROPERTIES</code>：同时构建同名的静态库和动态库</li>
</ul>
</li>
<li>
<p><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code>：将dir目录下所有源文件的文件名存放到variable变量中</p>
</li>
<li>
<p><code>add_subdirectory</code>：包含一个子目录，该子目录中也有一个CMakeLists.txt文件和代码文件，它们也会被处理，同时可以指定编译输出（包含编译中间结果）的路径</p>
</li>
<li>
<p><code>link_directories</code>：添加共享库搜索目录</p>
<ul>
<li><code>CMAKE_LIBRARY_PATH</code>：设置库文件搜索目录，这不是cmake变量（需要在bash中设置），通过<code>FIND_LIBRARY</code>找到相应库文件</li>
</ul>
</li>
<li>
<p><code>target_link_libraries(&lt;target&gt; &lt;items&gt;)</code>：为库或可执行文件加入库链接</p>
</li>
<li>
<p><code>include_directories</code>：添加头文件搜索目录</p>
<ul>
<li><code>CMAKE_INCLUDE_PATH</code>：设置头文件搜索目录，这不是cmake变量（需要在bash中设置），通过<code>find_path</code>找到相应头文件</li>
</ul>
</li>
<li>
<p><code>target_include_directories</code>：在编译目标文件时指定头文件</p>
</li>
<li>
<p><code>find_</code>系列</p>
<ul>
<li><code>find_package</code>：加载外部库到项目中</li>
</ul>
</li>
<li>
<p><code>configure_file</code>：默认定义了一些编译选项的值</p>
</li>
<li>
<p><code>option</code>：添加编译选项（更准确是代码中的宏定义）</p>
</li>
<li>
<p>变量</p>
<ul>
<li>创建变量：<code>set()</code>，获取变量的值：<code>${variable}</code>，调用环境变量：<code>$ENV{}</code></li>
<li>追加变量的值：<code>set(SRC_LIST ${SRC_LIST} test.cpp)</code></li>
<li><code>PROJECT_NAME</code></li>
<li><code>PROJECT_BINARY_DIR、CMAKE_BINARY_DIR</code>：编译路径，当前工程的二进制路径（即编译产物会存放到该路径，一般为build所在路径）</li>
<li><code>PROJECT_SOURCE_DIR、CMAKE_SOURCE_DIR</code>：工程根目录，即顶层CMakeLists.txt文件的路径</li>
<li><code>EXECUTABLE_OUTPUT_PATH</code>：编译生成的可执行文件的路径</li>
<li><code>LIBRARY_OUTPUT_PATH</code>：编译生成的共享库文件的路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="最佳实践">最佳实践</h3>
<h4 id="项目配置">项目配置</h4>
<ul>
<li>在源文件同级目录下建立目录build，在build中
<ul>
<li><code>cmake ..</code>：将cmake得到的中间文件保存在build文件夹中，需要重新构建直接删除文件夹</li>
<li><code>make</code>：构建，可以使用<code>make clean</code>清除中间文件，重新构建</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
