<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Post on Paul&#39;s Blog</title>
    <link>https://qinganzhang.github.io/posts/</link>
    <description>Recent content in Post on Paul&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 04 Mar 2024 20:57:14 +0800</lastBuildDate><atom:link href="https://qinganzhang.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A survey of Efficient Transformer on Inference</title>
      <link>https://qinganzhang.github.io/posts/a_survey_of_efficient_transformer_on_inference/</link>
      <pubDate>Mon, 04 Mar 2024 20:57:14 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/a_survey_of_efficient_transformer_on_inference/</guid>
      <description>Abstract Transformer模型架构在自然语言处理、计算机视觉、强化学习等领域表现出了强大的能力，已经成为当前深度学习很多模型的核心，当前发展迅</description>
      <content:encoded><![CDATA[<h2 id="abstract">Abstract</h2>
<p>Transformer模型架构在自然语言处理、计算机视觉、强化学习等领域表现出了强大的能力，已经成为当前深度学习很多模型的核心，当前发展迅速的大模型更加凸显出这一点。由于Transformer较高的复杂度，限制了其在很多场景中的应用。因此，为了提高模型的高效性，针对Transformer的改进层出不穷。本文从模型算法的角度出发，关注于模型推理的场景，从不同层次梳理当前提高模型效率的方法，包括设计复杂度更低的注意力机制、提出更加高效的网络设计、进行模型压缩和优化的方法，并针对每一种方法进一步做了分类和总结，并选取具有代表性的方法进行说明。本文最后探讨了Transformer未来可能的发展方向。</p>
<h1 id="1-introduction">1. Introduction</h1>
<p>近年来，深度学习发展迅速，尤其是以Transformer为核心的结构，构成了当前深度学习架构的核心，在计算机视觉、自然语言处理等领域，SOTA的模型均以Transformer架构为核心，而且当前诸如ChatGPT等大模型，核心同样是基于RLHF的Transformer，显示出了Transformer强大的能力。</p>
<p>但是，受限于Transformer相对于序列长度平方的计算复杂度，在图片、视频等需要长序列的场景下，相对于传统的CNN架构，Transformer仍不够有效，无法得到有效的应用。Transformer的平方复杂度来源于注意力机制，因此，许多研究关注于改进注意力机制，降低注意力机制的复杂度，提出新的注意力机制。除此之外，不同的Transformer架构被提出，这些架构在Vanilla Transformer架构上做出改进来提高计算和访存效率，这可以归结为efficient attention或efficient Transformer网络架构的设计。</p>
<p>除此之外，为了进一步降低Transformer模型的复杂度，提高模型的推理速度，efficient Transformer的网络架构还可以使用一些模型压缩的方法，比如剪枝、量化、蒸馏、神经架构搜索（NAS）等，这些方法可以在基本保持模型效果的同时，降低模型复杂度，减小模型大小，进一步加速模型的推理。</p>
<p>需要说明的是，efficiency是一个比较宽泛的用词，包括data-efficiency, model-efficiency（efficient architecture），training-efficiency，inference-efficiency。其中data-efficiency一般指充分利用、挖掘数据，从小规模数据中进行学习；model-efficiency侧重于降低模型的复杂度或是参数量；training-efficiency指使用更少的资源（或提高资源利用效率）、使用更少的时间来进行训练；inference-efficiency通常也被成为模型推理加速，它针对训练好的模型，尽可能提高模型的推理速度、吞吐量等。本综述中只涉及到model-efficiency，并介绍一些针对Transformer的模型压缩方法。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/613685663">Blog: Efficient Deep Learning 高效深度学习</a></p>
</blockquote>
<h1 id="2-model-efficiency">2. Model Efficiency</h1>
<p>Model efficiency主要侧重于提出新的架构，或者改善现有架构，从而降低模型复杂度或参数量。不同于训练场景只关注于模型的参数量，在推理场景中，模型在访存、计算等方面同样需要高效，2.1节说明了在推理场景中模型所关注的几种不同的efficiency。为了能够量化的来比较模型在推理时的efficiency，2.2节总结了一些评估模型推理性能的指标。</p>
<h2 id="21-kinds-of-efficiency">2.1 Kinds of Efficiency</h2>
<p>模型的高效是一个相对的概念，但是有几个发展方向是确定的，比如高效的模型一般具有一下几个特征：模型中存在较多的计算密集型算子而非访存密集型算子（有助于充分发挥硬件性能），模型计算复杂度尽量低（可以应用于更加广泛的场景），模型参数量尽量少（可以减少存储空间和内存的占用），受限于模型的结构、应用的场景，在应用中需要先对这几个方向进行分析，然后才能够做进一步的分析和优化。</p>
<h3 id="211-memory-efficiency">2.1.1 Memory Efficiency</h3>
<p>访问内存的开销是影响模型推理速度的一个关键因素。Transformer中许多操作，比如频繁的reshape，element-wise相加，归一化等操作，这些操作或算子是访存密集型的，即大部分时间花费在访存上，而计算耗时占比很小，此时模型推理速度主要受到内存带宽限制。减少模型推理过程在访存上的时间开销，就是提高memory efficiency。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/414430541">Blog: 深度学习模型大小与模型推理速度的探讨</a></p>
</blockquote>
<h3 id="212-computation-efficiency">2.1.2. Computation Efficiency</h3>
<p>模型的computation efficiency往往指的是模型的算法复杂度低。特别的，针对Transformer而言，当序列长度序列较小时，此时模型的计算开销主要集中在FFN模块，计算复杂度近似地线性于序列长度。但是在很多使用Transformer的场景中，比如图片、视频等场景中，输入序列长度较大。此时，模型的计算开销会集中于自注意力层，产生相对于序列长度平方的复杂度，限制了Transformer在很多场景中的应用。</p>
<blockquote>
<p><a href="https://0809zheng.github.io/2021/07/12/efficienttransformer.html">Blog: Efficient Transformers</a></p>
<p><a href="https://arxiv.org/pdf/1706.03762.pdf">Paper: Attention is all you need</a> 中FFN与Attention复杂度对比</p>
</blockquote>
<h3 id="213-parameter-efficiency">2.1.3 Parameter Efficiency</h3>
<p>Parameter Efficiency主要指的是模型的轻量化和较少的参数量。使用参数量较少的模型，可以减少模型在磁盘上存储的空间和模型加载后内存的占用。需要注意的是，随着大模型的发展，受限于大模型训练的成本，大模型的微调技术PEFT（Parameter-efficient fine-tuning）发展迅速。PEFT旨在最小化微调参数的数量和计算复杂度，以减少大模型微调的成本，来提高模型在新任务上的性能。这里所说的Parameter Efficiency更加类似于模型轻量化的概念。</p>
<h2 id="22-metrics">2.2 Metrics</h2>
<p>设计神经网络架构的主要考虑因素之一就是效果和成本的权衡。一般情况下，一个模型的参数量越多，计算量越大，模型的容量越大，该模型的效果就越好。但是，不同模型在不同硬件平台上的推理效果往往无法直接比较。因此，在比较模型推理性能时，经常会使用一些指标，从不同角度对模型的推理性能进行比较。</p>
<h3 id="221-计算量">2.2.1 计算量</h3>
<p>计算量是评价模型efficiency最常用的指标，包括很多文献进行对比时，常常会将计算量和参数量作为最重要的比较依据。计算量是模型所需的计算次数，模型的整体计算量等于模型中每个算子的计算量之和。衡量计算量主要有两个指标：</p>
<ul>
<li>
<p>FLOPs（Floating Point Operations，浮点计算次数）：计算量一般用OPs（Operations，计算次数）来表示，由于最常用的格式为float32，因此也常被写作为FLOPs。</p>
</li>
<li>
<p>MACs（Multiply-Accumulate Operations，乘加累计操作数）：1个MACs包括一个乘法操作与一个加法操作，大约相当于2FLOPs。在很多硬件上，Multiply-Accumulate可以使用单独一个指令完成，而且很多对tensor的操作也是Multiply-Accumulate操作。FLOPs通常用于模型的理论上计算量的分析，MACs更加贴近真实的计算量。</p>
<blockquote>
<p><a href="https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation">Multiply–accumulate_operation from wiki</a></p>
</blockquote>
</li>
</ul>
<h3 id="222-参数量">2.2.2 参数量</h3>
<p>参数量是模型中参数的总和，直接反应了模型在磁盘中存储的大小。虽然参数量并不直接影响推理性能，但是参数量一方面会影响内存占用，另一方面会影响程序初始化时间。而且，在某些场景下，参数量是很重要的指标。比如在嵌入式或移动端场景下，磁盘空间极其有限，此时往往会对模型的参数量有比较严格的限制。在这种情况下，除了在设计时减少参数量，还可以通过压缩模型权重的方式进一步降低打包后模型的大小，但是这样会带来解压缩开销，会在一定程度上增加程序初始化的时间。</p>
<h3 id="223-访存量">2.2.3 访存量</h3>
<p>访存量往往是最容易被忽略的指标，但它对推理性能有着极大的影响。访存量是指模型推理时所需访问内存的数据量，反应了模型对存储带宽的要求。访存量有时也称作MAC（Memory Access Cost）或者MOPs（Memory Operations），一般用Bytes（或KM/MB/GB）来表示，即模型需要读取/写入多少Bytes的内存数据。和计算量一样，模型整体访存量等于模型各个算子的访存量之和。</p>
<h3 id="224-运行速度">2.2.4 运行速度</h3>
<p>运行速度是衡量模型efficiency最有效的指标，但是需要基于相同的硬件平台进行对比，而且，即使使用相同的硬件平台，使用不同的软件环境、使用流水线的效率等因素也对最终的推理速度有极大的影响，所以往往在实践中难以直接进行比较。运行速度主要有两种形式进行反应：</p>
<ul>
<li>吞吐量（Throughput）：在单位时间内处理的样本个数，相当于可以并行处理的任务量，充分利用流水线可以极大提高模型推理的吞吐量。</li>
<li>延迟（Latency）：通常指单个样本或单个batch处理完成的时间，相当于串行处理一个任务所需要的时间。相对于吞吐量，流水线无法减少延迟。因此，对于需要实时推理的模型而言，需要考虑延迟而非提高吞吐量。</li>
</ul>
<blockquote>
<p>[Paper: THE EFFICIENCY MISNOMER]</p>
</blockquote>
<p>需要注意的是，使用单个指标对模型进行评估往往会导致不全面的结论，甚至评价指标无法真实地比较模型在硬件上的推理速度。比如在下图中，相较于其他网络，在保持类似精确度的情况下，EfficientNet具有相对较小的计算量（GFLOPs）和参数量（Million Parameters），但是模型的推理速度并没有相对于其他模型很明显的提升，甚至有时其他模型推理速度更快一些。虽然如此，但是固定某些指标进行比较，仍是一个相对公平的方法。而且通过分析模型的推理瓶颈，可以针对性的提升模型的某些指标，从而加速推理。</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:13:15.png" alt="image-20230620112102735" style="zoom:80%;" />
<blockquote>
<p><a href="">Paper: THE EFFICIENCY MISNOMER</a> Figure5</p>
</blockquote>
<h2 id="23-find-the-bottleneck">2.3 Find the Bottleneck</h2>
<p>不同的模型具有不同的特征，即使同一个模型的不同部分也有不同的特征，比如某些部分是计算密集性的，有些部分是访存密集型的，这里选取Bert和GPT-2两个典型的模型进行分析。</p>
<p>为了综合衡量计算密集型与访存密集型，通常使用算数强度（arithmetic intensity，也称计算密度，计算强度，计算访存比等）来表示。算数强度表示从内存加载的每个字节可以进行的浮点运算的数量，反映了程序相对于访存而言计算的密集程度，可以通过计算量FLOPs除以访存量来计算得到。RoofLine模型是基于算数强度，来评估程序在硬件上能达到性能上界的模型，即给定一个硬件资源的限制（算力、内存带宽），模型在该硬件上可以达到的最大计算速度。</p>
<p>当模型的计算密度较小时，访存相对较多，计算相对较少，模型性能主要受到内存带宽限制，此时模型是访存密集型的。反之如果模型的计算密度较大，访存相对较少，计算相对较多，模型性能主要受到硬件算力的限制，此时模型是计算密集型的。一般而言，模型的计算密度越大，越有可能提升硬件的计算效率，充分发挥硬件性能。对于访存密集型算子，推理时间跟访存量呈线性关系，而对于计算密集型算子，推理时间跟计算量呈线性关系。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/411522457">Blog: 深度学习模型大小与模型推理速度的探讨</a></p>
<p>[Paper: Roofline: An Insightful Visual Performance Model for Floating-Point Programs and Multicore Architectures]</p>
</blockquote>
<figure>
    <img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:13:38.png" width=400/>
    <img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:13:50.png" width=400/>
</figure>
<p>BERT是Encoder-only的模型，而GPT-2是Decoder-only的模型，如图a所示，这个区别导致两类模型的计算密度差异很大，而两种不同大小的BERT模型的计算密度差异反而不是很大。究其原因，是由于Decoder模型中，每次都是逐个token输入并解码，导致实际矩阵乘法退化为矩阵与向量的乘法，数据重用有限，使其更容易受到内存带宽的限制。因此，如图b所示，当使用高算力的硬件进行推理性能测试时，以BERT-Base的推理时间为基准，尽管相对于BERT-Base，GPT-2具有更少的计算量，但是由于访存量的激增，导致计算密度变低，最终在实际推理时，推理延时远远慢于BERT-Base。因此，针对模型进行优化时，需要综合不同的指标，分析模型的特点，找到模型的瓶颈，从而进行针对性的优化，才能对最终的推理性能有较大提升。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/619596323">Blog: LLM Inference CookBook</a></p>
<p>[Paper: Full Stack Optimization of Transformer Inference: a Survey] Figure 6 9</p>
</blockquote>
<h1 id="3-efficient-transformer">3. Efficient Transformer</h1>
<p>虽然当前很多SOTA模型都是基于Transformer，而且很多大模型也都是以Transformer为基础，但是由于Transformer相对于输入序列的平方的复杂度，使得在很多需要长序列的场景中，比如处理图片、视频时受到很大的限制，因此很多方法被提出来改善模型的复杂度，比如降低模型的时间复杂度，减少模型的参数量，设计更适合于硬件的模型来减少访存等。本章节从三个不同角度来讨论使得模型在设计上更加高效的方法。</p>
<h2 id="31-efficient-attention">3.1 Efficient Attention</h2>
<p>注意力机制作为Transformer的核心，它使得模型可以捕捉全局信息，进行长距离建模。但是注意力机制最核心的操作是进行矩阵相乘，由于词向量维数一般固定且不是很大，可以认为是常数，因此时间复杂度可以认为是输入序列长度的平方。本节讨论一些方法，侧重于改善注意力机制的时间复杂度，并根据核心思想进行分类和总结。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/263031249">Blog: Transformers大家族——Efficient Transformers: A Survey</a></p>
<p><a href="https://blog.csdn.net/weixin_44808865/article/details/119173304">Blog: 「ArXiv2020」【Efficient Transformers: A Survey】论文笔记（更新中）</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/602394470">Blog: Efficient Transformers: A Survey</a></p>
<p><a href="https://blog.csdn.net/triplemeng/article/details/113821740">Blog: 进击的Transformer &mdash; 一文介绍Efficient Transformers</a></p>
</blockquote>
<ul>
<li>
<p>Fixed Patterns</p>
<p>将注意力机制从全局变为局部，限制注意力机制的范围，从而降低复杂度。根据限制的范围和形式，可以分为blockwise pattern， strided pattern，compressed pattern。</p>
<p>Blockwise pattern将输入序列切成多个block，只在每个block内部进行注意力机制的计算，显著降低了计算复杂度，比如Blockwise Attention、Local Attention等。但是这样简单的切割会导致序列不连贯，缺乏block之间的信息交互，注意力机制能力有限。虽然很简单，但是确实后续很多改进的基础。</p>
<p>Strided pattern采用滑动窗口的形式，每个token与周围相邻的几个token计算注意力，即按固定间隔进行注意力机制的计算。比如，Sparse Transformer使用类似strided形式的滑动窗口，LongFormer使用类似dilated形式的滑动窗口。相较于Blockwise pattern，考虑到自然语言很多情况下都是局部相关性较高，因此在一个窗口范围内计算注意力可能不会丢失太多信息。</p>
<p>Compressed pattern则是先通过卷积、池化等CNN操作进行下采样，从而有效减小序列长度，将输入序列转换到固定的模式，降低计算注意力机制的复杂度。</p>
<blockquote>
<p>Blockwise attn: <a href="https://arxiv.org/abs/1911.02972">Blockwise Self-Attention for Long Document Understanding</a></p>
<p>Local attn: <a href="https://arxiv.org/abs/1802.05751">Image Transformer</a></p>
<p>Sparse Trans: <a href="https://arxiv.org/abs/1904.10509">Generating Long Sequences with Sparse Transformers</a></p>
<p>LongFormer: <a href="https://arxiv.org/abs/2004.05150">Longformer: The Long-Document Transformer</a></p>
</blockquote>
</li>
<li>
<p>Combination of Patterns</p>
<p>对于输入的token，可以在不同维度、不同区域上组合使用不同的注意力机制，从而学习到更好的特征。比如，Sparse Transformer将一半的注意力头使用strided pattern，另一半注意力头使用local pattern。类似的，在Axial Tranformer中不是像多数注意力模块一样先将多维输入展平，而是每次沿着特征图的单个维度计算自注意力，然后组合多个维度的特征图以得到覆盖全局感受野的特征图。</p>
<blockquote>
<p>Axial Trans: <a href="https://arxiv.org/abs/1912.12180">Axial Attention in Multidimensional Transformers</a></p>
</blockquote>
</li>
<li>
<p>Learnable Patterns</p>
<p>Learnable pattern是对fixed pattern的拓展，fixed pattern是提前规定好一些区域，在这些区域中进行注意力，而learnable pattern则是引入可学习参数，让模型自己找到计算注意力的区域，即以数据驱动的方式指导模型的学习过程。比如Reformer引入基于哈希的相似度度量方法来将输入进行切割，Routing Transformer对token向量进行k-means聚类，从而将整体序列分割为多个子序列。因此，从最后注意力计算的角度看，Learnable pattern与fixed pattern是一致的，都是通过将整体序列进行切分，只在子序列中计算注意力，不同的只是子序列的划分方式是提前确定的还是模型学习得到的。</p>
<blockquote>
<p>Reformer: <a href="https://arxiv.org/abs/2001.04451">Reformer: The Efficient Transformer</a></p>
<p>Routing Trans: <a href="https://arxiv.org/abs/2003.05997">Efficient Content-Based Sparse Attention with Routing Transformers</a></p>
</blockquote>
</li>
<li>
<p>Neural Memory</p>
<p>Neural memory类似于compressed pattern中先压缩再计算注意力的想法，Set Transformer中第一次使用了这种方法。具体而言，就是初始化k个untrainable向量（k&laquo;n），n个token embedding和这k个trainable向量计算注意力，压缩得到k个向量，然后k个向量再和n个向量计算注意力还原得到n个向量，达到抽取输入序列特征的目的。这k个untrainable向量就可以理解为memory，用于处理临时上下文信息。</p>
<blockquote>
<p>Set Trans: <a href="https://arxiv.org/abs/1810.00825">Set Transformer: A Framework for Attention-based Permutation-Invariant Neural Networks</a></p>
</blockquote>
</li>
<li>
<p>Low-Rank</p>
<p>Low-rank通过矩阵压缩或矩阵近似来降低计算注意力的复杂度。假设$N$是序列长度，$d$是向量维度，$k$是矩阵压缩的超参数。在Linformer中观察到，经过softmax计算之后得到的$N \times N$的attention score矩阵是不满秩的，这意味着不需要一个完整的attention score矩阵，可以使用一个$N \times k$的矩阵来近似$N \times N$的attention score矩阵，同时需要将$N \times d$的key和value向量映射到$k \times d$维空间，由于$k$是固定的超参数，因此将注意力机制的复杂度降低到了线性级别。</p>
<blockquote>
<p>Linformer: <a href="https://arxiv.org/abs/2006.04768">Linformer: Self-Attention with Linear Complexity</a></p>
</blockquote>
</li>
<li>
<p>Kernels</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/157490738">Blog: 线性Attention的探索：Attention必须有个Softmax吗？</a></p>
<p>Linear Trans: <a href="https://arxiv.org/abs/2006.16236">Transformers are RNNs: Fast Autoregressive Transformers with Linear Attention</a></p>
</blockquote>
<p>之前的一些研究中提到制约注意力机制性能的关键因素是其中的softmax操作，Scaled-Dot Attention其实就是对value做加权平均，未来得到attention score，就必须先对query和key进行运算。但是，以核函数变换的形式可以得到一个更加通用的注意力机制的数学表达，通过将相似性度量拆分，可以实现注意力机制线性的复杂度（原来的相似度计算中，指数操作的存在使得query，key，value的矩阵操作无法使用结合律）。由于通过kernel方法计算得到的是注意力矩阵的一种近似形式，因此核方法也可以认为是一种特殊的low-rank方法。</p>
</li>
<li>
<p>Recurrence</p>
<p>Recurrence实际上也是fixed pattern中blockwise的一种延申，本质上仍是对输入序列进行区域划分， 只是它进一步对划分后的block做了一层训练连接，通过这样的层级关系就可以把一个长序列的输出得到更好的表征。Transformer-XL使用segment-level recurrence，将上一个segment的状态缓存下来，然后再计算当前segment的时候重复使用上一个的隐藏状态，虽然加快了推理速度，但是由于需要进行缓存，是一种空间换时间的方案。</p>
<blockquote>
<p>Transformer-XL: <a href="https://arxiv.org/abs/1901.02860">Transformer-XL: Attentive Language Models Beyond a Fixed-Length Context</a></p>
</blockquote>
</li>
</ul>
<h2 id="32-efficient-architecture-design">3.2 Efficient Architecture Design</h2>
<p>除了改善Transformer中注意力机制的复杂度，修改Transformer中其他部分可能同样有效。实际上，比如针对Bert-Base而言，从参数量的角度看，模型总的参数量约为104MB，其中多头注意力机制部分的参数量大约为27MB；从计算量和访存量的角度看，即使针对较长的序列而言，多头注意力机制部分也只是占了整个模型计算量/访存量的一半左右。因此，设计更加高效的网络架构，同样可以提高模型运行时的性能。同样，本节根据不同模型架构的设计思路和特点进行分类总结。</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_28385535/article/details/127213648">Blog: Hydra Attention: Efficient Attention with Many Heads翻译</a></p>
<p><a href="https://blog.csdn.net/huangblog/article/details/119639001">Blog: 一文懂“NLP Bert-base” 模型参数量计算</a></p>
<p>[Paper: Full Stack Optimization of Transformer Inference: a Survey] Table 3</p>
</blockquote>
<ul>
<li>
<p>增加感受野</p>
<p>通过增加感受野，模型可以处理更加高分辨率的图像，但同时需要尽量降低额外带来的计算量。Efficient-ViT使用MobileNetV2中的MBConv作为基本块，使用线性注意力机制替代传统注意力机制，并且在前馈神经网络中使用可变形卷积。EdgeNeXt与之相似，它使用分裂的深度转置注意力模块（Split Depth-wise Transpose Attention， SDTA）来替代传统的多头注意力机制，SDTA将输入通道分成多个通道组，利用深度可分离卷积和跨通道的自注意力来有效增加模型的感受野。</p>
<blockquote>
<p>[Paper: EfficientViT: Lightweight Multi-Scale Attention for On-Device Semantic Segmentation]</p>
<p>[Paper: EdgeNeXt: Efficiently Amalgamated CNN-Transformer Architecture for Mobile Vision Applications]</p>
<p>[Paper: MobileNetV2: Inverted Residuals and Linear Bottlenecks]</p>
</blockquote>
</li>
<li>
<p>使用池化层</p>
<p>通常在注意力机制之后使用池化层，来减少推理延迟。NextViT交替使用卷积块和注意力块，其中卷积块由多头卷积注意力和MLP构成，卷积块主要使用了多头自注意力机制，但是注意力机制中key和value都先经过了一个池化层。PoolFormer总结了一种成为MetaFormer的通用架构，通过使用不同的Token-Mixer可以获得不同的具体架构，当Token-Mixer被修改为一个简单的池化层时，PoolFormer以极少的参数同样获得了与其他模型相似的准确度。</p>
<blockquote>
<p>[Paper: Next-ViT: Next Generation Vision Transformer for Efficient Deployment in Realistic Industrial Scenarios]</p>
<p>[Paper: MetaFormer Is Actually What You Need for Vision]</p>
</blockquote>
</li>
<li>
<p>使用局部特征</p>
<p>LeViT再次将充分使用CNN的局部特征，尤其是首先通过卷积来得到低分辨率的特征图，然后通过修改注意力模块进行特征图的下采样。MobileViT网络主要使用MobileViT块和MBConv块堆叠而成，其中MobileViT块负责进行全局信息与局部信息的交互，其中将特征图通过卷积层进行局部建模得到局部信息，然后将局部信息的特征图基于注意力机制进行全局建模，最后进行残差连接。</p>
<blockquote>
<p>[Paper: LeViT: a Vision Transformer in ConvNet’s Clothing for Faster Inference]</p>
<p>[Paper: MobileViT: Light-Weight, General-Purpose, and Mobile-Friendly Vision Transformer]</p>
</blockquote>
</li>
<li>
<p>保持维度一致性</p>
<p>相对于多头注意力机制角度的计算量对于推理延迟的影响，特征维度一致性对推理延迟同样甚至有更大的影响，比如网络中存在大量低效的reshape操作，反复调整特征的维度，会极大影响推理的速度。EfficientFormer提出了一种维度一致性的设计，将网络分成一个特征图为四维的部分和一个特征图为三维的部分，网络从patch embedding开始，首先进入四维特征图部分，最后进入三维特征图部分。在四维特征图部分，主要通过卷积结构为主；在三维特征图部分，此时网络结构中加入注意力机制和MLP结构。最终四维和三维分区的长度是通过网络架构搜索得到的。</p>
<blockquote>
<p>[Paper: EfficientFormer: Vision Transformers at MobileNet Speed]</p>
</blockquote>
</li>
<li>
<p>并行网络</p>
<p>一些模型可以并行的执行特定的层，从而加快推理速度。比如Mobile-Former的两个并行分支分别提取局部和全局信息，通过双向桥接进行信息的双向融合。MixFormer基于并行分支设计，将局部自注意力和通道分离卷积两个分支进行交互，并且根据不同分支上操作共享参数的维度不同，使用双向交互模块融合不同维度的信息，针对每个分支提供互补的信息来进一步学习到更好的特征。</p>
<blockquote>
<p>[Paper: Mobile-Former: Bridging MobileNet and Transformer]</p>
<p>[Paper: MixFormer: Mixing Features across Windows and Dimensions]</p>
</blockquote>
</li>
</ul>
<h2 id="33-efficient-efforts">3.3 Efficient Efforts</h2>
<p>除了针对注意力机制和Transformer的架构进行改进，通用的模型压缩同样可以提高Transformer的推理性能，同时保持模型精度或将模型精度的下降控制在一个合理范围内。模型压缩主要包括剪枝、蒸馏、量化等。其中，剪枝和蒸馏可以减少模型参数量，量化可以提高模型的访存效率，而且不同的方法可以是正交的，即可以先进行模型的剪枝，再进行模型的量化。许多研究提出了不同的方法来进行Transformer模型的压缩，本节简单进行介绍。由于在自然语言处理领域和计算机视觉领域中，模型压缩的方法可能略有不同，本节更加侧重于视觉方面的模型压缩方法。</p>
<p>此外，由于Transformer的广泛应用，为了提高模型的推理性能，在设计模型架构时有时需要将硬件也纳入考虑，比如考虑到硬件限制的网络架构搜索，软硬件协同设计等，虽然本综述不涉及硬件的描述，但是本节最后介绍一种针对GPU的新型注意力机制FlashAttention，通过优化注意力机制算法的访存过程，来显著提高模型的运行速度、降低所需内存，同时保持对结果不变和对用户的透明。</p>
<h3 id="331-pruning">3.3.1 Pruning</h3>
<p>剪枝方法基于lottery ticket假设，即模型中只有小部分参数起到了核心作用，其他的大部分参数都是无效参数或是不重要的参数，可以去除掉，在减小模型参数量的同时，保持模型原有的精度。剪枝可以分为结构化剪枝与非结构化剪枝。非结构化剪枝允许修建任何参数，定位参数中接近于0的参数，将这些参数归零，使得权重矩阵稀疏化。虽然非结构化剪枝可以极大减少模型参数，但是由于硬件的限制，很多场景中无法完全发挥非结构化剪枝的效果。结构化剪枝是粒度较大的剪枝，修剪模型中结构化的部分，比如权重的整行，多头注意力中不需要的注意力头，多层Transformer中不需要的若干层等。由于存在一定限制，结构化剪枝的模型压缩率较小，但是更加适合于硬件运行。</p>
<p>考虑到Transformer中大部分的计算量是在多头注意力（MSA）和前馈神经网络（FFN）部分，为了简Transformer的结构，Vision Transformer Pruning（VTP）是第一个专门用于Vision Tranormer的剪枝方法。VTP首先使用L1稀疏正则化进行训练，VTP获取每一个Transformer block中Dimension的重要性分数，然后对分数较低的Dimension进行裁剪，这样大量的不重要的Dimension将会被裁剪，最后进行微调。不同于VTP主要关注于通道维度的冗余，PS-ViT方法关注于patch层面的冗余，通过计算patch对于最终分类特征的重要性得分来判断每个patch的有效性，同时保证信息一致性，显著降低了计算量并保持了原始模型的精度。NViT在剪枝时将模型的推理时间纳入考虑，通过重分配使用的参数，进行全局结构性剪枝。后续模型分别针对剪枝范围和粒度、剪枝方法、剪枝过程等做出改进，进一步提高模型的推理性能。</p>
<blockquote>
<p>[Paper: THE LOTTERY TICKET HYPOTHESIS: FINDING SPARSE, TRAINABLE NEURAL NETWORKS]</p>
<p>[Paper: Vision Transformer Pruning]</p>
<p>[Paper: Vision Transformer with Progressive Sampling]</p>
<p>[Paper: NViT: Vision Transformer Compression and Parameter Redistribution]</p>
</blockquote>
<h3 id="332-distillation">3.3.2 Distillation</h3>
<p>蒸馏是指用教师模型来指导学生模型训练，通过蒸馏的方式让学生模型学习到教师模型的知识。在模型压缩中，教师模型是一个提前训练好的复杂模型，而学生模型则是一个规模较小的模型。由训练好的教师模型，在相同的数据下，通过将教师网络对该样本的预测值作为学生模型的预测目标指导学生模型学习。通过教师模型的指导，让学生模型学习教师模型的泛化能力，以达到或媲美教师模型的准确度。</p>
<p>在计算机视觉领域，DeiT在ViT的基础上，提出了一种专门针对Transformer的蒸馏方法，将distillation token与原始的class token同时加入网络，同时对损失函数进行相应的变化，显著减小了模型训练时间和训练所需的数据量。Mainfold Distiallation方法考虑了视觉Transformer的特点，在模型中间层引入了patch层级的细粒度监督信号，它是一种基于内积计算特征空间的流形结构表示，通过约束学生模型与教师模型的特征空间具有相似的流形结构，可以更好的将教师模型的知识迁移到学生模型中。TaT中进一步考虑到，由于教师模型和学生模型在结构上的异构型，直接对比像素级别的特征图可能导致不对齐的问题，因此使用注意力机制来隐式对齐语义，并提出一种近似的方法来改善方法的复杂度。</p>
<blockquote>
<p>[Training data-efficient image transformers &amp; distillation through attention]</p>
<p>[Learning Efficient Vision Transformers via Fine-Grained Manifold Distillation]</p>
<p>[Knowledge Distillation via the Target-aware Transformer]</p>
</blockquote>
<h3 id="333-quantization">3.3.3 Quantization</h3>
<p>量化的基本思想即使用低精度、低比特的数据类型来代替原本的浮点数据类型，可以量化参数权重，也可以量化激活值，不但显著减小了模型的体积，更为重要的意义是优化了模型在运行时的访存，相较于单个指令的计算，访存耗时要远高于计算，因此可以显著加速模型推理。量化最核心的挑战在于使用更低精度的权重的同时保持模型精度尽可能少的降低。量化主要分为两大类，训练后量化（Post-Training Quantization，PTQ）和量化感知训练（Quantization-Aware Training，QAT）。训练后量化是将训练好的模型中的参数或激活值量化为低精度类型的数值类型，虽然使用简单，但是模型精度精度下降一般要高于量化感知训练。量化感知训练在训练过程中模拟量化过程，进而在更新参数时考虑量化产生的误差，虽然量化感知训练得到的量化模型精度下降较低，但是因为需要重新训练，所以开销较大，在实际使用中需要进行权衡使用。</p>
<p>虽然在卷积神经网络中可以相对简单的使用量化，但是将量化应用于Transformer存在一些挑战。Transformer激活值范围较大，很难使用低精度数据类型表示。传统的卷积神经网络会将异常的离群值截断，但是在Transformer中，这样的离群值有助于深层网络中形成特定的注意力模式，直接截断会改变网络的特性和精度，如果不截断会导致数值分辨率降低，而且注意力机制中存在一些难以量化的算子，进一步导致Transformer模型难以量化。PTQ4ViT提出了使用孪生均匀量化方法来解决激活值范围大的问题，同时为了获得最优的量化参数（而非局部最优），使用Hessian引导度量来评估不同的标定因子，从而以较小的成本提高校准准确率，最终达到了近乎无损的量化效果。针对部分算子难以量化的问题，FQ-ViT中使用Power-of-Two Factor（PTF）来量化LayerNorm，使用Log-Int-Softmax（LIS）来量化softmax，并使用4位量化和BitShift来进行简化，这也是第一个实现Transformer无损全量化的工作。</p>
<blockquote>
<p>[Understanding and Overcoming the Challenges of Efficient Transformer Quantization]</p>
<p>[PTQ4ViT: Post-Training Quantization Framework for Vision Transformers with Twin Uniform Quantization]</p>
<p>[FQ-ViT: Post-Training Quantization for Fully Quantized Vision Transformer]</p>
</blockquote>
<h3 id="334-flashattention">3.3.4 FlashAttention</h3>
<p>FlashAttention是一种对标准注意力机制进行加速的算法，减少了对HBM（High Bandwidth Memory，通常用于GPU显存）的访问，而且它的训练和推理过程的结果和标准注意力机制完全相同，对用户透明，并且显著减小了标准注意力机制的运行时间和所需内存。</p>
<p>FlashAttention主要从两个方面减少注意力机制的HBM的访问。首先在计算softmax时，FlashAttention可以在不访问整个输入的情况下计算softmax reduction，将输入分割成块，在输入块上多次传递，从而以增量的方式计算softmax reduction。其次，在传统注意力机制中，需要将$QK^T$的计算结果$S$和$softmax(S)$后的计算结果$P$分别存储到显存中，FlashAttention对此做出改进，在反向传播中不存储中间注意力矩阵，避免从显存中读取和写入中间结果矩阵。通过分块写入到HBM中去，存储前向传递的 softmax 归一化因子，在后向传播中快速重新计算片上注意力，这比从HBM中读取中间注意力矩阵的标准方法更快。即使由于重新计算导致 FLOPS 增加，但因为减少了HBM访问，导致运行速度更快并且使用更少的显存（序列长度线性）。</p>
<p>此外，最新的研究SCFA进一步进行拓展，使得FlashAttention可以计算稀疏注意力，特别是针对Hash-based Attention和Query/Key-Dropping Based Attention，都得到了显著的推理加速。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/618533434">Blog: 论文分享：新型注意力算法FlashAttention</a></p>
<p>[Paper: FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness]</p>
<p>[Paper: Faster Causal Attention Over Large Sequences Through Sparse Flash Attention]</p>
</blockquote>
<h1 id="4-discussion-on-future-research">4. Discussion on Future Research</h1>
<p>Transformer虽然有很强的建模能力，但是由于其中注意力机制具有序列长度平方的复杂度，限制了Transformer在很多场景中的使用。在未来的工作中，仍然可能会有很多工作对efficient attention、efficient transformer、模型压缩的不同方面进行改进。除此之外，本文观察到另外两个方向未来可能有进一步的发展。</p>
<h2 id="41-early-exit">4.1 Early Exit</h2>
<p>虽然当前很多研究关注于大模型在大量数据上的有效训练，但是经过训练的模型在实际使用中仍然速度较慢，特别是大模型作为基础设施时，越来越多的关注集中于提高模型的推理速度上。从模型来分析，很多大语言模型都是自回归模型，需要根据前面的单词递推的预测下一个单词，这个过程不能并行化，而且考虑到大模型庞大的参数量，整个推理过程需要大量的计算与较高的延迟。</p>
<p>在推理时，有些单词的预测比较轻松，可能在比较浅层的网络中就可以预测出正确的结果，不用计算到最后一层就可以正确预测，即提前退出（early exit），有的单词就需要较多的计算才能预测，但是很多模型在推理时针对这两种情况使用了相同的计算量。有一些工作已经初步在这方面进行了尝试，比如CALM，不是等待所有解码器层完成，而是尝试在某个中间层之后更早地预测下一个单词。 为了决定是进行某个预测还是将预测推迟到后面的层，测量模型对其中间预测的置信度。 只有当模型有足够的信心预测不会改变时，才会跳过其余的计算。</p>
<blockquote>
<p>[Paper: Confident Adaptive Language Modeling]</p>
<p><a href="https://blog.csdn.net/c9Yv2cf9I06K2A9E/article/details/120340325">Blog: 基于动态提前退出的预训练模型推理加速简介</a></p>
</blockquote>
<h2 id="42-alternatives-to-attention">4.2 Alternatives to Attention</h2>
<p>虽然注意力机制对于Transformer而言至关重要，但是由于其较高的复杂度，一些研究开始寻找注意力机制的替代而非单纯改进注意力机制。在AFT模型中，同样有类似于标准的点积注意力算法，同样由查询向量Q，被查向量K，内容向量V相互作用而成。但不同的是，AFT中的K和V首先与一组学习得到的位置偏差（position bias）结合，然后再进行同位元素对应相乘（element-wise multiplication）。这一新操作的内存复杂度、文本规模、特征维度都是线性的。当前一个较新的尝试是Hyena。Hyena将时域卷积和频域卷积作为一个组合，通过递归进行多次来增大表达能力，其全局卷积网络达到了超越Transformer建模的效果。</p>
<blockquote>
<p>[Paper: An Attention Free Transformer]</p>
<p>[Paper: Hyena Hierarchy: Towards Larger Convolutional Language Models]</p>
</blockquote>
<h1 id="5-conclusion">5. Conclusion</h1>
<p>在本综述中，从推理的角度出发，对efficient transformer进行了粗粒度的调研、分析与总结，并且相对侧重于计算机视觉方面的研究。首先介绍模型不同角度的efficiency和评价efficiency的量化指标。然后从模型算法的角度，从不同层次分析了当前提高模型效率的方法，比如设计复杂度更低的注意力机制，更加高效的网络设计，模型压缩和优化等方法，并针对每种方法进一步做了分类和总结，选取代表性的方法进行具体说明。最后，简单讨论了一些efficient transformer未来可能的发展方向，比如早退机制、注意力机制的替代品等。</p>
<h1 id="6-more-reading">6. More Reading</h1>
<p><a href="https://lilianweng.github.io/posts/2023-01-10-inference-optimization/#sparse-attention-patterns">Large Transformer Model Inference Optimization</a></p>
<p><a href="https://lilianweng.github.io/posts/2023-01-27-the-transformer-family-v2/#low-rank-attention">The Transformer Family Version 2.0</a></p>
<p><a href="https://medium.com/data-science-at-microsoft/efficient-transformers-survey-of-recent-work-75022cddc86a">Efficient transformers: Survey of recent work</a></p>
<p><a href="https://blog.csdn.net/nature553863/article/details/120292394">Bert/Transformer模型压缩与优化加速</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Tmux简单使用</title>
      <link>https://qinganzhang.github.io/posts/tmux%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 04 Mar 2024 20:36:37 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/tmux%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</guid>
      <description>1. tmux简单介绍 xshell等工具SSH远程登录服务器时，终端窗口（显示界面）和会话（用户与服务器的交互命令）是绑定的，关闭窗口会话也随之</description>
      <content:encoded><![CDATA[<h1 id="1-tmux简单介绍">1. tmux简单介绍</h1>
<p>xshell等工具SSH远程登录服务器时，终端窗口（显示界面）和会话（用户与服务器的交互命令）是绑定的，关闭窗口会话也随之结束。tmux可以将窗口和会话分离，关闭窗口后，会话不终止，下次重新打开窗口可以继续绑定上次的会话。</p>
<p>界面说明：</p>
<p>左下角，方括号中为会话编号或名称，后面是窗口编号和名字，星号<code>*</code>表示当前所处窗口</p>
<h1 id="2-常用命令">2. 常用命令</h1>
<h2 id="21-会话管理">2.1 会话管理</h2>
<ol>
<li>
<p>新建会话</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tmux # 会话编号自动从0开始
</span></span><span class="line"><span class="cl">tmux new -s &lt;session-name&gt; # 自定义会话名称
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将会话与窗口分离：<code>Ctrl+b d</code>或者<code>tmux detach</code></p>
</li>
<li>
<p>查看会话：<code>tmux ls</code></p>
</li>
<li>
<p>接入会话： <code>tmux attach -t &lt;session-name&gt;/&lt;session-id&gt;</code></p>
</li>
<li>
<p>杀死会话：<code>tmux kill-session -t &lt;session-name&gt;/&lt;session-id&gt;</code></p>
</li>
<li>
<p>退出会话：<code>Ctrl+b d</code></p>
</li>
<li>
<p>切换会话：<code>tmux switch -t &lt;session-name&gt;/&lt;session-id&gt;</code>或者<code>Ctrl+b s</code></p>
</li>
<li>
<p>重命名会话：<code>tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</code>或者<code>Ctrl+b $</code></p>
</li>
</ol>
<h2 id="22-窗口window管理">2.2 窗口（window）管理</h2>
<ol>
<li>新建窗口：<code>tmux new-window -n &lt;window-name&gt;</code>或者<code>Ctrl+b c</code></li>
<li>切换窗口：
<ul>
<li><code>tmux select-window -t &lt;window-name&gt;/&lt;window-id&gt;</code></li>
<li><code>Ctrl+b p/n</code>切换上一个/下一个窗口</li>
<li><code>Ctrl+b l</code>：在两个窗口之间来回切换。</li>
<li><code>Ctrl+b &lt;window-id&gt;</code>切换指定窗口</li>
<li><code>Ctrl+b w</code>从列表中选择窗口</li>
</ul>
</li>
<li>当前重命名窗口：<code>tmux rename-window &lt;new-name&gt;</code>或者<code>Ctrl+b ,</code></li>
<li>关闭当前窗口：<code>Ctrl+b &amp;</code></li>
</ol>
<h2 id="23-窗格pane管理">2.3 窗格（pane）管理</h2>
<ol>
<li>
<p>划分窗格：</p>
<p>左右划分<code>Ctrl+b %</code> 	上下划分<code>Ctrl+b &quot; </code></p>
</li>
<li>
<p>切换选中窗格：</p>
<p><code>Ctrl+b &lt;方向键&gt; </code></p>
<p>切换到下一个窗格<code>Ctrl+b o</code>	切换到上一个窗格<code>Ctrl+b ;</code></p>
</li>
<li>
<p>交换窗格：</p>
<p>与上一个窗格交换位置<code>Ctrl+b {</code>	与下一个窗格交换位置<code>Ctrl+b }</code></p>
</li>
<li>
<p>关闭窗格：</p>
<p><code>Ctrl+b x</code></p>
</li>
<li>
<p>调整窗格：</p>
<p><code>Ctrl+b Ctrl+&lt;方向键&gt;</code>：按方向调整窗格大小</p>
<p><code>Ctrl+b z</code>：当前窗格全屏显示（临时），再用一次复原</p>
<p><code>Ctrl+b !</code>：将当前窗格拆分为独立的窗口</p>
</li>
<li>
<p>其他：</p>
<p><code>Ctrl+b q</code>：显示窗格编号</p>
<p><code>Ctrl+b [</code>：进入翻屏模式，实现上下翻页</p>
</li>
</ol>
<h2 id="24-其他">2.4 其他</h2>
<ol>
<li><code>Ctrl+b ?</code>：帮助命令</li>
<li><code>tmux list-keys</code>列出所有快捷键和对应的tmux命令</li>
</ol>
<h1 id="3-参考资料">3. 参考资料</h1>
<p><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程-阮一峰</a></p>
<p><a href="https://www.51cto.com/article/664989.html">Linux 终端复用神器 Tmux 使用详解，看完可以回家躺平了～</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>量化基础</title>
      <link>https://qinganzhang.github.io/posts/%E9%87%8F%E5%8C%96%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 04 Mar 2024 20:31:46 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/%E9%87%8F%E5%8C%96%E5%9F%BA%E7%A1%80/</guid>
      <description>1. 背景 从速度看 访存耗时远多于计算 浮点数计算耗时和整型计算耗时差不多？（from 张志），但是浮点数计算单元需要占用更多额外的芯片面积 从ener</description>
      <content:encoded><![CDATA[<h2 id="1-背景">1. 背景</h2>
<ul>
<li>从速度看
<ul>
<li>访存耗时远多于计算</li>
<li>浮点数计算耗时和整型计算耗时差不多？（from 张志），但是浮点数计算单元需要占用更多额外的芯片面积</li>
</ul>
</li>
<li>从energy看
<ul>
<li>访存消耗energy远多于计算（200倍）</li>
<li>浮点数运算消耗energy多于int8类型（十几倍），因此量化有助于keep efficient</li>
</ul>
</li>
</ul>
<h2 id="2-数值类型浮点数">2. 数值类型（浮点数）</h2>
<ul>
<li>FP32：1+8+23</li>
<li>FP16：1+5+10，通常使用在混合精度训练中</li>
<li>BF16：1+8+7，直接将FP32进行截断，方便直接进行转换</li>
<li>TF32：1+8+19，保留了FP32的范围（8位范围）与FP16的精度（10位精度），用于TensorCore中</li>
<li>FP24：</li>
</ul>
<h2 id="3-量化基础">3. 量化基础</h2>
<ul>
<li>
<p>K-Means-based Quantization</p>
<ul>
<li>原理：权重进行kmeans聚类（每个类别cluster视为一个模式），每个cluster对应一个浮点数，构成一个codebook（lookup table），权重矩阵中保存的是codebook中的索引
<ul>
<li><span id="kmeans">微调过程</span>：给定权重矩阵对应的梯度矩阵，将梯度矩阵按照模式进行分组（对应不同的cluster），每组梯度进行求和，再更新codebook中对应cluster的浮点数</li>
</ul>
</li>
<li>效果：
<ul>
<li>从pruning ratio看：剪枝+量化同时使用，可以获得更小的pruning ratio（量化后再微调一下，有助于恢复精度）</li>
<li>从准确率看：剪枝+量化准确率与只进行量化差不多</li>
</ul>
</li>
<li>优化：霍夫曼编码
<ul>
<li>将更频繁的权重使用更短的编码表示（但是这样会导致权重矩阵中各个元素大小不一❓）</li>
</ul>
</li>
<li>特点：量化后存储的是低比特，但是计算仍然是浮点数（只是节省了存储，但是访存翻倍❓）</li>
</ul>
</li>
<li>
<p>Linear Quantization</p>
<ul>
<li>
<p>原理：直接进行映射，相当于线性的codebook，权重矩阵中存储的是量化值，运算时先反量化到浮点数范围、再使用不同的量化参数量化到int8
$$
量化：&amp;uint &amp;=&amp; round( \frac{float}{scale} + offset) \
反量化：&amp;float &amp;=&amp; (uint - offset) * scale
$$</p>
</li>
<li>
<p>tricks：</p>
<ul>
<li>
<p>公式中的很多部分可以pre-compute</p>
</li>
<li>
<p>scale的浮点乘法可以转换为定点小数的位移</p>
<blockquote>
<p>详见<a href="https://arxiv.org/pdf/1712.05877.pdf">Quantization and Training of Neural Networks for Efficient Integer-Arithmetic-Only Inference</a> 第2.2章</p>
<p><a href="https://zhuanlan.zhihu.com/p/149659607">神经网络量化入门&ndash;基本原理</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/413864742">量化推理是如何把scale转换为定点运算的</a></p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>分类</p>
<ul>
<li>对称量化</li>
<li>非对称量化（由于补码负数比正数多一个，因此区分两种模式，构造成左右对称的形式，不同框架可能使用不同的mode）
<ul>
<li>full range mode：正数128加进来</li>
<li>restricted range mode：负数-128去掉</li>
</ul>
</li>
</ul>
</li>
<li>
<p>特点：量化后存储的是int8，计算中也是int8</p>
</li>
</ul>
</li>
</ul>
<h2 id="4-量化种类">4. 量化种类</h2>
<h3 id="41-post-training-quantizationptq">4.1 Post-Training Quantization(PTQ)</h3>
<ul>
<li>
<p>权重量化Weight Quantization：减小模型大小</p>
<ul>
<li>
<p>Per-tensor vs Per-channel</p>
</li>
<li>
<p>Weight Equalization</p>
<ul>
<li>
<p>背景：</p>
<ul>
<li>Per-tensor量化简单，但是由于channel之间range差异较大，导致效果很差</li>
<li>Per-channel量化效果较好，但是需要特殊硬件支持❓</li>
<li>目标：make weight ranges similar (or equalize the weight range), so that per-tensor quantization can be applied（既想要per-tensor的简单，又想要per-channel的效果）</li>
</ul>
</li>
<li>
<p>原理：positive scaling equivariance伸缩等价性</p>
<p>对于conv、fc和relu，满足：</p>
<p>$$f(s x) = s f(x), where \quad s \gt 0 $$</p>
</li>
<li>
<p>方法：对于连续的两个卷积层，第一个卷积层乘上一个scale，第二个卷积核对应通道除以一个scale，这样与原来是等价的，但是调整了第一个卷积核的range；然后逐渐连续地调整</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/393556057">后量化训练-Data free quantization</a></p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Adaptive Rounding</p>
<ul>
<li>
<p>背景：</p>
<ul>
<li>
<p>看似符合直觉的round-to-nearest其实精度并不是最优的</p>
<blockquote>
<p>因为并非每个单独的weight的量化损失越小越好，weight之间存在相互影响</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>方法：Adaptive地决定weight量化时将浮点数转到最近右定点还是最近左定点❓</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/363941822">AdaRound解读</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>激活值量化Activation Quantization：减小内存占用</p>
<p>目标：由于激活值无法提前确定，因此要找到激活值的$r_{min}, r_{max}$</p>
<ul>
<li>
<p>During Training</p>
<ul>
<li>
<p>EMA</p>
<p>在训练时使用exponential moving averages (EMA)来得到$r_{min}, r_{max}$
$$
&amp;\hat{r} ^ {(t)} _ {max, min} = \alpha r ^ {(t)} _ {max, min} + (1 - \alpha) \hat{r} ^ {(t-1)} _ {max, min} \
&amp;其中  \hat{r} ^ {(t)} _ {max, min} 是EMA激活值范围， \
&amp;r ^ {(t)} _ {max, min} 是 epoch=t时的激活值范围
$$</p>
<blockquote>
<p><a href="https://arxiv.org/abs/1712.05877">Quantization and Training of Neural Networks for Efficient Integer-Arithmetic-Only Inference</a> 3.1段</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>Use calibration after training</p>
<ul>
<li>
<p>统计calibration中每个sample的$r_{min}, r_{max}$，然后取平均</p>
</li>
<li>
<p>ACIQ</p>
<ul>
<li>
<p>基本思想：最小化激活值X与量化值Q（X）的MSE，具体假设原始激活值的分布，展开求导
$$
\mathop{min}\limits_{|r|_{max}} \mathbb{E} \left[ (X - Q(X))^2 \right]
$$</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/138569083">CNN后量化方法：ACIQ</a></p>
<p><a href="https://arxiv.org/pdf/1810.05723.pdf">Post training 4-bit quantization of convolutional networks for rapid-deployment</a></p>
</blockquote>
</li>
<li>
<p>缺点：需要假设原始的激活值浮点分布（因为需要密度函数）</p>
</li>
</ul>
</li>
<li>
<p>KL-divergence based</p>
<ul>
<li>
<p>基本思想：使用KL散度来衡量量化的信息损失（原始激活值的分布与量化后的分布）</p>
<blockquote>
<p><a href="https://blog.csdn.net/Nichlson/article/details/121085747">TensorRT INT8量化原理与实现（非常详细）</a> 第七部分</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>偏置量化Bias Quantization</p>
<ul>
<li>
<p>背景：权重量化之后，权重分布会产生一个shift。一方面希望量化误差尽量小，另一方面希望量化误差的期望为0（但并非如此）</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/393556057">后训练量化——Data free quantization</a> 中<strong>Bias Correction</strong>，可以看到蓝色的量化误差明显左偏</p>
</blockquote>
</li>
<li>
<p>方法：</p>
<ul>
<li>如果当前有数据：全精度和量化模型分别跑一遍，bias减去这个量化误差，注意对于每一个卷积层或全连接层都要跑一遍</li>
<li>如果当前没有数据：</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="42-quantization-aware-trainingqat">4.2 Quantization Aware Training(QAT)</h3>
<ul>
<li>
<p><a href="#kmeans">K-means-based Quantization 微调</a></p>
</li>
<li>
<p>STE方法：</p>
<ul>
<li>
<p>想法：权重信息经过伪量化操作，来模拟产生量化误差，反向传播的梯度信息跳过伪量化节点直接更新原始权重，相当于更新权重信息考虑到了量化误差、梯度下降进行优化</p>
</li>
<li>
<p>过程：</p>
<ul>
<li>
<p>拿到训练好的模型</p>
</li>
<li>
<p>在权重、激活值、输入输出等（对应权重量化与激活值量化）前面插入伪量化节点（将浮点权重量化再反量化，模拟推理时的量化）</p>
<blockquote>
<p>一开始伪量化节点中量化参数是怎么来的？</p>
<p>在微调的forward过程中，顺便计算出量化参数：</p>
<ul>
<li>如果是针对权重的量化：直接统计权重中的最小值、最大值，从而计算量化参数</li>
<li>如果是针对激活值的量化：使用指数移动平均EMA来更新量化参数</li>
</ul>
</blockquote>
</li>
<li>
<p>前向推理，模拟量化的过程</p>
</li>
<li>
<p>反向传播：正常更新权重（权重是浮点类型），相当于梯度信息跳过了伪量化节点</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/158776813">神经网络量化入门&ndash;量化感知训练</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/548174416">量化感知训练（Quantization-aware-training）探索-从原理到实践</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/467841404">再读《神经网络量化白皮书》- 0x04 训练时量化(QAT)</a></p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>LSQ方法：在反向传播时可以更新量化参数</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/396001177">量化训练之可微量化参数—LSQ</a></p>
</blockquote>
</li>
</ul>
<h2 id="5-低比特量化">5. 低比特量化</h2>
<ul>
<li>Binary Quantization</li>
<li>Ternary Quantization</li>
<li>Mixed-Percision Quantization</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/weixin_37179744/article/details/130079721?spm=1001.2014.3001.5502">MIT 6.S965 韩松课程 05</a></li>
<li><a href="https://blog.csdn.net/jinzhuojun/article/details/106955059">闲话模型压缩之量化（Quantization）篇</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Java编译技术分析</title>
      <link>https://qinganzhang.github.io/posts/java%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 03 Mar 2024 21:00:30 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/java%E7%BC%96%E8%AF%91%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
      <description>Java编译技术分析 ​ Java程序在运行时首先需要进行前端编译，传统的方法是将Java字节码进行解释执行。为了提高性能，JIT编译通过分层编</description>
      <content:encoded><![CDATA[<h1 id="java编译技术分析">Java编译技术分析</h1>
<p>​		Java程序在运行时首先需要进行前端编译，传统的方法是将Java字节码进行解释执行。为了提高性能，JIT编译通过分层编译热点代码，结合诸多优化方法，在很多场景中性能得到显著的提高。在云原生的场景中，JIT方法面临冷启动的局限，因此AOT受到越来越多的关注。Java AOT是近几年较新的一个Java编译方法，GraalVM Native Image是当前一个主流的实现方法，它将Java字节码编译为平台相关的二进制代码，将Java的动态编译转变为静态编译，以适应云原生等场景。在文章最后将JIT与AOT进行了简单的对比。</p>
<h2 id="1-传统java编译和运行">1. 传统Java编译和运行</h2>
<h3 id="11-java编译">1.1 Java编译</h3>
<p>​		编译一般是指将高级程序设计语言转换为计算机硬件能识别的机器语言，以便计算机进行处理和实现人类的易读性，而解释是指将源代码逐条转换为目标代码并逐条运行的过程。针对Java语言而言，Java程序运行的过程中同时包括编译与运行，第一个阶段是在编译阶段，将Java代码编译成Java字节码，这个过程通常叫做前端编译，比如使用Oracle的javac编译器进行编译；第二个阶段是在运行时，通过JVM将Java字节码逐条运行。Java编译主要在第二个阶段有不同的类型，比如JIT和AOT，这两种方法会在后续进行介绍。第一个阶段的转换过程大体与其他编程语言类似，下面简单进行介绍。</p>
<p>​		前端编译主要是将源代码转换为中间代码的过程，大体分为以下几个过程。首先通过词法分析分析出句子中各个单词的词性或者词类，将程序划分为词法单元（即Token）。接下来通过语法分析从上面输出的Token流中识别出各类短语，并构造语法分析树。然后进行语义分析，手机标识符的属性信息，同时进行语义检查，最后生成中间代码。各种编程语言的前端编译大体类似。</p>
<h3 id="12-java运行">1.2 Java运行</h3>
<p>​		经过传统的Java编译后，得到了Java字节码，即Class文件，Java字节码由操作码和操作数组成，Java通过Java字节码实现了平台无关性，一次编写，到处运行。当使用java命令运行Class文件时，相当于启动了一个JVM进程，JVM中的执行引擎（中的解释器）将平台无关的字节码转换为机器码。JVM采用基于栈的结构，同样分为堆和栈。比如我们现在运行到了 main 方法，就会给它分配一个栈帧。当退出方法体时，会弹出相应的栈帧。</p>
<h2 id="2-java即时编译jit">2 Java即时编译（JIT）</h2>
<h3 id="21-jit运行过程">2.1 JIT运行过程</h3>
<p>​		传统的Java运行过程是JVM解释器逐条代码翻译运行Java字节码，所以在性能上Java通常不如C++这类编译型语言。为了优化Java的性能，根据“二八定律”（少部分代码占据了程序的大部分运行时间），JVM在解释器之外引入了即时（Just In Time）编译器：当程序运行时，解释器首先发挥作用，代码可以直接执行。随着时间推移，即时编译器逐渐发挥作用，把越来越多的代码编译优化成本地代码，来获取更高的执行效率。解释器这时可以作为编译运行的降级手段，在一些不可靠的编译优化出现问题时，再切换回解释执行，保证程序可以正常运行。</p>
<p>​		使用JIT后，Java代码的执行过程分为两个部分。第一步同样是进行前端编译，转换成Java字节码。第二部分中，在程序解释运行的过程中，部分代码在一定时间内调用或循环次数超过一定的阈值后，该段代码被认为是热点代码，JIT会编译热点代码并存入codeCache中。当下次要执行该段代码时，直接从codeCache中读取执行，以此来提升运行的性能。简单说，JIT就是将代码经过预热之后，将热点代码进行编译，整体的执行过程大致如  图 1 JIT编译过程  所示。</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:03:39.png" alt="JIT编译过程" style="zoom:67%;" />
<center>图一 JIT编译过程</center>
<h2 id="22-分层编译">2.2 分层编译</h2>
<p>​		JIT大体分为两个部分或两种模式：C1编译模式与C2编译模式，分别对应了两种不同的编译器：Client Compiler和Server Compiler。Client Compiler（或C1编译器）注重启动速度和局部的优化，Server Compiler更关注全局的优化，性能更好但是编译时间也更久。</p>
<p>​		具体来说，C1编译器会对字节码进行以下的优化：进行局部简单可靠的优化（比如方法内联、常量传播等），将字节码构造成高级中间表示（HIR，HIR与平台无关，通常采用图结构），将HIR转换为低级中间表示（LIR）、C2编译器会进行一些全局性的、更激进的优化（比如循环变换等）。从JDK9开始，C2编译模式除了Server Compiler，还可以选择Graal编译器，该编译器会进行分支预测、虚函数内联等优化，相对Server Compiler优化更加激进，峰值性能更好。</p>
<p>​		C1编译器和C2编译器和解释器可以相互进行组合，即分层编译。Java7开始引入了分层编译的概念，对于需要快速启动的，或者一些不会长期运行的服务，可以采用编译效率较高的C1；长期运行的服务，或者对峰值性能有要求的后台服务，可以采用峰值性能更好的C2。分层编译将JVM的执行状态分为了五个层次（如  图二 常见编译路径  中横向阶段）：</p>
<p>​				0层：解释执行</p>
<p>​				1层：执行不带profiling的C1代码</p>
<p>​				2层：执行仅带方法调用次数和循环回边执行次数profiling的C1代码</p>
<p>​				3层：执行带所有profiling的C1代码</p>
<p>​				4层：执行C2代码</p>
<p>​		其中profiling就是收集能够反映程序执行状态的数据。其中最基本的统计数据就是方法的调用次数，以及循环回边的执行次数</p>
<p>根据实际中不同层次进行组合的情况，常用的有五种路径或组合方式（如 图二 常见编译路径  中纵向路径）：</p>
<p>​				路径①：编译的一般情况，热点方法从解释执行到被3层的C1编译，最后被4层的C2编译。</p>
<p>​				路径②：如果方法比较小（比如Java服务中常见的getter/setter方法），3层的profiling没有收集到有价值的数据，JVM就会断定该方法对于C1代码和C2代码的执行效率相同，在这种情况下，JVM会在3层编译之后，放弃进入C2编译，直接选择用1层的C1编译运行。</p>
<p>​				路径③：如果C1编译器忙碌，就在解释执行过程中对程序进行profiling ，根据信息直接由第4层的C2编译。</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:09:48.png" style="zoom:67%;" />
<center>图二 常见编译路径</center>
<p>​				路径④：如果C2编译器忙碌，因为C1阶段运行速度快，这时方法会被2层的C1编译，然后再被3层的C1编译，以减少方法在3层C2的执行时间。</p>
<p>​				路径⑤：如果编译器做了一些比较激进的优化，比如分支预测，在实际运行时发现预测出错，这时就会进行反优化，重新进入解释执行</p>
<p>​		总的来说，C1的编译速度更快，C2的编译质量更高，分层编译的不同编译路径，也就是JVM根据当前服务的运行情况来寻找当前服务的最佳平衡点的一个过程。从JDK 8开始，JVM默认开启分层编译。</p>
<h2 id="23-编译优化">2.3 编译优化</h2>
<p>​		JIT会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。下面简要介绍一些常用的优化方法。</p>
<h3 id="231-方法内联">2.3.1 方法内联</h3>
<p>​		方法内联，是指在编译过程中遇到方法调用时，将目标方法的方法体纳入编译范围之中，并取代原方法调用的优化手段。JIT大部分的优化都是在内联的基础上进行的，方法内联是即时编译器中非常重要的一环。</p>
<p>​		Java服务中存在大量getter/setter方法，如果没有方法内联，在调用getter/setter时，程序执行时需要保存当前方法的执行位置，创建并压入用于getter/setter的栈帧、访问字段、弹出栈帧，最后再恢复当前方法的执行。内联了对 getter/setter的方法调用后，能将对getter、setter的访问优化成单一内存访问。</p>
<p>​		内联是JIT提升性能的主要手段，但是虚函数使得内联是很难的，因为在内联阶段并不知道他们会调用哪个方法。C2编译器会优化单个实现方法的虚函数调用，但是无法优化多个实现方法的虚函数调用。</p>
<h3 id="232-逃逸分析">2.3.2 逃逸分析</h3>
<p>​		逃逸分析是一种确定指针动态范围的静态分析，它可以分析在程序的哪些地方可以访问到指针。JIT会对新建的对象进行逃逸分析，判断对象是否逃逸出线程或者方法。根据逃逸分析的结果进行诸如锁消除、栈上分配以及标量替换的优化。</p>
<p>​		锁消除即如果JIT能够证明锁对象不逃逸，那么对该锁对象的加锁、解锁操作没就有意义，可以进行锁消除。</p>
<p>​		栈上分配是如果逃逸分析能够证明某些新建的对象不逃逸，那么JVM完全可以将其分配至栈上，并且在new语句所在的方法退出时，通过弹出当前方法的栈桢来自动回收所分配的内存空间。这样一来，我们便无须借助垃圾回收器来处理不再被引用的对象。在Hotspot虚拟机中，并没有进行实际的栈上分配，而是使用了标量替换这一技术，编译器会在方法内将未逃逸的聚合量分解成多个标量，以此来减少堆上分配。</p>
<h2 id="3-java提前编译aot">3 Java提前编译（AOT）</h2>
<p>​		JIT会对正在运行的服务进行一系列的优化，包括字节码解析过程中的分析，根据编译过程中代码的一些中间形式来做局部优化，还会根据程序依赖图进行全局优化，最后才会生成机器码。下面简要介绍一些常用的优化方法。</p>
<h3 id="31-背景">3.1 背景</h3>
<p>​		JIT编译经过不断的发展，在某些情况下性能甚至可以编译型语言相比，但是冷启动开销较大（即需要经过虚拟机初始化后才能达到可用状态，再经过程序预热才能达到最佳性能）的问题是JIT难以解决的一个问题，这个问题在某些情形下显得尤为重要。比如云原生场景下，Serverless 服务本身执行时间短，Serverless 应用强调微服务架构，服务的粒度小，耗时短。与短暂的应用执行时间相比，冷启动的开销耗时所占比重增大，甚至可能比程序执行时间还要长，因此冷启动对应用的影响也到了不可忽视的程度。</p>
<h3 id="32-运行过程与分析">3.2 运行过程与分析</h3>
<p>​		Java AOT与C++的编译过程比较类似，它首先仍需要将Java程序进行前端编译，转换为Java字节码。然后使用静态编译器将字节码编译为平台相关的二进制可执行代码，最后执行。</p>
<p>​		相较于JIT，Java AOT（Ahead Of Time）是一个近年来较新的解决方案，GraalVM Native Image是Oracle官方首推的AOT解决方案，它摈弃了JVM，将Java像C++一样编译成机器代码来执行。GraalVM是Oracle在2019年推出的新一代UVM（通用虚拟机），它在HotSpotVM的基础上进行了大量的优化和改进，主要提供了两大特性：多语言支持（可以在GraalVM中无缝运行多种语言）与高性能（提供了一个高性能的JIT引擎和SubstrateVM）。下面简单介绍一下这个特定的Java AOT方案。</p>
<p>​		Native Image 是一种将 Java 代码提前编译为独立可执行文件（称为Native executable）的技术，即Native Image是基于GraalVM的AOT。Native Image的输入是整个应用的所有组件，包括应用本身的代码、各种依赖的库、JDK库、以及Substrate VM（Substrate VM是一个包含内存管理、线程调度等的运行时系统），然后会进行三个步骤（如 图三 Native executable构建过程  所示）：</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-03-04-21:11:49.png" style="zoom: 80%;" />
<center>图三 Native executable构建过程</center>
<h3 id="33-动态特性">3.3 动态特性</h3>
<p>​		Substrate VM除了实现内存管理、线程映射等底层能力之外，还需要以静态的方式实现Java的动态特性，以保持JDK接口层面的兼容性和功能的等价性。例如反射是Java中使用非常广泛的动态特性，Substrate VM通过预执行、编译时和运行时三个阶段的配合对其实现了有条件的静态化支持。</p>
<p>​		静态分析无法得到反射的目标，所以静态分析得到的可达代码中缺少了反射的目标类、函数和域。Substrate VM需要用户在编译时额外提供关于反射的信息——被称为元数据配置，以帮助Substrate VM编译出正确的程序。元数据配置可以由用户手动编辑，但是考虑到在实际项目中手工编辑是不现实的，所以Substrate VM提供了native-image-agent，可以在挂载在应用程序上，将运行过程中遇到的所有反射都记录下来自动生成静态编译需要的配置文件。将通过agent得到配置的过程称为预执行，预执行时不但记录了反射信息，还记录了序列化、动态类加载和动态代理等动态特性的数据。</p>
<p>​		解析出来这个配置文件以后，就可以知道反射什么东西了，将反射的东西注册上去，也就是将可达性的范围进行了扩张，也就扩大了编译的范围。有了配置提供的反射数据，编译时一方面将反射目标注册为可达，扩大了代码可达范围；另一方面将反射调用替换为直接调用，使得在运行时可以在原本用反射调用的位置实现了直接调用。</p>
<h2 id="3-不同编译方法的对比和应用">3 不同编译方法的对比和应用</h2>
<p>​		传统的单纯解释方法已经逐渐淘汰，现在主流的方法是基于JIT的编译方法，因此下面主要讲JIT与AOT进行对比。</p>
<p>​		JIT吞吐量高，有运行时性能加成，程序运行更快，并可以做到动态生成代码等，但是相对启动速度较慢，并需要一定时间和调用频率才能触发 JIT 的分层机制。AOT内存占用低，启动速度快，可以无需 runtime 运行，直接将 runtime 静态链接至最终的程序中，但是无运行时性能加成，不能根据程序运行情况做进一步的优化，而且对动态特性的支持是有限的，部分Java的机制不再适用，且与平台相关。</p>
<p>​		总的来说，JIT与AOT是面向于不同场景下的编译方法。在传统服务器部署的场景中，应用执行时间足够长，冷启动问题就被淡化了，而且还可以提前将服务预热准备好，以最好的状态迎接用户的服务请求，因此可以充分发挥JIT的性能。而Serverless 服务本身执行时间短。Serverless 应用强调微服务架构，服务的粒度小，耗时短。与短暂的应用执行时间相比，冷启动的开销耗时所占比重增大，甚至可能比程序执行时间还要长，因此冷启动对应用的影响也到了不可忽视的程度，此时使用AOT更合适。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[cuda-learning-notes] 硬件抽象和执行模型</title>
      <link>https://qinganzhang.github.io/posts/cuda-learning-notes/%E7%A1%AC%E4%BB%B6%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 01 Mar 2024 22:02:01 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/cuda-learning-notes/%E7%A1%AC%E4%BB%B6%E6%8A%BD%E8%B1%A1%E5%92%8C%E6%89%A7%E8%A1%8C%E6%A8%A1%E5%9E%8B/</guid>
      <description>编程模型 线程组织层次 grid 网格 由一个内核函数启动所产生的所有线程统称为一个网格(grid) grid size和block size都是三维结构，dim3类</description>
      <content:encoded><![CDATA[<h2 id="编程模型">编程模型</h2>
<h3 id="线程组织层次">线程组织层次</h3>
<ul>
<li>
<p>grid 网格</p>
<ul>
<li>
<p>由一个内核函数启动所产生的所有线程统称为一个网格(grid)</p>
</li>
<li>
<p>grid size和block size都是三维结构，<code>dim3</code>类型</p>
<blockquote>
<p>数据类型<code>dim3</code>是基于<code>uint3</code>定义的：</p>
<ul>
<li>比如在主机端配置核函数grid size和block size时，数据类型为<code>dim3</code>类型，此时变量可以进行修改</li>
<li>比如核函数在运行时，在设备端查询grid size和block size时，此时数据类型为<code>uint3</code>，此时变量已经固定无法修改</li>
</ul>
</blockquote>
<ul>
<li>三维网格<code>grid_size(gridDim.x, gridDim.y, gridDim.z)</code></li>
<li>三维线程块<code>block_size(blockDim.x, blockDim.y, blockDim.z)</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>thread block 线程块</p>
<ul>
<li>一个grid可以分为很多个thread block，由<code>blockIdx</code>定位</li>
<li>线程块大小（block size，每个block中线程数量）为1024</li>
</ul>
</li>
<li>
<p>warp（thread）</p>
<ul>
<li>一个thread block中包含很多thread，每相邻的32个（warpSize）thread组成一个warp</li>
<li>每个thread可以由线程块id<code>blockIdx</code>和线程id<code>threadIdx</code>唯一确定，同样也是三维结构</li>
</ul>
</li>
</ul>
<h3 id="函数">函数</h3>
<h4 id="核函数">核函数</h4>
<ul>
<li>
<p>核函数配置：<code>&lt;&lt;&lt;grid_size, block_size, shared_memory_size, stream&gt;&gt;&gt;</code></p>
</li>
<li>
<p>核函数的启动都是异步的，host只是启动（或launch）核函数</p>
<ul>
<li>可以使用<code>cudaDeviceSynchronize</code>进行显式同步，或者进行隐式同步</li>
</ul>
</li>
<li>
<p>核函数的语法相关：</p>
<ul>
<li>返回类型必须是 <code>void</code></li>
<li>必须使用限定符 <code>__glolbal__</code>，也可以加上 c++ 限定符（比如static）；</li>
<li>核函数支持 c++ 的重载机制；</li>
<li>核函数不支持可变数量的参数列表，即参数个数必须确定；</li>
<li>一般情况下，传给核函数的数组（指针）必须指向设备内存（“统一内存编程机制”除外）；</li>
<li>核函数不可成为一个类的成员（一般以包装函数调用核函数，将包装函数定义为类成员）；</li>
<li>在计算能力3.5之前，核函数之间不能相互调用；之后，通过“动态并行”机制可以调用；</li>
</ul>
</li>
<li>
<p>有时启动的线程数量多于数组元素个数，因此通常使用if语句进行控制</p>
</li>
</ul>
<h4 id="设备函数">设备函数</h4>
<ul>
<li>
<p>核函数可以调用不带执行配置的自定义函数，即设备函数。</p>
</li>
<li>
<p>函数执行空间标识符（函数类型限定符）：确定一个函数在哪里被调用，在哪里被运行：</p>
<blockquote>
<p>区分变量类型限定符：<code>__device__</code>全局内存，<code>__shared__</code>共享内存，<code>__constant__</code>常量内存，<code>__managed__</code>统一内存</p>
</blockquote>
<ul>
<li><code>__global__</code>修饰的函数称为核函数，一般由主机调用、在设备中执行；</li>
<li><code>__device__</code>修饰的函数称为设备函数，只能被核函数或其他设备函数调用、在设备中执行；</li>
<li><code>__host__</code>修饰主机端的普通 c++ 函数，在主机中被调用、在主机中执行，一般可以省略；</li>
</ul>
</li>
<li>
<p>相关语法：</p>
<ul>
<li>设备函数可以有返回值</li>
<li>不能同时用 <code>__global__</code> 和 <code>__device__</code> 修饰函数（即一个函数不能同时是核函数和设备函数）</li>
<li>不能同时用 <code>__global__</code> 和 <code>__host__</code> 修饰函数（即一个函数不能同时是核函数和主机函数）</li>
<li>可以同时用 <code>__host__</code> 和 <code>__device__</code> 修饰函数，从而减少代码冗余，此时编译器将分别在主机和设备上编译该函数，生成两份不同的机器码</li>
<li>可以通过 <code>__noinline__</code> 建议编译器不要将一个设备函数当作内联函数；</li>
<li>可以通过 <code>__forceinline__</code> 建议编译器将一个设备函数当作内联函数。</li>
</ul>
</li>
</ul>
<h3 id="内存模型">内存模型</h3>
<h2 id="执行模型">执行模型</h2>
<h3 id="并行方式">并行方式</h3>
<ul>
<li>指令级并行：如果某个warp中两条指令相互独立，则可以依次发射，进行指令级并行</li>
<li>线程并行方式：SIMT
<ul>
<li>SIMD：比如向量运算指令
<ul>
<li>一个线程可以同时处理多个数据，但是当前只使用一个ALU。比如使用ARM指令拓展NEON中的向量加指令，可以同时进行四个int的相加</li>
<li>多个数据使用使用相同的指令一起执行</li>
</ul>
</li>
<li>SIMT
<ul>
<li>从硬件上看，所有的core有各自的执行单元（与SIMD共用一个ALU不同）</li>
<li>从软件上看，每个线程都有自己的指令计数器、寄存器，因此每个线程可以有自己独立的执行路径</li>
<li>尽管一个warp中的所有线程在相同的程序地址上同时开始执行，但是单独的线程仍然可能有不同的行为</li>
</ul>
</li>
</ul>
</li>
<li>warp并行方式：SM上同一个线程块的多个warp，通过大量的core实现并行，通过调度和流水线实现并发和并行</li>
</ul>
<h3 id="执行模型-1">执行模型</h3>
<ul>
<li>
<p>host启动核函数，GPU异步执行</p>
</li>
<li>
<p>GPU根据运行配置，GPU将启动的核函数作为一个grid，并划分为线程块</p>
<ul>
<li>一个线程块分配到一个SM执行，多个线程块可以分配到同一个SM执行，但是一个线程块无法分配到多个SM</li>
</ul>
</li>
<li>
<p>线程块划分为warp</p>
<ul>
<li>
<p>由于资源和硬件限制，并非所有的warp都可以同时执行，因此warp可以分类：</p>
<blockquote>
<p>资源和硬件限制：</p>
<ul>
<li>
<p>限制了运行的warp的最大数量</p>
<ul>
<li>
<p>SM限制：每个SM、每个block的最大共享内存大小</p>
</li>
<li>
<p>寄存器限制：每个SM、每个block、每个thread的最大寄存器数量</p>
</li>
<li>
<p>每个SM中resident block、resident warps、resident threads的最大数量</p>
<blockquote>
<p>寄存器和共享内存都是以256个或字节为单元进行分配的</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>限制了每个时钟周期发射的warp的数量：比如一个warp scheduler如果只有一个issue slot，则只能从warp slots中发生一个warp</p>
</li>
</ul>
</blockquote>
<ul>
<li>active warp：进入到warp slots中的warp（另一种说法是，当寄存器和共享内存分配给线程块，该线程块内的warp处于活跃状态）
<ul>
<li>stalled warp：阻塞的warp
<ul>
<li>造成阻塞的情况：正在取指，依赖内存指令的访存结果，依赖于之前指令的执行结果，pipeline正在忙，同步barrier</li>
</ul>
</li>
<li>eligible warp：符合条件的warp（32个cuda core可用于执行，数据已经就绪），可以运行的warp</li>
<li>selected warp：选定的warp，当前正在运行的warp</li>
</ul>
</li>
<li>inactivate warp</li>
</ul>
</li>
<li>
<p>由于计算资源是在warp之间分配的，且warp的整个生命周期都在片上（上下文常驻SM），所以warp的上下文切换是非常快速的</p>
<ul>
<li>而CPU中寄存器数量很有限，进行需要保护和切换上下文</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/feng__shuai/article/details/125665305">warp scheduler</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>隐藏延迟：如果warp scheduler在指令周期的每个时钟周期都有一些可以发射的指令，则最大化硬件利用率。通过流水线，来隐藏延迟</p>
<ul>
<li>同一个线程中的指令使用流水线来进行指令级并行</li>
<li>两类指令：
<ul>
<li>算数指令：使用ALU，延迟小（大约10~20个时钟周期）
<ul>
<li>
<p>算数指令隐藏延迟的目的是使用全部的计算资源</p>
</li>
<li>
<p>算数运算的并行可以表示为：隐藏算数指令延迟所需要的操作数量</p>
<ul>
<li>所需的指令数量=延迟 $\times$ 吞吐量/32</li>
<li>吞吐量是每个SM每个时钟周期的操作数量，由于SIMT，一个指令对应32个线程的操作，因此指令的吞吐量=（操作数量）吞吐量/32</li>
</ul>
<blockquote>
<p>理论上所需active的warp数量=延迟 $\times$ 吞吐量/32，还是延迟$\times$ warp_scheduler数量，不是很清楚</p>
</blockquote>
</li>
<li>
<p>比如有4个warp scheduler，一个算数指令的耗时或延迟是8个周期，则为了完全隐藏延迟，最少需要32个active的warp；如果warp表现出指令并行性，则需要的active的warp数量更少</p>
</li>
</ul>
</li>
<li>内存指令：使用LD/ST，延迟较大（大约400~800个时钟周期）
<ul>
<li>内存指令隐藏延迟的目的是使用全部的带宽</li>
<li>内存操作的并行可以表示为：每个周期内隐藏内存延迟所需的字节数</li>
<li>$$所需active的warp数量=\frac{\frac{访存延迟(周期)}{内存频率(周期/s)} \times 带宽(GB/s)}{每个线程访问的数据量(B) \times 32} $$</li>
</ul>
</li>
<li>辨析：
<ul>
<li>传统CPU流水线：每个硬件部件（译码单元，ALU等）当前运行的，属于不同的指令，隐藏的是整个指令从取指到写回的整个过程。独立的算数指令的流水线也与此类似。
<ul>
<li>CPU通过cache来隐藏延迟，而GPU通过计算来隐藏延迟</li>
</ul>
</li>
<li>算数指令的流水线：在一个SM中，warp之间运行的是不同的指令，因为GPU指令相对CPU而言较慢，所以隐藏的是GPU指令的运行时间</li>
<li>内存指令的流水线：若干个SM中的所有core，使用流水线，从而隐藏访存延迟</li>
<li>内存延迟的时候，计算资源core正在被别的warp使用，这两种延迟使用的是不同的硬件资源，但是遵循相同的原理</li>
</ul>
</li>
</ul>
</li>
<li>一方面，隐藏延迟需要足够多的活跃的warp，数量越多，隐藏越好；另一方面，warp的数量又受到资源和硬件的限制，不能过多</li>
</ul>
</li>
<li>
<p>warp占用率：<a href="https://karthikeyann.github.io/cuda-calculator/">CUDA Occupancy Calculator</a></p>
<ul>
<li>warp占用率=$\frac{SM中活跃的warp的数量}{SM最大支持warp数量}$
<ul>
<li>nvcc编译时，添加编译选项<code>--ptxas-options=-v</code>，可以统计共享内存和寄存器的使用量</li>
</ul>
</li>
<li>高占用率不一定有高性能，但是低占用率不利于隐藏延迟</li>
<li>占用率限制因素：
<ul>
<li>资源限制：共享内存和寄存器限制</li>
<li>硬件设计限制：每个SM的最多block数、warp数、thread数</li>
</ul>
</li>
<li>权衡
<ul>
<li>如果每个线程块中线程太少，线程块数量变多，容易受到每个SM中最多block数的限制，导致占用率低</li>
<li>如果每个线程块中线程太多，每个线程块中warp数量变多，线程块数量减少，容易受到每个线程寄存器/共享内存的限制，剩余的一些warp没法组成一个线程块，导致占用率变低</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/weixin_44444450/article/details/118058031">https://blog.csdn.net/weixin_44444450/article/details/118058031</a></li>
<li>一个占用率计算例子：https://blog.csdn.net/wd1603926823/article/details/108871290</li>
<li><a href="https://face2ai.com/CUDA-F-3-2-%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%9D%9F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8-P2/">https://face2ai.com/CUDA-F-3-2-%E7%90%86%E8%A7%A3%E7%BA%BF%E7%A8%8B%E6%9D%9F%E6%89%A7%E8%A1%8C%E7%9A%84%E6%9C%AC%E8%B4%A8-P2/</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="避免分支">避免分支</h3>
<ul>
<li>
<p>一个warp中的if语句如果在运行时判断产生分支，会导致一个warp中对应的线程依次执行相应路径，其他线程等待（或是假运行），相当于每个代码块都跑了一遍，分支数量越多，性能越差</p>
<ul>
<li>如果if中没有产生分支，则不用考虑</li>
<li>比如for循环中包含了if判断，则很可能</li>
<li>可以将分支粒度调整为warp大小的倍数，使得一个warp中执行同一个路径，不同warp间可以执行不同路径，比如<code>(tid/warpSize)%2</code>进行奇偶交错</li>
</ul>
</li>
<li>
<p>独立线程调度机制中，每个线程有自己的程序计数器和寄存器，此时SIMT如何运行？不是很清楚</p>
</li>
<li>
<p>metric：不是很清楚</p>
<ul>
<li><strong>Branch Efficiency</strong> is a measure of how many branches diverged. 100% means no branches diverged. When a branch diverges the warp thread active mask is reduce to be less than 32 so the execution is not as efficient. In addition the branch may have to be executed multiple times based upon the number of ways the branch diverged.</li>
<li><strong>Control Flow Efficiency</strong> is a measure of how many threads in a warp were active for each instruction. Unless you launch a non-multiple of 32 threads this will be 32 threads or 100%. This number will be less than 100% if the code diverges.</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://stackoverflow.com/questions/12539762/what-does-a-high-branch-efficiency-and-low-control-flow-efficiency-indicate">What does a high branch efficiency and low control flow efficiency indicate</a></li>
</ul>
</li>
</ul>
<h4 id="循环展开">循环展开</h4>
<ul>
<li>
<p>循环展开：在一次循环中，完成多次循环的任务，从而减少循环的迭代次数</p>
<ul>
<li>减少了循环判断次数（减少指令消耗）</li>
<li>循环内部可以有更多独立的操作，有利于流水线</li>
</ul>
</li>
<li>
<p>例子：reduce中循环展开</p>
<ul>
<li>首先一个线程累加多个数据：shrink
<ul>
<li>收益：线程数量减半（指数减少）</li>
<li>代价：多了一次（或若干次）访存，但是可以使用流水线隐藏延迟</li>
</ul>
</li>
<li>然后折半reduce的过程
<ul>
<li>要求此时数组长度必须为2的幂次，因此可以写成模板、在编译期判断</li>
</ul>
</li>
<li>最后是一个warp中的reduce过程：此时计算的线程数量&lt;=32，
<ul>
<li>不仅没有了循环判断，而且读写过程可以充分使用流水线</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="动态并行">动态并行</h3>
<ul>
<li>
<p>优点：</p>
<ul>
<li>让复杂的kernel变得有层次，比如实现递归核函数</li>
<li>可以等到执行的时候再创建执行配置，利用GPU硬件调度器和加载平衡器动态的调整以适应数据驱动或工作的负载</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>运行效率更低</li>
</ul>
</li>
<li>
<p>过程</p>
<ul>
<li>子grid被父thread启动，必须在对应的父thread，父thread block，父grid结束之前结束。所有的子grid结束后，父thread，父thread block，父grid才能结束</li>
<li>如果父thread调用子grid时没有显式同步，则运行时保证，父thread与子grid隐式同步</li>
<li>需要仔细考虑内存竞争的问题
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:22:02.png" style="zoom: 33%;" /></li>
</ul>
</li>
<li>
<p>编译时需要加上<code>-lcudadevrt --relocatable-device-code true</code></p>
<ul>
<li><code>--relocatable-device-code true</code>表示生成可重新定位的代码</li>
</ul>
</li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_42683011/article/details/113593860"># CUDA编程第三章: CUDA执行模型</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[cuda-learning-notes] 内存模型</title>
      <link>https://qinganzhang.github.io/posts/cuda-learning-notes/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Fri, 01 Mar 2024 22:01:50 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/cuda-learning-notes/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</guid>
      <description>内存模型 全局内存 对全局内存变量的理解： 从主机端看，全局内存变量只是一个指针，主机端不知道其指向何方。主机端也无法进行操作 从设备端看，即为全局</description>
      <content:encoded><![CDATA[<h2 id="内存模型">内存模型</h2>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:11:11.png" style="zoom: 70%;" />
<h3 id="全局内存">全局内存</h3>
<ul>
<li>
<p>对全局内存变量的理解：</p>
<ul>
<li>从主机端看，全局内存变量只是一个指针，主机端不知道其指向何方。主机端也无法进行操作</li>
<li>从设备端看，即为全局内存变量</li>
<li>一个经常会发生的错误就是混用设备和主机的内存地址：主机代码不能直接访问设备变量，设备也不能直接访问主机变量</li>
</ul>
</li>
<li>
<p>对全局内存的读写</p>
<ul>
<li>如果是读操作，有三种部分的访问方式：
<ul>
<li>L1缓存，L2缓存，DRAM</li>
<li>（禁用L1缓存）L2缓存，DRAM
<ul>
<li>Fermi之后都是默认禁用L1</li>
<li>禁用L1缓存的原因是，L1缓存被用作缓冲从寄存器中溢出的数据</li>
</ul>
</li>
<li>只读缓存，L2缓存，DRAM</li>
</ul>
</li>
<li>如果是写操作，则无法被缓存，只经过device层次的L2缓存，没有命中再访问DRAM
<ul>
<li>==不是很清楚==</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="编程模型">编程模型</h4>
<ul>
<li>动态全局内存：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">double</span> <span class="o">*</span><span class="n">d_x</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="n">cudaMalloc</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">d_x</span><span class="p">),</span> <span class="mi">100</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span> <span class="c1">// d_x改变为指向设备全局内存的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">double</span> <span class="o">*</span><span class="n">h_x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">h_x</span> <span class="o">=</span> <span class="p">(</span><span class="kt">double</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">100</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span> <span class="c1">// h_x是指向主机内存的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_x</span><span class="p">,</span> <span class="n">h_x</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">),</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>静态全局内存：
<ul>
<li>如果静态全局变量是一个变量（而非数组类型）：此时主机中不可以直接给静态全局内存变量赋值，可以通过 <code>cudaMemcpyToSymbol()</code> 和 <code>cudaMemcpyFromSymbol()</code> 拷贝。  （一个例外：固定内存）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">double</span> <span class="n">d</span><span class="p">;</span> <span class="c1">// 从设备端来看，d直接就是设备全局内存上的变量；从主机端来看，d是一个指针，但是不知道其指向哪里
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">double</span> <span class="n">h</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">cudaMemcpyToSymbol</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">h</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span> <span class="c1">// H2D
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">cudaMemcpyFromSymbol</span><span class="p">(</span><span class="o">&amp;</span><span class="n">h</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">));</span> <span class="c1">// D2H
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 因为使用cudaMemcpy需要得到d的地址，而主机端无法直接操作设备端的变量。如果非要使用cudaMemcpy:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">double</span> <span class="o">*</span><span class="n">dptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">cudaGetSymbolAddress</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">dptr</span><span class="p">),</span> <span class="n">d</span><span class="p">);</span> <span class="c1">// 因为主机无法对全局内存变量d取地址，只能使用函数间接得到其地址dptr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">dptr</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">),</span> <span class="n">cudaMemcpyToDevice</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果静态全局变量是一个数组，可以使用<code>cudaMemcpy</code>：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">double</span> <span class="n">d_x</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span> <span class="c1">// d_x[]直接就是设备全局内存上的数组，d_x是其地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">double</span> <span class="n">h_x</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_x</span><span class="p">,</span> <span class="n">h_x</span><span class="p">,</span> <span class="mi">100</span><span class="o">*</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">double</span><span class="p">),</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h4 id="优化">优化</h4>
<p>全局内存访问速度慢，往往是一个 CUDA 程序的性能瓶颈。
优化目标：</p>
<ul>
<li>对齐合并的内存访问，减少带宽浪费</li>
<li>足够的并发内存操作，隐藏内存延迟</li>
</ul>
<h5 id="全局内存的对齐合并访问">全局内存的对齐合并访问</h5>
<ul>
<li>
<p>访问粒度：</p>
<ul>
<li>L1的缓存粒度为128字节（可以禁用L1缓存，只使用L2缓存）</li>
<li>L2的缓存粒度为32字节</li>
<li>只读缓存也可以缓存全局内存中的数据，缓存粒度为32字节
<ul>
<li>使用<code>__ldg()</code>函数将全局内存缓存到只读缓存中</li>
<li>如果编译器能够判断一个全局内存变量在整个核函数的范围内都可读，则自动使用<code>__ldg()</code>函数进行缓存，但是对于全局的写入，没有相应的函数</li>
<li>可以使用<code>__restrict__</code>修饰指针，表示该指针专门用来访问特定的数组（该指针不是别名），nvcc使用只读缓存进行加载</li>
</ul>
</li>
</ul>
</li>
<li>
<p>内存对齐：</p>
<ul>
<li>一次数据传输中，从全局内存转移到 L2 缓存的一片内存的首地址一定是 32 的整数倍。</li>
<li>使用cuda runtime api（比如cudaMalloc）分配的内存的首地址至少是256字节的整数倍</li>
</ul>
</li>
<li>
<p>内存事务：从核函数发起请求，到硬件相应返回数据这个过程</p>
<ul>
<li>内存事务可以分为1段，2段，4段</li>
<li>比如全局内存写入时，经过L2缓存，缓存粒度为32字节，此时一次内存事务可以写入1段32字节，2段64字节，4段128字节，其他字节数量只能组合得到</li>
</ul>
</li>
<li>
<p>全局内存的访问模式：</p>
<ul>
<li>对齐的：内存事务的首地址是缓存粒度的整数倍</li>
<li>合并的（coalesced）：一个warp对全局内存的访问都在一个缓存粒度中（一个warp对全局内存的访问导致最少数量的数据传输），或者可以理解为缓存利用率
<ul>
<li>合并度=$\frac{warp请求的字节数}{由该请求导致的所有数据传输的字节数}$</li>
</ul>
</li>
</ul>
</li>
<li>
<p>几种常见的内存访问模式：（以一维的grid和一维的block为例）</p>
<ul>
<li>理想的内存访问：顺序的合并访问，合并度=100%</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">add</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">z</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">z</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">add</span><span class="o">&lt;&lt;&lt;</span><span class="mi">128</span><span class="p">,</span> <span class="mi">32</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>乱序的合并访问：访问是交叉的，但仍是合并的，合并度=100%</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">add_permuted</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">z</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tid_permuted</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">^</span> <span class="mh">0x1</span><span class="p">;</span> <span class="c1">// 交换两个相邻的数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 比如：threadIdx.x=0, tid_permuted=1; threadIdx.x=1;tid_permuted=0;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">tid_permuted</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">z</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">add_permuted</span><span class="o">&lt;&lt;&lt;</span><span class="mi">128</span><span class="p">,</span> <span class="mi">32</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>不对齐的非合并访问（地址错位）
<ul>
<li>如果使用L1 cache，访问粒度为128字节，速度快，但是带宽利用率更低</li>
<li>如果不使用L1 cache，访问粒度为32字节，速度慢，但是带宽利用率更高，从而可以提高总线的整体利用率</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">add_offset</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">z</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">z</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">add_offset</span><span class="o">&lt;&lt;&lt;</span><span class="mi">128</span><span class="p">,</span> <span class="mi">32</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 对于某个thread block，有32个线程
</span></span></span><span class="line"><span class="cl"><span class="c1">// 假设数组x，y，z首地址都是256字节的倍数，而一次访存至少32字节
</span></span></span><span class="line"><span class="cl"><span class="c1">// 由于地址错位，需要进行五次访存，合并度=128/(5*32)=80%
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>跨越式非合并访问
<ul>
<li>如果使用L1 cache，访问粒度为128字节，合并度很低（而且出现频繁的缓存失效和替换）</li>
<li>如果不使用L1 cache，访问粒度为32字节，合并度稍微提升</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">add_stride</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">z</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">z</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">add_stride</span><span class="o">&lt;&lt;&lt;</span><span class="mi">128</span><span class="p">,</span> <span class="mi">32</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 对于0号线程块(blockIdx.x=0)，将访问：0， 128， 256， 384 ... 等位置
</span></span></span><span class="line"><span class="cl"><span class="c1">// 即stride=gridDim.x=128
</span></span></span><span class="line"><span class="cl"><span class="c1">// 合并度=128/(32*32)=12.5%，触发32次访存，每次访存32字节
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>广播式非合并访问</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">add_broadcast</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">y</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">z</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">z</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">y</span><span class="p">[</span><span class="n">n</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 合并度=4/32=12.5%
</span></span></span><span class="line"><span class="cl"><span class="c1">// 虽然合并度低，但是整个过程只进行了一次访存
</span></span></span><span class="line"><span class="cl"><span class="c1">// 其实更适合使用常量内存
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h5 id="定量衡量核函数的有效带宽">定量衡量核函数的有效带宽</h5>
<ul>
<li>
<p>带宽：</p>
<ul>
<li>理论带宽：硬件限制</li>
<li>有效带宽：核函数实际达到的带宽，$有效带宽=\frac{(读字节数+写字节数)\times 10^{-9}}{运行时间}$</li>
<li>吞吐量：单位时间内操作的执行速度，比如说FPS或（流水线）每个周期完成都少个指令，不仅取决于有效带宽，而且与带宽的利用率、是否命中缓存有关
<ul>
<li>比如数据经常命中缓存，此时吞吐量就可能超过有效带宽</li>
</ul>
</li>
</ul>
</li>
<li>
<p>例子：使用全局内存进行方阵转置，</p>
<ul>
<li>准备工作：测量有效带宽的上限和下限
<ul>
<li>测量有效带宽的上限：对A按行合并读取，对B按行合并写入
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">B</span><span class="p">[</span><span class="n">nx</span> <span class="o">+</span> <span class="n">ny</span> <span class="o">*</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">nx</span> <span class="o">+</span> <span class="n">ny</span> <span class="o">*</span> <span class="n">N</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>测量有效带宽的下限：对A按列交叉读取，对B按列交叉写入
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">B</span><span class="p">[</span><span class="n">ny</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">ny</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">N</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>测试：code部分如果</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">int</span> <span class="n">TILE_DIM</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="kt">double</span> <span class="n">real</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__global__</span> <span class="kt">void</span> <span class="nf">copy</span><span class="p">(</span><span class="k">const</span> <span class="n">read</span> <span class="o">*</span><span class="n">A</span><span class="p">,</span> <span class="n">real</span> <span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">TILE_DIM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">TILE_DIM</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">    code
</span></span></span><span class="line"><span class="cl"><span class="cm">    */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">dim3</span> <span class="nf">block_size</span><span class="p">(</span><span class="n">TILE_DIM</span><span class="p">,</span> <span class="n">TILE_DIM</span><span class="p">);</span> <span class="c1">// 每个thread block中TILE_DIM*TILE_DIM个线程，每个元素对应一个线程
</span></span></span><span class="line"><span class="cl"><span class="c1">// 此时一个线程块中32*32个线程，少于1024的限制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="n">dim3</span> <span class="nf">grid_size</span><span class="p">((</span><span class="n">N</span> <span class="o">+</span> <span class="n">TILE_DIM</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">TILE_DIM</span><span class="p">,</span> <span class="p">(</span><span class="n">N</span> <span class="o">+</span> <span class="n">TILE_DIM</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">TILE_DIM</span><span class="p">);</span> <span class="c1">// grid的维度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">copy</span><span class="o">&lt;&lt;&lt;</span><span class="n">grid_size</span><span class="p">,</span> <span class="n">block_size</span><span class="o">&gt;&gt;&gt;</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">N</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>将A的一行转成B的一列：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">B</span><span class="p">[</span><span class="n">ny</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">nx</span> <span class="o">+</span> <span class="n">ny</span> <span class="o">*</span> <span class="n">N</span><span class="p">];</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>对于A的读取是顺序的，对于B的写入是非顺序的</li>
</ul>
</li>
<li>
<p>将A的一列转成B的一行：更快</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">if</span><span class="p">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">B</span><span class="p">[</span><span class="n">nx</span> <span class="o">+</span> <span class="n">ny</span> <span class="o">*</span> <span class="n">N</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">ny</span> <span class="o">+</span> <span class="n">nx</span> <span class="o">*</span> <span class="n">N</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>对于A的读取不是顺序的，对于B的写入是顺序的</li>
</ul>
</li>
<li>
<p>分析：</p>
<ul>
<li>
<p>如果对A按行读取（将A的一行转成B的一列），对A按行读取是合并的，写入过程（交叉写入）不缓存</p>
</li>
<li>
<p>如果对B按行写入（将A的一列转成B的一行），对A按列读取是交叉的，写入过程（合并写入）不缓存，应该更慢</p>
</li>
<li>
<p>但是实际上第二种方式更快，原因在于L1缓存命中率
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-08-16:17:47.png" style="zoom: 20%;" /></p>
<ul>
<li>对A按行读取，每个warp读取$32\times4B=128B$，正好是一次L1缓存的访问粒度，相当于每次访问，L1缓存命中率都为0，数据从全局内存拿到L1缓存后，后续这些数据又不再使用。因此，总体来看L1缓存命中率=0</li>
<li>对A按列访问，第0个warp中每个线程此时都L1缓存没有命中，此时会有32次128B的访存，然后数据拿到L1缓存中，后面第1~31个warp中线程都可以命中L1缓存。因此，总体来看缓存命中率=$\frac{31}{32}$=0.96875</li>
<li>可能是对A按列访问由于L1缓存命中率高，隐藏延迟更好，总体耗时更短，==不是很清楚==</li>
</ul>
</li>
</ul>
</li>
<li>
<p>若不能满足读取和写入都是合并的，一般应该尽量做到合并写入</p>
</li>
<li></li>
</ul>
</li>
</ul>
<h5 id="结构体数组和数据结构体">结构体数组和数据结构体</h5>
<ul>
<li>
<p>结构体数组（Structure of Array，SoA）：一个结构体，其中成员是数组</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">SoA</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">b</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">SoA</span> <span class="n">myStruct</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>数组结构体（Array of Structure, AoS）：一个数组，每个元素都是一个结构体</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">element</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Aos</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Aos</span> <span class="n">array</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>CUDA中普遍倾向于SoA（结构体数组）因为这种内存访问可以有效地合并
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:23:43.png" style="zoom:60%;" /></p>
</li>
</ul>
<h5 id="其他">其他</h5>
<ul>
<li>
<p>增加每个线程中执行独立内存操作的数量，减少核函数发射的数量</p>
<ul>
<li>对于IO密集型的核函数，每个线程多处理一点数据（而非原来只处理一个数据）</li>
<li>比如reduce中，每个线程可以先累加多个数据，然后再进行两两数据的折叠相加</li>
</ul>
</li>
<li>
<p>对核函数的运行配置进行调整，提升SM占用率</p>
<ul>
<li>提升SM占用率会更好隐藏访存延迟吗？==不是很清楚==
<ul>
<li>参考：<code>Better Performance at Lower Occupancy</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://mp.weixin.qq.com/s/t4T7u4SqajH8db0Essedog">https://mp.weixin.qq.com/s/t4T7u4SqajH8db0Essedog</a></li>
</ul>
</li>
</ul>
<h3 id="常量内存">常量内存</h3>
<ul>
<li>常量内存属于全局内存，只有64KB</li>
<li>核函数的参数通过常量内存传递，且限定4KB</li>
<li>常量内存通过Read-Only Data Cache进行缓存，而且读取到的数据可以广播给warp中的其他线程</li>
<li>因为是只读的，因此常量内存必须在全局空间内、所有核函数之外进行声明，且必须在kernel启动前由host进行初始化（比如使用<code>cudaMemcpyToSymbol</code>来进行初始化）</li>
</ul>
<h3 id="纹理和表面内存">纹理和表面内存</h3>
<ul>
<li>纹理内存专门为那些存在大量空间局部性的内存访问模式设计，可以充分利用空间局部性（比如插值、滤波等操作）</li>
<li>纹理内存驻留在全局内存中，经过只读纹理缓存进行缓存</li>
</ul>
<h3 id="寄存器">寄存器</h3>
<ul>
<li>一个寄存器有32bit（4B）的大小，一些常用内建变量存放在寄存器中</li>
<li>核函数中定义的不加任何限定符的变量一般就存放在寄存器中，不加任何限定符的数组可能存放在寄存器中，或者放在局部内存中（即寄存器溢出，会对性能造成很大影响）</li>
<li>核函数前显式说明来帮助编译优化：<code>__launch_bounds_(maxThreadaPerBlock, minBlocksPerMulitprocessor)</code>
<ul>
<li><code>maxThreadaPerBlock</code>：线程块内包含的最大线程数</li>
<li><code>minBlocksPerMulitprocessor</code>：可选参数，每个SM中预期的最小的常驻线程块数量</li>
</ul>
</li>
<li>寄存器只能被一个线程可见，因此每个线程都有一个变量的副本，而且该变量的副本可以值不同</li>
</ul>
<h3 id="局部内存">局部内存</h3>
<ul>
<li>将寄存器放不下的变量、索引值不能再编译时就确定的数组，都存放在局部内存中（编译器进行判断）</li>
<li>局部内存是全局内存的一部分，因此使用时延迟较高</li>
<li>对于计算能力2.0以上的设备，局部内存可能会存储在L1缓存或L2缓存上</li>
</ul>
<h3 id="共享内存">共享内存</h3>
<ul>
<li>主要作用：
<ul>
<li>减少核函数中对全局内存的访问次数，实现高效的线程块内部的通信</li>
<li>优化对全局内存的访问模式，尤其是针对全局内存的跨越式非合并访问，提高带宽利用率</li>
</ul>
</li>
<li>共享内存一般和L1缓存共享64KB片上内存，可以进行配置
<ul>
<li>按设备进行配置
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">cudaDeviceSetCacheConfig</span><span class="p">(</span><span class="n">cudaFuncCache</span> <span class="n">cacheConfig</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="cm">/* 参数
</span></span></span><span class="line"><span class="cl"><span class="cm">cudaFuncCachePreferNone: no preference(default)
</span></span></span><span class="line"><span class="cl"><span class="cm">cudaFuncCachePreferShared: prefer 48KB shared memory and 16 KB L1 cache
</span></span></span><span class="line"><span class="cl"><span class="cm">cudaFuncCachePreferL1: prefer 48KB L1 cache and 16 KB shared memory
</span></span></span><span class="line"><span class="cl"><span class="cm">cudaFuncCachePreferEqual: prefer 32KB L1 cache and 32 KB shared memory
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>不同核函数自动配置
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">cudaFuncSetCacheConfig</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span> <span class="n">func</span><span class="p">,</span> <span class="k">enum</span> <span class="nc">cudaFuncCache</span> <span class="n">cacheConfig</span><span class="p">);</span> <span class="c1">// 配置核函数func对应的共享内存大小 
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h4 id="编程模型-1">编程模型</h4>
<ul>
<li>静态分配：<code>__shared__ float mat[5][5];</code></li>
<li>动态分配：
<ul>
<li>函数内声明方式：<code>extern __shared__ double arr[];</code>
<ul>
<li>动态共享内存只支持一维数组</li>
</ul>
</li>
<li>核函数的执行配置中，第三个参数为每个线程块中动态共享内存的字节数：<code>&lt;&lt;&lt;grid_size, block_size, sizeof(float) * block_size&gt;&gt;&gt;</code></li>
</ul>
</li>
<li>同步：<code>__syncthreads</code>进行线程块的同步</li>
</ul>
<h4 id="优化-1">优化</h4>
<h3 id="缓存">缓存</h3>
<ul>
<li>
<p>L1和L2缓存：缓存局部内存和全局内存的数据</p>
<ul>
<li>每个SM都有自己的L1缓存，但是L2缓存是所有SM共用的</li>
<li>可以配置是否使用L1缓存</li>
<li>CPU的L1缓存考虑了时间局部性（LRU算法）和空间局部性，GPU的L1缓存只有空间局部性，没有时间局部性（频繁访问一个一级缓存的内存位置不会增加数据留在缓存中的概率）</li>
<li>
<h2 id="cpu的一级缓存是的替换算法是有使用频率和时间局部性的gpu则没有">CPU的一级缓存是的替换算法是有使用频率和时间局部性的，GPU则没有</h2>
</li>
<li>与CPU读写都缓存不同，GPU只会针对读过程进行缓存，写过程不缓存</li>
</ul>
</li>
<li>
<p>每个SM都有一个只读常量缓存</p>
<ul>
<li>使用<code>__ldg()</code>函数显示将数据通过只读数据缓存进行加载</li>
</ul>
</li>
<li>
<p>GPU不是很强调缓存（not dependent on large caches for performance），因为当指令或数据miss时，由于warp切换速度快，所以旧切换warp；即用计算而非cache来隐藏延迟</p>
</li>
</ul>
<h2 id="内存管理">内存管理</h2>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-07-21:05:54.png" alt="image-20231207210554796" style="zoom:80%;" />
<h3 id="常规数据传输函数">常规数据传输函数</h3>
<ul>
<li>
<p><code>cudaMalloc</code>函数：<code>cudaError_t cudaMalloc(void **address, size_t size);</code></p>
<ul>
<li>示例：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">double</span> <span class="o">*</span><span class="n">d_x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">cudaMalloc</span><span class="p">((</span><span class="kt">void</span><span class="o">**</span><span class="p">)</span><span class="o">&amp;</span><span class="n">d_x</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span> <span class="c1">// &amp;d_x的类型为double**
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参数说明：
<ul>
<li><code>address</code>是在分配设备内存的指针</li>
</ul>
</li>
<li>注意事项：
<ul>
<li>==一个经常会发生的错误就是混用设备和主机的内存地址==：主机代码不能直接访问设备变量，设备也不能直接访问主机变量</li>
<li>因为该函数的功能是改变指针<code>d_x</code>的值（即改变<code>d_x</code>指向的位置，将一个指向内存地址的指针赋值给<code>d_x</code>），而非改变<code>d_x</code>所指内容的值，因此只能传入指针<code>d_x</code>的地址，即指针的指针</li>
<li>原来<code>d_x</code>是主机上的一个指针，<code>cudaMalloc</code>之后改变为指向设备全局内存的指针，本质上是GPU地址在内存中的虚拟映射地址</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>cudaMemset</code>函数：<code>cudaError_t cudaMemset(void * devPtr,int value,size_t count)</code></p>
</li>
<li>
<p><code>cudaFree</code>函数：<code>cudaError_t cudaFree(void* address)</code></p>
<ul>
<li>设备内存的分配和释放非常影响性能，尽量重用</li>
<li>CUDA允许在核函数内部使用malloc/free 分配/释放全局内存，但是一般会导致较差的性能</li>
</ul>
</li>
<li>
<p><code>cudaError_t cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)</code></p>
<ul>
<li>主机端的内存默认是可分页的，如果进行数据拷贝，此时CUDA分配不可分页的固定内存，将可分页内存中的数据复制其中，然后再从固定内存中拷贝数据到显存</li>
<li>如果主机端的内存是可分页的，使用虚拟内存，当该页面被换出到交换区时，设备此时无法访问或者进行控制</li>
</ul>
</li>
<li>
<p><code>cudaMemcpyToSymbol</code>函数和<code>cudaMemcpyFromSymbol</code>函数</p>
<ul>
<li>symbol是一个驻留在全局或常量内存空间中的变量</li>
</ul>
</li>
<li>
<p><code>cudaMemcpy</code> 的异步版本 <code>cudaMemcpyAsync</code></p>
<ul>
<li><code>cudaError_t cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)</code></li>
<li>使用异步的数据传输函数时，需要将主机内存定义为不可分页内存（使用<code>cudaMallocHost</code>或<code>cudaHostAlloc</code>），从而防止在程序执行期间物理地址被修改</li>
<li>如果将可分页内存传递给<code>cudaMemcpyAsync</code>，则会导致同步传输</li>
</ul>
</li>
<li>
<p>固定内存：</p>
<ul>
<li><code>cudaError_t cudaMallocHost(void **devPtr, size_t count);</code></li>
<li><code>cudaError_t cudaFreeHost(void *ptr);</code></li>
<li>固定内存的释放和分配成本比可分页内存要高很多，但是传输速度更快，所以对于大规模数据，固定内存效率更高。</li>
<li>固定内存有更高的读写带宽，但是分配过多的固定内存可能会降低主机系统的性能，同时固定内存分配和释放的代价更高。<strong>通常, 当传输数据量&gt;=10M时, 使用固定内存是更好的选择</strong>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:24:06.png" style="zoom:60%;" /></li>
</ul>
</li>
<li>
<p>零拷贝内存</p>
<ul>
<li>在零拷贝内存中，主机和设备可以直接访问对方的变量，原理是将host内存直接映射到设备内存空间上，使得设备可以通过DMA的方式访问host的锁页内存</li>
<li><code>cudaError_t cudaHostAlloc(void **pHost, size_t size, unsigned int flags)</code>
<ul>
<li><code>cudaHostAllocDefault</code>：与cudaMallocHost函数行为一致</li>
<li><code>cudaHostAllocPortable</code>：返回能被所有CUDA上下文使用的固定内存，而不仅是执行内存分配的那一个，分配portable memory，适用于主机多线程，让控制不同GPU的主机端线程操作同一块portable memory，实现GPU线程间通信</li>
<li><code>cudaHostAllocMapped</code>：分配mapped memory，可以在kernel中直接访问mapped memory中的数据，不必再内存和显存之间进行数据拷贝，即zero-copy功能</li>
<li><code>cudaHostAllocWriteCombined</code>：分配write-combined memory，提高从CPU向GPU单向传输数据的速度，不使用CPU的L1、L2 cache，将cache资源留给其他程序使用，在PCI-E总线传输期间不会被来自CPU的监视打断
<ul>
<li>将多次写操作写到固定内存的buffer中，将多次写合并；但实际上性能会比普通的write-back更糟糕, 主要是由于其没有使用cache, 而是直接写回内存</li>
</ul>
</li>
</ul>
</li>
<li>零拷贝内存虽然不需要显式的将主机的数据复制到设备上，但是设备也不能直接访问主机端的数据，需要通过<code>cudaHostGetDevicePointer</code>函数主机上的地址，然后才能通过<code>pDevice</code>访问主机上的零拷贝内存
<ul>
<li><code>cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);</code>
<ul>
<li><code>flags</code>设置为0</li>
</ul>
</li>
<li>如果使用统一内存，则无须使用<code>cudaHostGetDevicePointer</code></li>
</ul>
</li>
<li>使用零拷贝内存需要注意同步主机和设备之间的内存访问</li>
<li>零拷贝内存适合用于少量的数据传输</li>
</ul>
</li>
</ul>
<h3 id="统一内存">统一内存</h3>
<ul>
<li>
<p>发展：</p>
<ul>
<li>统一寻址（Unified Address）：Fermi架构中提出了统一的地址空间，将全局内存、局部内存、共享内存放在一个地址空间中</li>
<li>统一虚拟地址(UVA)：CUDA 4（开普勒架构，麦克斯韦架构）引入，将CPU和GPU的内存映射到统一的虚拟地址上，可以使用指针访问对方的地址</li>
<li>统一内存(UM)：CUDA 6（帕斯卡架构之后）引入，实现了一个CPU和GPU之间的内存池
<ul>
<li>对于第一代统一内存，主机与设备不能并发访问统一内存。因此，在主机调用核函数之后，必须加上一个同步函数（比如<code>cudaDeviceSynchornize</code>），确保核函数对统一内存的访问已经结束，然后才能主机访问统一内存变量</li>
<li>对于第二代统一内存，主机与设备可以并发访问统一内存</li>
</ul>
</li>
</ul>
</li>
<li>
<p>语法相关：</p>
<ul>
<li>统一内存在device中当作全局内存来使用，必须由主机来定义或分配内存，不能在设备端（核函数或<code>__device_</code>函数中）进行。因此，在核函数中由malloc分配的堆内存不属于同一内存，因而如果CPU需要访问，需要手工进行移动</li>
<li>同一个程序中可以同时使用统一内存和非统一内存</li>
</ul>
</li>
<li>
<p>统一内存的分配</p>
<ul>
<li>动态分配：<code>cudaError_t cudaMallocManaged(void **devPtr, size_t size, unsigned flags = 0);</code>
<ul>
<li>参数<code>flags</code>默认为<code>cudaMemAttachGlobal</code>，表示分配的全局内存可以由任何设备通过任何CUDA流访问</li>
</ul>
</li>
<li>静态分配：<code>__device__ __managed__</code>修饰，而且只能是全局变量</li>
</ul>
</li>
<li>
<p>超量分配：</p>
<ul>
<li>编译选项：<code>-DUNIFIED</code></li>
<li><code>cudaMallocManaged</code>申请内存只是表示预定了一段空间，统一内存的实际分配发生在第一次访问预留的内存时</li>
</ul>
</li>
<li>
<p>优化使用统一内存的程序</p>
<ul>
<li>可以手动给编译期一些提示，避免数据缺页、内存抖动，保持数据局部性等，可以使用<code>cudaMemAdvice</code>和<code>cudaMemPrefetchAsync</code></li>
<li><code>cudaError_t cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream)</code>
<ul>
<li>在CUDA流中将统一内存缓冲区devPtr内count字节的内存迁移到设备dstDevice（<code>cudaCpuDeviceId</code>表示主机的设备号）中的内存区域，从而防止或减少缺页异常，提高数据局部性</li>
<li>尽可能多的使用<code>cudaMemPrefetchAsync</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>优势：</p>
<ul>
<li>简化编程
<ul>
<li>编程更简单：比如之前多GPU，针对某一个数据使用零拷贝内存，每个设备都需要有对应的一个指针，容易混乱（针对零拷贝的改进）</li>
<li>方便代码移植</li>
<li>支持更完整的C++语言要素：比如核函数参数可以使用引用，可以直接使用拷贝构造函数而不用手工进行拷贝或进行很多重载</li>
</ul>
</li>
<li>可能会提供比手工移动数据更好的性能，比如可能会将某部分数据放置到离某个存储器更近的位置
<ul>
<li>可以进行超量分配，超出GPU显存的部分可以放在主机内存中（但是反过来不行）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[cuda-learning-notes] 流和同步</title>
      <link>https://qinganzhang.github.io/posts/cuda-learning-notes/%E6%B5%81%E5%92%8C%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Fri, 01 Mar 2024 22:01:43 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/cuda-learning-notes/%E6%B5%81%E5%92%8C%E5%90%8C%E6%AD%A5/</guid>
      <description>CUDA事件 事件：标记stream执行过程的某个特定的点，比如用于计时 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cudaEvent_t start, stop; CHECK(cudaEventCreate(&amp;amp;start)); // 创建cuda 事件对象。 CHECK(cudaEventCreate(&amp;amp;stop)); CHECK(cudaEventRecord(start, 0)); //</description>
      <content:encoded><![CDATA[<h2 id="cuda事件">CUDA事件</h2>
<ul>
<li>事件：标记stream执行过程的某个特定的点，比如用于计时
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:22:38.png" style="zoom: 50%;" /></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">cudaEvent_t</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">start</span><span class="p">));</span> <span class="c1">// 创建cuda 事件对象。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stop</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventRecord</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>  <span class="c1">// 将事件start关联到指定的流0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">cudaEventQuery</span><span class="p">(</span><span class="n">start</span><span class="p">);</span>  <span class="c1">// 强制刷新 cuda 执行流，因为WDDM模式下，CUDA流中的操作显式提交到一个软件队列中（TCC模式不用）
</span></span></span><span class="line"><span class="cl"><span class="c1">// 此处不能使用CHECK，因为它可能返回cudaErrorNotReady，但是又不代表程序出错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// run code.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventRecord</span><span class="p">(</span><span class="n">stop</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventSynchronize</span><span class="p">(</span><span class="n">stop</span><span class="p">));</span> <span class="c1">// 强制同步，让主机等待cuda事件执行完毕。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">float</span> <span class="n">elapsed_time</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="nf">CHECK</span><span class="p">(</span><span class="nf">cudaEventElapsedTime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">elapsed_time</span><span class="p">,</span> <span class="n">start</span><span class="p">,</span> <span class="n">stop</span><span class="p">));</span> <span class="c1">// 计算 start 和stop间的时间差（ms）。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">CHEKC</span><span class="p">(</span><span class="nf">cudaEventDestroy</span><span class="p">(</span><span class="n">start</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="nf">CHEKC</span><span class="p">(</span><span class="nf">cudaEventDestroy</span><span class="p">(</span><span class="n">stop</span><span class="p">));</span>    
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="cuda流">CUDA流</h2>
<ul>
<li>
<p>CUDA流：由主机发出的、在一个设备中执行的CUDA操作序列</p>
<ul>
<li><code>kernal_func&lt;&lt;&lt;grid_size, block_size, 0, stream&gt;&gt;&gt;(params);</code></li>
<li>一个CUDA流中各个操作的次序是由主机控制的，但是来自于两个不同CUDA流中的操作顺序无法确定</li>
<li>任何CUDA操作都存在于某个CUDA流中，要么是默认流（也成为空流），要么明确指定的流</li>
</ul>
</li>
<li>
<p>相关函数</p>
<ul>
<li><code>cudaError_t cudaStreamCreate(cudaStream_t *stream);</code></li>
<li><code>cudaError_t cudaStreamDestory(cudaStream_t stream);</code></li>
<li><code>cudaError_t cudaStreamSynchronize(cudaStream_t stream);</code>
<ul>
<li>同步等待一个流中的所有操作完成</li>
</ul>
</li>
<li><code>cudaError_t cudaStreamQuery(cudaStream_t stream);</code>
<ul>
<li>查询一个流中的操作是否全部完成，不会阻塞；若是，则返回 <code>cudaSuccess</code>;  否则，返回 <code>cudaErrorNotReady</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="stream对并行性的影响">Stream对并行性的影响</h3>
<ul>
<li>调度队列的个数：
<ul>
<li>单调度队列：虽然Fermi架构支持最多16个流，但是实际调度过程中，所有的流被塞进同一个调度队列，当选中一个操作执行时，runtime会查看操作之间的依赖关系，如果当操作依赖于前面的操作，而且由于只有一个调度队列，因此调度队列阻塞（后面所有操作都等待，即使这些操作来自不同的流）
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:02:57.png" alt="image-20231205220257004" style="zoom:40%;" /></li>
<li>Hyper-Q：最多32个调度队列和32个流
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:03:46.png" alt="image-20231205220346922" style="zoom:40%;" />
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-28-13:49:52.png" alt="image-20231228134952484" style="zoom: 33%;" /></li>
</ul>
</li>
<li>多个流的操作的发射顺序
<ul>
<li>左边将多个流以DFS方式发射，右边将多个流以BFS方式发射
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:22:17.png" alt="image-20231205222217200" style="zoom:40%;" /></li>
<li>以DFS方式发射时，流的发射顺序对并行性有影响
<ul>
<li>每种资源都有一个队列</li>
<li>每个流内部很可能有依赖关系</li>
<li>比如先发射Stream1，后发射Stream2：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:16:45.png" alt="image-20231205221645005" style="zoom: 40%;" /></li>
<li>比如先发射Stream2，后发射Stream1：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:17:33.png" alt="image-20231205221733253" style="zoom:40%;" /></li>
</ul>
</li>
</ul>
</li>
<li>每个操作操作具体占用的资源大小差异对并行性也有影响
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-22:25:42.png" alt="image-20231205222542219" style="zoom: 40%;" /></li>
</ul>
<h3 id="使用流隐藏延迟">使用流隐藏延迟</h3>
<h4 id="在默认流中重叠主机和设备计算">在默认流中重叠主机和设备计算</h4>
<ul>
<li>一些cuda runtime api具有隐式同步的效果（比如<code>cudaMemcpy</code>函数），会导致主机阻塞等待</li>
<li>核函数的调用是非阻塞的</li>
</ul>
<h4 id="用多个流重叠多个核函数的执行">用多个流重叠多个核函数的执行</h4>
<ul>
<li>制约加速比的因素：（假设每个CUDA流都执行相同规模的计算）
<ul>
<li>GPU的计算资源（SM数量，每个SM最多允许的线程数量）
<ul>
<li>当CUDA流较少时，增加CUDA流的数量，总耗时只是略微增加，加速比线性增加，此时加速比没有饱和</li>
<li>当CUDA流的个数到达瓶颈，继续增加CUDA流的数量时，总耗时线性增加，加速比饱和
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:24:15.png" style="zoom:80%;" /></li>
</ul>
</li>
<li>单个GPU中能够并发运行的核函数个数的上限
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:24:16.png" style="zoom:80%;" />
<ul>
<li>比如此时能够并发运行的核函数上限为32，Tesla K40有15个SM，每个SM最多允许2048个线程</li>
<li>比如此时一个核函数开1024线程，理论上最多并发运行的核函数$=\min{ \frac{15\times2048}{1024}, 32}=30$，此时限制因素为GPU的计算资源</li>
<li>比如此时一个核函数开128线程，理论上最多并发运行的核函数$=\min { \frac{15 \times 2048}{128}, 32 }=32$，此时限制因素为并发运行核函数的上限</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li>《CUDA编程：基础与实践》</li>
</ul>
</li>
</ul>
<h4 id="用多个流重叠核函数的执行与数据传递">用多个流重叠核函数的执行与数据传递</h4>
<ul>
<li>将数据与相应操作分成若干份，每个流中依次进行操作，形成流水线
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:24:19.png" style="zoom:60%;" />
<ul>
<li>理论上最大加速比为3（假设H2D,KER,D2H运行时间相同）</li>
</ul>
</li>
</ul>
<h2 id="同步">同步</h2>
<h3 id="核函数或grid之间的同步">核函数（或grid）之间的同步</h3>
<ul>
<li>背景：连续发射两个核函数，其调度行为未知
<ul>
<li>使用cuda graph显示指定核函数调度顺序（？不确定）</li>
</ul>
</li>
<li>相关函数
<ul>
<li><code>cudaDeviceSynchronize</code>：阻塞host端，直到所有的kernel调用完毕
<ul>
<li>原理是device设置了<code>cudaDeviceScheduleBlockingSync</code>标志，将host线程阻塞</li>
<li>在device中使用 <code>cudaDeviceSynchronize</code>已经被逐渐废弃</li>
</ul>
</li>
<li><code>cudaStreamSynchornize</code>：阻塞host端，直到流中的kernel调用完毕</li>
<li><code>cudaSetDeviceFlags</code>：记录标志，作为活动的host线程执行device代码时使用的标志</li>
<li><code>cudaLaunchKernel</code>：在CPU端使用<code>&lt;&lt;&lt;&gt;&gt;&gt;</code>launch核函数时，实际上调用的是该函数，launch核函数到GPU上执行</li>
</ul>
</li>
</ul>
<h3 id="线程块或block内部的同步">线程块（或Block）内部的同步</h3>
<ul>
<li>barrier：<code>__syncthreads()</code>同步Block内所有线程
<ul>
<li>注意死锁问题：<code>__syncthreads</code>必须能被块内所有线程访问到，即不要将<code>__syncthreads</code>放到if-else语句中</li>
</ul>
</li>
<li><code>__syncthreads</code>的变种：<code>syncthreads_xxx(int predicate)</code>
<ul>
<li>与<code>__syncthreads</code>相同，但是有一个额外的功能：</li>
<li>predicate是一个条件表达式，该变种函数对所有线程评估predicate：
<ul>
<li><code>__syncthreads_or</code>：如果有任意一个线程的predicate值非零，返回非零</li>
<li><code>__syncthreads_and</code>：如果对所有线程的predicate值非零，返回非零</li>
<li><code>__syncthreads_count</code>：统计所有线程中predicate值非零的线程数量</li>
</ul>
</li>
<li>应用：last-block guard确定最后一个线程块（编号最后的线程块未必是最后运行结束的）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">bool</span> <span class="nf">lastBlock</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">counter</span><span class="p">){</span> <span class="c1">// 方法一：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">__shared__</span> <span class="kt">int</span> <span class="n">last</span><span class="p">;</span>  <span class="c1">// 表示当前已经调度发射了多少个线程块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">__threadfence</span><span class="p">();</span> <span class="c1">// 确保之前计算的结果已经写入内存，对所有线程块可见
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// 每个块中第一个线程维护last的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">last</span> <span class="o">=</span> <span class="nf">atomicAdd</span><span class="p">(</span><span class="n">counter</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 原子更新全局内存中的变量，将更新后的值返回到共享内存中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 块内所有线程同步，有必要。如果没有线程块内同步，则一个线程块内对last的访问有的是新值，有的是旧值，但是又必须要求一个线程块内部的last值都相同。注意没有保证不同的线程块之间是同步的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">last</span> <span class="o">==</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">bool</span> <span class="nf">lastBlock</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span> <span class="n">counter</span><span class="p">){</span> <span class="c1">// 方法二：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">__threadfence</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 寄存器变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">last</span> <span class="o">=</span> <span class="nf">atomicAdd</span><span class="p">(</span><span class="n">counter</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 块内线程不需要完全同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="nf">__syncthreads_or</span><span class="p">(</span><span class="n">last</span> <span class="o">==</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 仍需要使用__syncthreads_or，因为一个线程块内部，只有0号线程的last是用来维护计数的。因此只要0号线程计算完即可确定当前线程块是否为最后一个
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="线程块或block之间的同步">线程块（或Block）之间的同步</h3>
<h4 id="全局锁原子操作">全局锁+原子操作</h4>
<p>线程块内选一个代表，通过维护锁变量，代表先进行同步，从而线程块同步</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="k">volatile</span> <span class="kt">int</span> <span class="n">g_mutex</span><span class="p">;</span> <span class="c1">// 全局锁变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">__deviec__</span> <span class="kt">void</span> <span class="nf">__gpu_sync</span><span class="p">(</span><span class="kt">int</span> <span class="n">goalVal</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tid_in_block</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">tid_in_block</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">// 每个线程块中的0号线程 作为线程块的代表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nf">atomicAdd</span><span class="p">((</span><span class="kt">int</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">g_mutex</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">g_mutex</span> <span class="o">!=</span> <span class="n">goalVal</span><span class="p">){</span> <span class="cm">/* Do nothing */</span><span class="p">}</span> <span class="c1">// 死循环，直到g_mutex到达goalVal的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 这里，goalVal个线程块之间达成同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="无锁方法">无锁方法</h4>
<ul>
<li>将块间同步转换为块内同步
<ul>
<li>为每个线程块分配一个同步变量，形成一个数组<code>Arrayin</code>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-11:22:43.png" style="zoom:40%;" /></li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">void</span> <span class="nf">__gpu_sync</span><span class="p">(</span><span class="kt">int</span> <span class="n">goalVal</span><span class="p">,</span> <span class="k">volatile</span> <span class="kt">int</span><span class="o">*</span> <span class="n">Arrayin</span><span class="p">,</span> <span class="k">volatile</span> <span class="kt">int</span><span class="o">*</span> <span class="n">Arrayout</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tid_in_block</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="c1">// 线程在block中的id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">nBlockNum</span> <span class="o">=</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="c1">// block数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">bid</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">gridDim</span><span class="p">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">y</span><span class="p">;</span> <span class="c1">// 线程块id
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">tid_in_block</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// 每个线程块的0号线程，基于自己线程块的索引，更新Arrayin数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Arrayin</span><span class="p">[</span><span class="n">bid</span><span class="p">]</span> <span class="o">=</span> <span class="n">goalVal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 0号线程块进行控制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">bid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">// 将块间同步转换为线程块0号内部的块内同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">tid_in_block</span> <span class="o">&lt;</span> <span class="n">nBlockNum</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 0号线程块中，每个线程控制一个线程块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">while</span><span class="p">(</span><span class="n">Arrayin</span><span class="p">[</span><span class="n">tid_in_block</span><span class="p">]</span> <span class="o">!=</span> <span class="n">goalVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do nothing */</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 0号线程块内进行同步。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 0号线程块执行到这里，表示所有线程块已经完成初始化Arrayin数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">tid_in_block</span> <span class="o">&lt;</span> <span class="n">nBlockNum</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">Arrayout</span><span class="p">[</span><span class="n">tid_in_block</span><span class="p">]</span> <span class="o">=</span> <span class="n">goalVal</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">tid_in_block</span> <span class="o">==</span> <span class="mi">0</span><span class="p">){</span> <span class="c1">// 每个线程块的0号线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span><span class="p">(</span><span class="n">Arrayout</span><span class="p">[</span><span class="n">bid</span><span class="p">]</span> <span class="o">!=</span> <span class="n">goalVal</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* Do nothing */</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 同步所有块内线程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="内存fence">内存fence</h4>
<ul>
<li>背景：CUDA 编程模型假定了一种<a href="https://zhuanlan.zhihu.com/p/94421667">弱顺序(weakly-ordered)</a>一致性的内存模型</li>
</ul>
<blockquote>
<ul>
<li>内存一致性（memory consistency）：访存操作在全局中生效（或观察到的）顺序问题， 是指令集所规范的，是软硬件接口的一部分</li>
<li>缓存一致性（cache coherence）：同一个地址在不同的缓存中一致性问题，是完全的硬件实现策略，程序员无关，是集成电路设计者考虑的东西。</li>
</ul>
</blockquote>
<ul>
<li>内存fence：读写操作可能进行重排or优化，添加fence之后，fence之前的op一定比fence之后的op先执行。即抑制编译器重排、抑制乱序。</li>
</ul>
<blockquote>
<ul>
<li>内存fence：The CUDA programming model assumes a device with a weakly-ordered memory model. Memory fence functions can be used to enforce a <a href="https://en.cppreference.com/w/cpp/atomic/memory_order">sequentially-consistent</a> ordering on memory accesses.</li>
<li><code>volatile</code>：声明一个变量，防止编译器优化，防止这个变量存入缓存，如果恰好此时被其他线程改写，那就会造成内存缓存不一致的错误，所以volatile声明的变量始终在全局内存中。</li>
</ul>
</blockquote>
<ul>
<li>内存fence只会影响自己线程中内存操作的顺序，保证自己的数据fence后能够被其他线程安全的访问，并不能像<code>__syncthreads</code>那样保证内存操作对于同block中的其他线程可见</li>
<li>相关函数
<ul>
<li><code>__threadfence_block()</code>：该函数调用后，该线程在此语句前对全局存储器或共享存储器的访问已经全部完成，且结果对block内所有线程可见。</li>
<li><code>__threadfence()</code>：该函数调用后，该线程在此语句前对全局存储器或共享存储器的访问已经全部完成，且结果对grid内所有线程可见。</li>
<li><code>__threadfence_system()</code>：该函数调用后，该线程在此语句前对全局存储器或共享存储器的访问已经全部完成，且结果对system（CPU+GPU）内所有线程可见。</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://www.bilibili.com/read/cv18722474/">CUDA内存栅栏（Memory Fence）理解</a></li>
</ul>
</li>
</ul>
<h3 id="warp同步">warp同步</h3>
<h4 id="warp内inter-warp同步">warp内（inter-warp）同步</h4>
<ul>
<li>
<p>barrier：<code>__syncwarps()</code>同步一个warp中的线程</p>
</li>
<li>
<p>线程束内函数都有 <code>_sync</code> 后缀，表示这些函数都具有隐式的同步功能。</p>
<ul>
<li>线程束表决函数（warp vote functions）
<ul>
<li><code>unsigned __ballot_sync(unsigned mask, int predicate)</code>：如果线程束内第n个线程参与计算（旧掩码）且predicate值非零，则返回的无符号整型数（新掩码）的第n个二进制位为1，否则为0</li>
<li><code>int __all_sync(unsigned mask, int predicate)</code>：线程束内所有参与线程的predicate值均非零，则返回1，否则返回0</li>
<li><code>int __any_sync(unsigned mask, int predicate)</code>：线程束内所有参与线程的predicate值存在非零，则返回1， 否则返回0</li>
</ul>
</li>
<li>线程束匹配函数（warp match functions）</li>
<li>线程束洗牌函数（warp shuffle functions）：最后一个参数表示逻辑上的warp大小
<ul>
<li><code>T __shfl_sync(unsigned mask, T v, int srcLane, int w = warpSize)</code>：参与线程返回标号为 srcLane 的线程中变量 v 的值。该函数将一个线程中的数据广播到所有线程。</li>
<li><code>T __shfl_up_sync(unsigned mask, T v, unsigned d, int w=warpSize)</code>：标号为t的参与线程返回标号为 t-d 的线程中变量v的值，t-d&lt;0的线程返回t线程的变量v。该函数是一种将数据向上平移的操作，即将低线程号的值平移到高线程号。
<ul>
<li>例如当w=8、d=2时，2-7号线程将返回 0-5号线程中变量v的值；0-1号线程返回自己的 v。</li>
</ul>
</li>
<li><code>T __shfl_down_sync(unsigned mask, T v, unsigned d, int w=warpSize)</code>：标号为t的参与线程返回标号为 t+d 的线程中变量v的值，t+d&gt;w的线程返回t线程的变量v。该函数是一种将数据向下平移的操作，即将高线程号的值平移到低线程号。</li>
</ul>
<ul>
<li>例如当w=8、d=2时，0-5号线程将返回2-7号线程中变量v的值，6-7号线程将返回自己的 v。</li>
</ul>
<ul>
<li><code>T __shfl__xor_sync(unsigned mask, T v, int laneMask, int w=warpSize)</code>：标号为t的参与线程返回标号为 t^laneMask 的线程中变量 v 的值。该函数让线程束内的线程两两交换数据。</li>
</ul>
</li>
<li>线程束矩阵函数（warp matrix functions）</li>
</ul>
</li>
<li>
<p>例子：使用warp shuffle函数进行规约：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">reduce_shfl</span><span class="p">(</span><span class="k">const</span> <span class="n">real</span> <span class="o">*</span><span class="n">d_x</span><span class="p">,</span> <span class="n">real</span> <span class="o">*</span><span class="n">d_y</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">tid</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// tid从0到blockDim.x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">const</span> <span class="kt">int</span> <span class="n">bid</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">tid</span> <span class="o">+</span> <span class="n">bid</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">extern</span> <span class="n">__shared__</span> <span class="n">real</span> <span class="n">s</span><span class="p">[];</span> <span class="c1">// 比如大小128
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span> <span class="o">?</span> <span class="n">d_x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">:</span> <span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">unsigned</span> <span class="n">FULL_MASK</span> <span class="o">=</span> <span class="mh">0xffffffff</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 线程块同步函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;=</span> <span class="mi">32</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">&lt;</span> <span class="n">offset</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">tid</span> <span class="o">+</span> <span class="n">offset</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__syncthreads</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">real</span> <span class="n">y</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span> <span class="o">+=</span> <span class="nf">__shfl_down_sync</span><span class="p">(</span><span class="n">FULL_MASK</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">offset</span><span class="p">);</span> <span class="c1">// 线程tid返回线程tid+offset中寄存器变量y的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">atomicAdd</span><span class="p">(</span><span class="n">d_y</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h4 id="协作组">协作组</h4>
<p>协作组（cooperative groups）:提供了线程块以上级别的同步</p>
<ul>
<li>
<p><code>thread_group</code></p>
<ul>
<li>协作组编程模型中最基本的类型，是线程块级别的协作组</li>
<li>成员函数：
<ul>
<li><code>void sync()</code>，同步组内所有线程；（相当于<code>__syncthreads</code>函数）</li>
<li><code>unsigned size()</code>，返回组内总的线程数目，即组的大小；</li>
<li><code>unsigned thread_rank()</code>，返回当前调用该函数的线程在组内的标号（从0计数）</li>
<li><code>bool is_valid()</code>，如果定义的组违反了任何cuda限制，返回 false，否则true</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>thread_block</code>继承于<code>thread_group_base&lt;T&gt;</code>，<code>thread_group_base&lt;T&gt;</code>继承于<code>thread_group</code></p>
<ul>
<li><code>dim3 group_index()</code>，返回当前调用该函数的线程的线程块指标，等价于 <code>blockIdx</code>；</li>
<li><code>dim3 thread_index()</code>，返回当前调用该函数的线程的线程指标，等价于 <code>threadIdx</code>；</li>
<li><code>this_thread_block()</code>：初始化一个<code>thread_block</code>对象</li>
<li><code>tiled_partition()</code> ：将一个<code>thread_block</code>划分为若干片（tile），每片构成一个<code>thread_group</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cooperative_groups.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">using</span> <span class="n">namespace</span> <span class="n">cooperative_groups</span><span class="p">;</span> <span class="c1">// 相关变量和函数定义在该命名空间下
</span></span></span><span class="line"><span class="cl"><span class="c1">// namespace cg = cooperative_groups; // 取别名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="n">thread_block</span> <span class="n">g</span> <span class="o">=</span> <span class="nf">this_thread_block</span><span class="p">();</span>  <span class="c1">// g相当于一个之前的线程块，这里将其包装为一个类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">thread_group</span> <span class="n">myWarp</span> <span class="o">=</span> <span class="nf">tiled_partition</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="mi">32</span><span class="p">);</span> <span class="c1">// 将thread_block划分为thread_group
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">thread_group</span> <span class="n">g4</span> <span class="o">=</span> <span class="nf">tiled_partition</span><span class="p">(</span><span class="n">myWarp</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="c1">// 可以将thread_group进一步细分
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>thread_block_tile</code></p>
<ul>
<li>使用模板，在编译期划分 <strong>线程块片（thread block tile）</strong>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">thread_block_tile</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span> <span class="n">g32</span> <span class="o">=</span> <span class="n">tiled_partition</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span><span class="p">(</span><span class="nf">this_thread_block</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="n">thread_block_tile</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span> <span class="n">g4</span> <span class="o">=</span> <span class="n">tiled_partition</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">&gt;</span><span class="p">(</span><span class="nf">this_thread_block</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>线程块片具有额外的函数（类似线程束内函数）：</p>
<ul>
<li><code>unsigned ballot(int predicate)</code>;</li>
<li><code>int all(int predicate)</code>;</li>
<li><code>int any(int predicate)</code>;</li>
<li><code>T shfl(T v, int srcLane)</code>;</li>
<li><code>T shfl_up(T v, unsigned d)</code>;</li>
<li><code>T shfl_down(T v, unsigned d)</code>;</li>
<li><code>T shfl_xor(T v, unsigned d)</code>;</li>
</ul>
<ul>
<li>与一般的线程束不同，线程组内的所有线程都要参与代码运行计算；同时，线程组内函数不需要指定宽度，因为该宽度就是线程块片的大小。</li>
</ul>
</li>
<li>
<p>例子：使用协作组进行规约：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">reduce_cp</span><span class="p">(</span><span class="k">const</span> <span class="n">real</span> <span class="o">*</span><span class="n">d_x</span><span class="p">,</span> <span class="n">real</span> <span class="o">*</span><span class="n">d_y</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">tid</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span> <span class="c1">// tid从0到blockDim.x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">const</span> <span class="kt">int</span> <span class="n">bid</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">tid</span> <span class="o">+</span> <span class="n">bid</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">extern</span> <span class="n">__shared__</span> <span class="n">real</span> <span class="n">s</span><span class="p">[];</span> <span class="c1">// 比如大小128
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span> <span class="o">?</span> <span class="n">d_x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">:</span> <span class="mf">0.0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 线程块同步函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;=</span> <span class="mi">32</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">&lt;</span> <span class="n">offset</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">            <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">+=</span> <span class="n">s</span><span class="p">[</span><span class="n">tid</span> <span class="o">+</span> <span class="n">offset</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__syncthreads</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">real</span> <span class="n">y</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">tid</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">thread_block_tile</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">tiled_patition</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span><span class="p">(</span><span class="nf">this_thread_block</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">y</span> <span class="o">+=</span> <span class="n">g</span><span class="p">.</span><span class="nf">shfl_down</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span> <span class="c1">// 使用协作组的成员函数与使用warp shuffle函数具有等价的执行效率
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">atomicAdd</span><span class="p">(</span><span class="n">d_y</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>more</p>
<ul>
<li><a href="https://www.zhihu.com/question/586453330/answer/3232856921">https://www.zhihu.com/question/586453330/answer/3232856921</a></li>
</ul>
</li>
</ul>
<h3 id="原子操作">原子操作</h3>
<ul>
<li>两类原子函数：
<ul>
<li>atomicAdd_system：将原子函数的作用范围拓展到所有节点（host和device）</li>
<li>atomicAdd_block：将原子函数的作用范围缩小至一个线程块</li>
<li>一个特殊的原子函数：<code>atomicCAS</code>，所有其他原子函数都可以使用它来实现</li>
</ul>
</li>
<li>相关语法：
<ul>
<li>原子函数的返回值都是原来的旧值</li>
<li>原子函数都是<code>__device__</code>函数，只能在核函数中使用</li>
<li>原子函数操作的地址可以位于全局内存，也可以位于共享内存</li>
<li>原子操作开销与是否存在竞争相关，且参与竞争者越少，开销越小</li>
</ul>
</li>
<li>例子：使用原子函数进行规约
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">__global__</span> <span class="nf">reduce_shared</span><span class="p">(</span><span class="n">real</span> <span class="o">*</span><span class="n">d_x</span><span class="p">,</span> <span class="n">real</span> <span class="o">*</span><span class="n">d_y</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">tid</span> <span class="o">=</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">bid</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">blockIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">threadIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">extern</span> <span class="n">__shared__</span> <span class="n">real</span> <span class="n">s_y</span><span class="p">[];</span> <span class="c1">// 动态共享内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">s_y</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">)</span> <span class="o">?</span> <span class="n">d_x</span><span class="p">[</span><span class="n">n</span><span class="p">]</span> <span class="o">:</span> <span class="mf">0.0</span><span class="p">;</span> <span class="c1">// 将全局内存中的数据拷贝到线程块对应的共享内存中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">__syncthreads</span><span class="p">();</span> <span class="c1">// 保证一个线程块中的同步，但是不能保证不同线程块之间的同步
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">offset</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">&lt;</span> <span class="n">offset</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">s_y</span><span class="p">[</span><span class="n">tid</span><span class="p">]</span> <span class="o">+=</span> <span class="n">s_y</span><span class="p">[</span><span class="n">tid</span> <span class="o">+</span> <span class="n">offset</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="nf">__syncthreads</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">tid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nf">atomicAdd</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_y</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">s_y</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span> <span class="c1">// 使用原子操作，将结果累加到d_y[0]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[cuda-learning-notes] 工具使用和profile</title>
      <link>https://qinganzhang.github.io/posts/cuda-learning-notes/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%92%8Cprofile/</link>
      <pubDate>Fri, 01 Mar 2024 22:01:33 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/cuda-learning-notes/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E5%92%8Cprofile/</guid>
      <description>工具 nvidia-smi -L：显示设备名称，精简信息 -q -i 0：显示0号设备详细状态信息 -q -i 0 -d MEMORY：从详细状态信息中提取某类信息（比如MEMORY、CO</description>
      <content:encoded><![CDATA[<h2 id="工具">工具</h2>
<h3 id="nvidia-smi">nvidia-smi</h3>
<ul>
<li>
<p><code>-L</code>：显示设备名称，精简信息</p>
</li>
<li>
<p><code>-q -i 0</code>：显示0号设备详细状态信息</p>
</li>
<li>
<p><code>-q -i 0 -d MEMORY</code>：从详细状态信息中提取某类信息（比如MEMORY、COMPUTE、UTILIZATION等）</p>
</li>
<li>
<p>部分字段含义：</p>
<ul>
<li><code>GPU-util</code>：For a given time period, it reports what percentage of time one or more GPU kernel(s) was active (i.e. running).
<ul>
<li><a href="https://stackoverflow.com/questions/40937894/nvidia-smi-volatile-gpu-utilization-explanation">nvidia-smi Volatile GPU-Utilization explanation?</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="nsight-systemnsys">Nsight System(nsys)</h3>
<ul>
<li>
<p><code>nsys profile ./hello_world</code></p>
</li>
<li>
<p><code>--trace cuda</code></p>
</li>
<li>
<p><code>--gpu-metrics-device 0</code></p>
</li>
<li>
<p><code>--stats true</code></p>
</li>
<li>
<p>如何检测achieved_occupancy活跃线程束比例， gld_throughput内存利用率</p>
</li>
<li>
<p><a href="https://face2ai.com/CUDA-F-3-3-%E5%B9%B6%E8%A1%8C%E6%80%A7%E8%A1%A8%E7%8E%B0/">https://face2ai.com/CUDA-F-3-3-%E5%B9%B6%E8%A1%8C%E6%80%A7%E8%A1%A8%E7%8E%B0/</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/589120507">https://zhuanlan.zhihu.com/p/589120507</a></p>
</li>
<li>
<p>nvprof是旧的分析工具，不支持8.0以上的GPU，其功能拆分给nsys和ncu</p>
<ul>
<li><code>nsys nvprof</code>：统计cuda api和cuda kernel的耗时和相关配置</li>
<li><code>ncu --metrics</code>：统计得到metrics</li>
</ul>
</li>
</ul>
<h3 id="nsight-computencu">Nsight Compute(ncu)</h3>
<ul>
<li>几种常规用法：很可能需要sudo权限
<ul>
<li>分析某几个指标：<code>ncu --metrics </code>
<ul>
<li><code>ncu --query-metrics</code>可以列出分析的指标</li>
</ul>
</li>
<li>得到profile的全部信息：<code>ncu --set full --import-source yes --target-processes all -o profile_file</code>
<ul>
<li><code>--set full</code>：profile全部信息
<ul>
<li><code>ncu --list-sets</code>可以查看支持的section，每个section是一些metric的集合</li>
</ul>
</li>
<li><code>--import-source yes</code>：在服务器端跑出profile，然后copy到本地gui中进行查看</li>
<li><code>-o &lt;output_file_name&gt;</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="metrics">metrics</h4>
<ul>
<li>
<p>metrics：performance counter，性能统计的指标</p>
</li>
<li>
<p><a href="https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-structure">metrics structure</a></p>
<ul>
<li>peak rete：每个counter都有两类peak rete
<ul>
<li>burst rate：the maximum rate reportable in a single clock cycle</li>
<li>sustained rate：the maximum rate achievable over an infinitely long measurement period</li>
</ul>
</li>
<li>metrics entities
<ul>
<li>counter：直接从GPU而来的统计量
<ul>
<li>每个counter都有四个sub-metrics，叫做roll-ups
<ul>
<li>sum，avg，min，max</li>
</ul>
</li>
<li>有一些可以从counter roll-ups计算而来的sub-metrics
<ul>
<li>比如<code>.peak_sustained</code></li>
</ul>
</li>
</ul>
</li>
<li>ratio：有三个sub-metrics
<ul>
<li>pct，ratio，max_rate</li>
</ul>
</li>
<li>throughputs：标识一个portion接近peak rate的程度，有四个sub-metrics
<ul>
<li>比如<code>.pct_of_peak_sustained_active</code></li>
</ul>
</li>
</ul>
</li>
<li>ncu的metrics与nvprof的metrics不相同，存在一定的<a href="https://docs.nvidia.com/nsight-compute/NsightComputeCli/index.html#nvprof-metric-comparison">对应关系</a>。常用的对应关系
<table>
<thead>
<tr>
<th style="text-align:center">nvprof</th>
<th style="text-align:center">ncu</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">achieved_occupancy</td>
<td style="text-align:center">sm__warps_active.avg.pct_of_peak_sustained_active</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gld_throughput</td>
<td style="text-align:center">l1tex__t_bytes_pipe_lsu_mem_global_op_ld.sum.per_second</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gst_throughput</td>
<td style="text-align:center">l1tex__t_bytes_pipe_lsu_mem_global_op_st.sum.per_second</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gld_efficiency</td>
<td style="text-align:center">smsp__sass_average_data_bytes_per_sector_mem_global_op_ld.pct</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gst_efficiency</td>
<td style="text-align:center">smsp__sass_average_data_bytes_per_sector_mem_global_op_st.pct</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gld_transactions</td>
<td style="text-align:center">l1tex__t_sectors_pipe_lsu_mem_global_op_ld.sum</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gst_transactions</td>
<td style="text-align:center">l1tex__t_sectors_pipe_lsu_mem_global_op_st.sum</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gld_transactions_per_request</td>
<td style="text-align:center">l1tex__average_t_sectors_per_request_pipe_lsu_mem_global_op_ld.ratio</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">gst_transactions_per_request</td>
<td style="text-align:center">l1tex__average_t_sectors_per_request_pipe_lsu_mem_global_op_st.ratio</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shared_efficiency</td>
<td style="text-align:center">smsp__sass_average_data_bytes_per_wavefront_mem_shared.pct</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shared_load_throughput</td>
<td style="text-align:center">l1tex__data_pipe_lsu_wavefronts_mem_shared_op_ld.sum.per_second</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shared_load_transactions</td>
<td style="text-align:center">l1tex__data_pipe_lsu_wavefronts_mem_shared_op_ld.sum</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shared_store_throughput</td>
<td style="text-align:center">l1tex__data_pipe_lsu_wavefronts_mem_shared_op_st.sum.per_second</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">shared_store_transactions</td>
<td style="text-align:center">l1tex__data_pipe_lsu_wavefronts_mem_shared_op_st.sum.per_second</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">inst_per_warp</td>
<td style="text-align:center">smsp__average_inst_executed_per_warp.ratio</td>
<td style="text-align:center">比如if分支优化之后，分支减少，inst_per_warp会减少很多</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
<li>
<p>metrics命名规则和<a href="https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder">对应实体</a></p>
</li>
<li>
<p>其他</p>
<ul>
<li>常见报错：<code>Error: ERR_NVGPUCTRPERM - The user does not have permission to access NVIDIA GPU Performance Counters on the target device.</code>
<ul>
<li>官方解决方法：<a href="https://developer.nvidia.com/nvidia-development-tools-solutions-err_nvgpuctrperm-permission-issue-performance-counters"># NVIDIA Development Tools Solutions - ERR_NVGPUCTRPERM: Permission issue with Performance Counters</a></li>
<li>自己在<code>/etc/modprobe.d</code>下<code>touch nvidia-restrict-profiling.conf</code>并写入<code>options nvidia NVreg_RestrictProfilingToAdminUsers=0</code>，然后重启</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://docs.nvidia.com/nsight-compute/NsightComputeCli/index.html#nvprof-event-comparison">nvprof的metric与ncu的metric的对应关系</a></li>
<li><a href="https://docs.nvidia.com/nsight-compute/ProfilingGuide/index.html#metrics-decoder">ncu的metric中命名规则和说明</a></li>
<li><a href="https://docs.nvidia.com/cuda/profiler-users-guide/index.html#metrics-for-capability-7-x">nvprof的metric的说明</a></li>
<li><a href="https://blog.csdn.net/u013378687/article/details/130114918">nvprof的metric的说明（中文博客）</a></li>
</ul>
</li>
</ul>
<h3 id="cuda-memcheck">cuda-memcheck</h3>
<p>CUDA 提供了 CUDA-MEMCHECK 的工具集，包括 memcheck, racecheck, initcheck, synccheck.</p>
<pre><code>cuda-memcheck --tool memcheck [options] app-name [options]
</code></pre>
<p>对于 memcheck 工具，可以简化为：</p>
<pre><code>cuda-memcheck [options] app-name [options]
</code></pre>
<h2 id="实战">实战</h2>
<p>二维矩阵相加进行profile：https://face2ai.com/CUDA-F-3-3-%E5%B9%B6%E8%A1%8C%E6%80%A7%E8%A1%A8%E7%8E%B0/</p>
<p>reduce使用全局内存进行profile逐步优化：https://face2ai.com/CUDA-F-3-5-%E5%B1%95%E5%BC%80%E5%BE%AA%E7%8E%AF/</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>[cuda-learning-notes] GPU架构发展、兼容性和编译</title>
      <link>https://qinganzhang.github.io/posts/cuda-learning-notes/gpu%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E5%85%BC%E5%AE%B9%E6%80%A7%E5%92%8C%E7%BC%96%E8%AF%91/</link>
      <pubDate>Fri, 01 Mar 2024 22:00:30 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/cuda-learning-notes/gpu%E6%9E%B6%E6%9E%84%E5%8F%91%E5%B1%95%E5%85%BC%E5%AE%B9%E6%80%A7%E5%92%8C%E7%BC%96%E8%AF%91/</guid>
      <description>CUDA编译链和兼容性 兼容性 CPU与GPU的区别 CPU只有少量的计算核心，有更多晶体管用于数据缓存和流程控制， GPU有大量计算能力较弱的计算</description>
      <content:encoded><![CDATA[<h2 id="cuda编译链和兼容性">CUDA编译链和兼容性</h2>
<h3 id="兼容性">兼容性</h3>
<ul>
<li>
<p>CPU与GPU的区别</p>
<ul>
<li>CPU只有少量的计算核心，有更多晶体管用于数据缓存和流程控制，</li>
<li>GPU有大量计算能力较弱的计算核心，用于控制和缓存的晶体管较少</li>
</ul>
</li>
<li>
<p>GPU系列：</p>
<ul>
<li>Tesla系列：使用ECC内存，用于科学计算。后来也叫Data Center GPUs。</li>
<li>Quadro系列：专业级，用于OpenGL、CAD等需要高精度计算的场景。后来也叫Workstation GPUs。</li>
<li>GeForce系列：消费级，用于游戏和计算，但是没有ECC</li>
<li>Tegra系列：移动处理器</li>
<li>Jetson系列：嵌入式</li>
</ul>
</li>
<li>
<p>GPU架构、计算能力与对应系列</p>
<ul>
<li>计算能力（Compute Capability）决定了GPU硬件支持的功能，反映了设备支持的指令集及其他规范，也称SM version，注意GPU计算能力不等价于计算性能
<table>
<thead>
<tr>
<th style="text-align:center">架构</th>
<th style="text-align:center">计算能力Compute Capability</th>
<th style="text-align:center">发布时间</th>
<th style="text-align:center">Tesla系列</th>
<th style="text-align:center">Quadro系列</th>
<th style="text-align:center">GeForce系列</th>
<th style="text-align:center">Jetson系列</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Tesla</td>
<td style="text-align:center">X = 1</td>
<td style="text-align:center">2006</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Fermi</td>
<td style="text-align:center">X = 2</td>
<td style="text-align:center">2010</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Kepler</td>
<td style="text-align:center">X = 3</td>
<td style="text-align:center">2012</td>
<td style="text-align:center">Kepler K系列</td>
<td style="text-align:center">Quadro K系列</td>
<td style="text-align:center">GeForce 600/700系列</td>
<td style="text-align:center">Tegra K1</td>
</tr>
<tr>
<td style="text-align:center">Maxwell</td>
<td style="text-align:center">X = 5</td>
<td style="text-align:center">2014</td>
<td style="text-align:center">Maxwell M系列</td>
<td style="text-align:center">Quadro M系列</td>
<td style="text-align:center">GeForce 900系列</td>
<td style="text-align:center">Tegra X1</td>
</tr>
<tr>
<td style="text-align:center">Pascal</td>
<td style="text-align:center">X = 6</td>
<td style="text-align:center">2016</td>
<td style="text-align:center">Pascal P系列</td>
<td style="text-align:center">Quadro P系列</td>
<td style="text-align:center">GeForce 10系列</td>
<td style="text-align:center">Tegra X2</td>
</tr>
<tr>
<td style="text-align:center">Volta</td>
<td style="text-align:center">X = 7</td>
<td style="text-align:center">2017</td>
<td style="text-align:center">Tesla V系列</td>
<td style="text-align:center">-</td>
<td style="text-align:center">TITAN V</td>
<td style="text-align:center">AGX Xavier</td>
</tr>
<tr>
<td style="text-align:center">Turing</td>
<td style="text-align:center">X.Y = 7.5</td>
<td style="text-align:center">2018</td>
<td style="text-align:center">Tesla T系列</td>
<td style="text-align:center">Quadro RTX系列</td>
<td style="text-align:center">GeForce 16系列，GeForce 20系列</td>
<td style="text-align:center">AGX Xavier</td>
</tr>
<tr>
<td style="text-align:center">Ampere</td>
<td style="text-align:center">X = 8</td>
<td style="text-align:center">2020</td>
<td style="text-align:center">Tesla A系列</td>
<td style="text-align:center">RTX A系列</td>
<td style="text-align:center">GeForce 30系列</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Ada Lovelace</td>
<td style="text-align:center">X.Y = 8.9</td>
<td style="text-align:center">2022</td>
<td style="text-align:center">L4、L40</td>
<td style="text-align:center">RTX Ada系列</td>
<td style="text-align:center">GeForce 40系列</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">Hopper</td>
<td style="text-align:center">X = 9</td>
<td style="text-align:center">2022</td>
<td style="text-align:center">H100</td>
<td style="text-align:center"></td>
<td style="text-align:center">-</td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
</ul>
<h3 id="cuda开发平台">CUDA开发平台</h3>
<ul>
<li>CUDA 提供两个编程接口
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-15:12:04.png" alt="image-20231227151204463" style="zoom:50%;" />
<ul>
<li>CUDA driver API：low-level
<ul>
<li>CUDA (driver) library由NVIDIA driver安装，比如常用的共享库<code>libcuda.so</code>，对应头文件为<code>cuda.h</code>，里面提供的API称为CUDA driver API
<ul>
<li>同时可以看到NVIDIA driver的版本：<code>find / -name libcuda.*</code></li>
</ul>
</li>
<li>NVIDIA driver同时包含了<code>nvidia-smi</code>命令，可以看到NVIDIA driver的版本，以及当前NVIDIA driver支持的最高CUDA版本（向下兼容）</li>
<li>或者使用函数<code>cudaDriverGetVersion(int* driverVersion)</code></li>
</ul>
</li>
<li>CUDA runtime API：high-level
<ul>
<li>CUDA Runtime library由CUDA Toolkit安装，比如常用的共享库<code>libcudart.so</code>，对应头文件为<code>cuda_runtime.h</code>，里面提供的API称为CUDA runtime API
<ul>
<li><code>cuda_runtime_api.h</code>是纯C版本，<code>cuda_runtime.h</code>是C++版本</li>
<li>离线安装的CUDA工具包会默认携带与之匹配特定的驱动程序</li>
</ul>
</li>
<li>CUDA Toolkit中同时包含了一些工具比如编译器nvcc，<code>nvcc -V</code>显示的CUDA版本是runtime API版本
<ul>
<li>cuda driver API版本（即驱动支持的最高cuda版本）应该高于cuda runtime API版本（即当前安装的cuda toolkit版本）</li>
</ul>
</li>
<li>或者使用函数<code>cudaRuntimeGetVersion(int *runtimeVersion)</code></li>
</ul>
</li>
</ul>
</li>
<li>注意不要将GPU计算能力与CUDA (driver/runtime)版本混淆</li>
<li>参考
<ul>
<li><a href="https://leimao.github.io/blog/CUDA-Driver-VS-CUDA-Runtime/"># CUDA Driver VS CUDA Runtime</a></li>
<li><a href="https://blog.csdn.net/jslove1997/article/details/113737934"># cuda 的driver API 和 runtime API</a></li>
</ul>
</li>
</ul>
<h3 id="编译相关">编译相关</h3>
<h4 id="编译过程">编译过程</h4>
<ul>
<li>
<p><a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#the-cuda-compilation-trajectory">编译过程</a>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-23:36:39.png" alt="image-20231227233638914" style="zoom:67%;" /></p>
<ul>
<li>编译device code
<ul>
<li>首先将预处理之后的C++ code经过CICC compiler编译成PTX code
<ul>
<li>PTX可以视为虚架构的汇编，虚架构体现了应用程序对GPU计算能力的要求，版本尽量低，因此可以适用于更加广泛的GPU架构</li>
</ul>
</li>
<li>再使用ptxas (PTX optimizing assembler)，根据实架构，将PTX code编译成cubin二进制机器码
<ul>
<li>.cubin：CUDA device code binary file (CUBIN) for a single GPU architecture</li>
</ul>
</li>
<li>将PTX code和cubin放到fatbin.c文件中
<ul>
<li>.fatbin：CUDA fat binary file that may contain multiple PTX and CUBIN files</li>
</ul>
</li>
</ul>
</li>
<li>编译host code
<ul>
<li>将预处理之后的C++ code，使用cudafe++将host和device部分分离</li>
<li>分离后的host代码，结合device code部分得到的fatbin.c文件，进行编译
<ul>
<li>在host code看来，device code其实就是一段数据。</li>
</ul>
</li>
</ul>
</li>
<li>对每一个.cu文件都执行单独的host code和device code编译</li>
<li>链接：
<ul>
<li>使用nvlink将所有.o目标文件中的device code重新链接到一个cubin文件中，并通过fatbinary转换为.fatbin.c文件</li>
<li>将.fatbin.c文件，结合一些其他的文件，编译得到device code最终对应的目标文件</li>
<li>将host code的目标文件和device code最终的目标文件链接起来，得到最终的可执行文件</li>
</ul>
</li>
</ul>
</li>
<li>
<p>使用</p>
<ul>
<li>
<p>需要选项 <code>-arch=compute_XY</code> 指定一个PTX虚拟架构的计算能力，虚架构版本：<a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#virtual-architecture-feature-list">Virtual Architecture Feature List</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">Architecture</th>
<th style="text-align:center">虚架构</th>
<th style="text-align:center">实架构</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Maxwell</td>
<td style="text-align:center"><code>compute_50</code>，<code>compute_52</code>，<code>compute_53</code></td>
<td style="text-align:center"><code>sm_50</code>，<code>sm_52</code>，<code>sm_53</code></td>
</tr>
<tr>
<td style="text-align:center">Pascal</td>
<td style="text-align:center"><code>compute_60</code>，<code>compute_61</code>，<code>compute_62</code></td>
<td style="text-align:center"><code>sm_60</code>，<code>sm_61</code>，<code>sm_62</code></td>
</tr>
<tr>
<td style="text-align:center">Volta</td>
<td style="text-align:center"><code>compute_70</code>，<code>compute_72</code></td>
<td style="text-align:center"><code>sm_70</code>，<code>sm_72</code></td>
</tr>
<tr>
<td style="text-align:center">Turing</td>
<td style="text-align:center"><code>compute_75</code></td>
<td style="text-align:center"><code>sm_75</code></td>
</tr>
<tr>
<td style="text-align:center">Ampere</td>
<td style="text-align:center"><code>compute_80</code>，<code>compute_86</code>，<code>compute_87</code></td>
<td style="text-align:center"><code>sm_80</code>，<code>sm_86</code>，<code>sm_87</code></td>
</tr>
<tr>
<td style="text-align:center">Ada Lovelace</td>
<td style="text-align:center"><code>compute_89</code></td>
<td style="text-align:center"><code>sm_89</code></td>
</tr>
<tr>
<td style="text-align:center">Hopper</td>
<td style="text-align:center"><code>compute_90</code>，<code>compute_90a</code></td>
<td style="text-align:center"><code>sm_90</code>，<code>sm_90a</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>需要选项 <code>-code=sm_ZW</code> 指定一个真实架构的计算能力，实架构版本：<a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#gpu-feature-list">GPU Feature List</a></p>
<ul>
<li>CUDA二进制兼容性只能保证局限在相同大版本计算能力的架构中</li>
<li>实架构的计算能力必须大于等于虚架构的计算能力</li>
</ul>
</li>
<li>
<p>如果希望编译出来的文件能在更多的GPU上运行，可以使用<code>-gencode</code>同时指定多组计算能力，生成多个PTX版本代码，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-gencode arch=compute_35, code=sm_35
</span></span><span class="line"><span class="cl">-gencode arch=compute_50, code=sm_50
</span></span><span class="line"><span class="cl">-gencode arch=compute_60, code=sm_60
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>此时，编译出来的可执行文件将包含3个二进制版本，在不同架构的GPU中运行时会自动选择对应的二进制版本</li>
<li><code>-code=</code>可以指定虚架构，此时将进行即时编译，只会包含PTX代码</li>
</ul>
</li>
<li>
<p>如果在运行期间找不到当前架构的二进制版本代码，则使用即时编译</p>
<ul>
<li>即时编译推迟cubin的生成，将PTX代码在runtime内编译成cubin然后执行，因为runtime时已经知道当前运行在哪种GPU架构中，因此可以直接生成</li>
<li>缺点是增加了程序的启动延迟，但是可以使用编译缓存来缓解</li>
</ul>
</li>
<li>
<p>默认cuda以whole program compilation mode来编译</p>
</li>
</ul>
</li>
<li>
<p>reference and more reading</p>
<ul>
<li><a href="https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/"># Matching CUDA arch and CUDA gencode for various NVIDIA architectures</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/409154399"># CUDA 编译与 NVVM IR 笔记</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/432674688"># 银河系CUDA编程指南(2.5)——NVCC与PTX</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/623756901"># NVCC编译流程+中间文件+GDB调试cuda程序初探</a></li>
<li><a href="https://docs.nvidia.com/cuda/cuda-compiler-driver-nvcc/index.html#">nvcc文档</a></li>
<li><a href="https://blog.csdn.net/feng__shuai/article/details/111319185"># CUDA编译过程</a></li>
</ul>
</li>
</ul>
<h4 id="nvcc编译选项">nvcc编译选项</h4>
<ul>
<li><code>-g</code>：在host端生成调试信息</li>
<li><code>-G</code>：在device端生成调试信息。如果<code>-dopt</code>未指定，则关闭编译优化。</li>
<li><code>-lineinfo</code>：为device端生成行号，同时将source information嵌入到可执行文件中</li>
<li><code>-dopt</code>：如果<code>-G</code>没有指定，则<code>-dopt=on</code>，允许device端代码编译优化。如果<code>-G</code>指定，enables limited debug information generation for optimized device code</li>
</ul>
<p>常用编译命令：</p>
<ul>
<li><code>nvcc -lineinfo -arch=compute_86 -code=sm_86 </code>
<ul>
<li>或者<code>alias mynvcc='nvcc -lineinfo -arch=compute_86 -code=sm_86'</code></li>
</ul>
</li>
</ul>
<h2 id="架构发展">架构发展</h2>
<h3 id="overview">Overview</h3>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-11:38:55.png" alt="image-20231227113855018" style="zoom: 80%;" />
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-11:39:54.png" alt="image-20231227113954626" style="zoom:80%;" />
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-27-11:40:15.png" alt="image-20231227114015125" style="zoom:80%;" />
<h3 id="tesla">Tesla</h3>
<h4 id="g80">G80</h4>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-16-18:23:37.png" alt="image-20231216182335365" style="zoom:50%;" />
<ul>
<li>SP（Streaming Processor）：scalar ALU for a single CUDA thread
<ul>
<li>ALU执行是流水线化的，即一项操作会被分为X个步骤由X个组件去处理，每个步骤都耗费1周期。虽然一条指令要X周期才能执行完，但对于每个组件只要1周期就执行完了，所以每个周期都能送入一份数据进ALU。
<ul>
<li>SP的频率是调度单元（以及外部纹理单元等）的2倍，所以在调度单元看来，是需要2周期去消化1条指令。</li>
</ul>
</li>
</ul>
</li>
<li>SM（Streaming Mulitprocessor）：每个线程块分配到一个SM上
<ul>
<li>SM的频率是GPU频率的两倍</li>
</ul>
</li>
</ul>
<h4 id="scoreboarding">scoreboarding</h4>
<ul>
<li>
<p>作用：在指令发射阶段，检查待发射的指令是否与正在执行但尚未写回寄存器的指令之间存在数据相关。三种数据相关：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-26-18:56:45.png" alt="image-20231226185644918" style="zoom:70%;" /></p>
</li>
<li>
<p>大致原理：scoreboard为每个warp寄存器分配一个bit来记录相应寄存器的写完成状态，</p>
<ul>
<li>如果后序指令不存在数据相关，则进入流水线</li>
<li>如果存在数据相关，通过检查标识位，后续指令就会stall而无法发射，此时可以切换其他warp的指令进行调度</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/angus_huang_xu/article/details/105746777"># ILP——指令级并行2：记分牌（Scoreboard）技术</a></li>
<li>通用图形处理器设计3.5</li>
</ul>
</li>
</ul>
<h3 id="fermi">Fermi</h3>
<p>以<a href="https://www.ece.lsu.edu/gp/refs/gf100-whitepaper.pdf">GF100</a>为例，架构：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-16:18:45.png" alt="image-20231220161845919" style="zoom:80%;" /></p>
<h4 id="特点">特点</h4>
<ul>
<li><strong>第三代流式多处理器（SM）</strong>
<ul>
<li>每个SM有<strong>32</strong>个CUDA核心，比GT200多<strong>4倍</strong></li>
<li><strong>双精度浮点</strong>峰值性能比GT200提高<strong>8倍</strong></li>
<li><strong>两个warp调度器</strong>，可以同时调度和分发指令给两个独立的warp</li>
<li><strong>64KB RAM</strong>，可供共享内存和L1缓存配置化划分使用</li>
</ul>
</li>
<li><strong>第二代并行线程执行ISA（Instruction Set Architecture指令集架构）</strong>
<ul>
<li>统一地址空间，完全支持C++（比如虚函数、new/delete等）</li>
<li>针对OpenCL和DirectCompute进行了优化</li>
<li>完全支持<strong>IEEE 754-2008</strong> 32位和64位精度</li>
<li>具有64位扩展的完整32位整数路径</li>
<li>内存访问指令支持向64位寻址的过渡</li>
<li>通过<strong>预测</strong>提高性能
<ul>
<li>Predication enables short conditional code segments to execute efficiently with no branch instruction overhead</li>
</ul>
</li>
</ul>
</li>
<li><strong>改进的内存子系统</strong>
<ul>
<li>具有<strong>可配置L1和统一L2高速缓存</strong>的NVIDIA Parallel DataCacheTM层次结构
<ul>
<li>之前Tesla架构没有L1、L2 cache</li>
</ul>
</li>
<li>支持<strong>ECC</strong>内存的第一款GPU</li>
<li>大大提高原子内存操作性能</li>
</ul>
</li>
<li><strong>NVIDIA GigaThread引擎</strong>
<ul>
<li>应用程序上下文<strong>切换速度提高了10倍</strong></li>
<li>并发内核执行</li>
<li>无序线程块执行</li>
<li><strong>双向可重叠</strong>的内存传输引擎</li>
</ul>
</li>
</ul>
<h4 id="sm">SM</h4>
<ul>
<li>
<p>SM架构：有4个执行端口
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-10:29:56.png" alt="image-20231220102952702" style="zoom: 80%;" /></p>
<ul>
<li>core
<ul>
<li>每个CUDA处理器都有完全<strong>流水线化</strong>的整数算术逻辑单元（ALU）和浮点单位（FPU）</li>
</ul>
</li>
<li>LD/ST单元
<ul>
<li>每个SM有16个Load/Store单元，允许16个线程每个时钟周期计算源和目的地址，支持将每个地址的数据读取和存储到缓存或DRAM中</li>
</ul>
</li>
<li>SFU</li>
</ul>
</li>
<li>
<p>dual warp scheduler
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-10:58:34.png" alt="image-20231220105834360" style="zoom:50%;" /></p>
<ul>
<li>每个SM有两个warp scheduler和两个instruction dispatch unit，每个周期可以同时issue和execute两个warp
<ul>
<li>warp scheduler：选择warp</li>
<li>Instruction Dispatch Unit：将指令发送到对应的端口（16个core、或16个LD/ST、或4个SFU中）</li>
<li>由于SP（或者core）的频率是调度单元的2倍，因此调度单元一个周期选择一个warp，一个周期内2倍频率的core连续两次在half-warp上执行</li>
<li>由于SFU只有4个，因此一个warp在SFU中计算需要消耗8个周期，但是此时它不阻塞调度</li>
</ul>
</li>
<li>由于warp之间独立运行，因此warp scheduler不需要检查指令流中的依赖关系</li>
<li>大多数指令可以这样同时dual issue，两个整数指令、两个浮点指令或混合发出整数、浮点、加载、存储和 SFU 指令；但是双精度指令不支持dual dispatch with any other operation</li>
</ul>
</li>
<li>
<p>G80/GT200/Fermi对比
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-11:01:59.png" alt="image-20231220110159265" style="zoom: 40%;" /></p>
</li>
</ul>
<h4 id="isa">ISA</h4>
<ul>
<li>Fermi是第一个支持PTX2.0的架构
<ul>
<li>PTX2.0统一了各种内存空间的寻址</li>
</ul>
</li>
</ul>
<h4 id="gigathread">GigaThread</h4>
<ul>
<li>两级thread scheduler
<ul>
<li>thread scheduler：将线程块调度和分配到SM，GigaThread</li>
<li>warp scheduler：将warp调度和分配到执行单元</li>
</ul>
</li>
<li>特点：
<ul>
<li>应用程序上下文切换速度更快</li>
<li>concurrent(并发) kernel执行：（感觉下面的图画得有些confused？）
<ul>
<li>同一应用程序上下文的不同kernel可以并行在GPU上执行</li>
<li>不同应用程序上下文的kernel可以顺序执行
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-11:24:02.png" alt="image-20231220112402824" style="zoom:80%;" /></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="kepler">Kepler</h3>
<p><a href="https://www.nvidia.com/content/dam/en-zz/Solutions/Data-Center/tesla-product-literature/NVIDIA-Kepler-GK110-GK210-Architecture-Whitepaper.pdf">GK110/210</a>是Kepler架构中高端型号，用于科学计算，因此主要以这两种型号为基础来介绍kepler架构。总体架构：15个SMX
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-14:00:18.png" alt="image-20231220140018532" style="zoom: 50%;" /></p>
<h4 id="smx">SMX</h4>
<ul>
<li>
<p>架构
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-14:18:50.png" alt="image-20231220141850070" style="zoom:80%;" /></p>
</li>
<li>
<p>SMX中的core的频率与主GPU频率相同，以增大面积为代价，降低功耗
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-16:58:59.png" alt="image-20231220165859291" style="zoom:33%;" /></p>
</li>
<li>
<p>warp scheduler
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-15:04:24.png" alt="image-20231220150424654" style="zoom:40%;" /></p>
<ul>
<li>4个warp scheduler和8个instruction dispatch unit
<ul>
<li>warp scheduler中调度的warp，对应的2个instruction dispatch unit可以在一个周期分配给该warp两个独立的指令</li>
<li>两个指令中允许双精度指令与其他指令dual dispatch</li>
</ul>
</li>
<li>kepler架构针对warp scheduler在降低功耗方面的优化：从硬件的动态调度转向编译器辅助的静态调度
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-16:49:07.png" alt="image-20231220164907711" style="zoom: 50%;" /></li>
<li>Fermi用硬件scoreboard来记录寄存器的使用信息，从而确定指令之间的依赖关系
<ul>
<li>硬件scoreboard就是记录各个组件（寄存器、执行单元）当下的情况，并自动根据指令涉及的操作数、ALU去匹配。</li>
</ul>
</li>
<li>到了Kepler架构，因为指令的执行周期是可以预计的，所以调度信息其实在编译期就能确定了。于是ISA就做了更改，每7条指令为一组，附加一段调度信息（Control Code），把因为数据依赖需要等待的cycle数记录进去。硬件上许多动态调度的模块被砍掉了，节省了功耗。
<ul>
<li>访存指令的延迟依旧是没法预计的，因为不知道有没有cache miss，所以遇到访存指令势必需要一个等待数据就绪的同步过程，可以借助软件scoreboard来完成。</li>
<li>软件scoreboard可以看作是预分配几个信条量，有依赖关系的指令会显式声明对哪几个信号量做操作，这样一来要记录维护的信息变少了，逻辑也简单了。同时软件scoreboard没有dependency check，一方面可以将这部分卸载到编译器，另一方面考虑到dependency不多</li>
</ul>
</li>
</ul>
</li>
<li>
<p>cache</p>
<ul>
<li>Kepler的L1 Cache是用来为reg spill或者stack data服务的，即访存数据其实并不会缓存在L1里。</li>
<li>对于那些readonly的global memory，允许借用Tex Cache</li>
</ul>
</li>
<li>
<p>shuffle指令：warp可以读取来自warp内其他线程中任意排列的值，因此节省了共享内存</p>
</li>
</ul>
<h4 id="dynamic-parallelism">Dynamic Parallelism</h4>
<h4 id="hyper-q">Hyper-Q</h4>
<ul>
<li>之前架构中只有一个CPU与GPU的工作分配器（CWD）之间的硬件工作队列，多个流复用一个队列，可能造成虚假的依赖性</li>
<li>现在有32个硬件工作队列</li>
</ul>
<h4 id="grid-management-unit">Grid Management Unit</h4>
<ul>
<li>为了支持动态并行，需要改变对grid的管理</li>
</ul>
<h4 id="nvidia-gpudirect">NVIDIA GPUDirect</h4>
<ul>
<li>可以实现 GPU 与其他设备（例如网络接口卡 (NIC) 和存储设备）之间的直接通信和数据传输，但是中间数据不经过CPU</li>
</ul>
<h3 id="maxwell">Maxwell</h3>
<p>以GM204为例，4个GPC，每个GPC有4个SMM
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-17:44:14.png" alt="image-20231220174414182" style="zoom: 50%;" /></p>
<h4 id="特点-1">特点</h4>
<ul>
<li>更高效的SM（Maxwell SM，也称SMM）：core数量减少但是效率增加
<ul>
<li>指令调度提升
<ul>
<li>所有核心的SMM功能单元都分配给特定的调度器，没有共享单元。</li>
<li>每个分区中的core数量是32，warp scheduler方便调度</li>
<li>支持双发射（两个独立的指令，比如一个计算一个访存），也支持单发射（此时正好调度到一个warp）</li>
</ul>
</li>
<li>现有代码的占用率增加：每个SM上active的block数量翻倍</li>
<li>减少算数指令延迟</li>
</ul>
</li>
<li>更大的专用共享内存：
<ul>
<li>每个SMM有64KB的共享内存，4个processing block共享；但是每个线程块只能用48KB</li>
<li>L1缓存专职服务于texture，L2缓存大小激增</li>
</ul>
</li>
<li>快速的共享内存原子操作</li>
<li>支持动态并行：Kepler只在高端GPU中支持，Maxwell在低功率芯片中也支持</li>
</ul>
<h4 id="smm">SMM</h4>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-17:49:42.png" alt="image-20231220174942639" style="zoom:67%;" />
<h3 id="pascal">Pascal</h3>
<p>以<a href="https://images.nvidia.com/content/pdf/tesla/whitepaper/pascal-architecture-whitepaper-v1.2.pdf">GP100</a>为例，6个GPC，每个GPC有5个TPC，每个TPC有2个Pascal SM（但是P100有56个SM）
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-21:36:02.png" alt="image-20231220213601888" style="zoom:50%;" /></p>
<h4 id="架构">架构</h4>
<ul>
<li>SMP
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-21:36:31.png" alt="image-20231220213631880" style="zoom:60%;" />
<ul>
<li>每个SM有64个core</li>
<li>每个SM中寄存器数量保持不变，因为SM数量更多，所以总的寄存器数量也变多</li>
<li>每个SM中共享内存从GM200的96KB下降到64KB，但是因为SM数量更多，因此共享内存总量更大</li>
<li>每个SM中有32个双精度FP64 CUDA core</li>
</ul>
</li>
<li>支持FP16</li>
<li>有专用的共享内存（64KB/SM），L2 cache进一步增大</li>
</ul>
<h4 id="unified-memory">Unified Memory</h4>
<h4 id="compute-preemption">Compute preemption</h4>
<ul>
<li>计算抢占：允许在GPU上运行的计算任务在指令级别粒度上被中断</li>
<li>在Pascal架构之前：
<ul>
<li>仅仅在线程块粒度可以被中断</li>
<li>如果GPU上同时运行计算任务和显示任务，则长时间的计算可能会使得显示任务变得不响应和非交互</li>
</ul>
</li>
<li>Pascal中
<ul>
<li>支持计算抢占，因此显示任务会保持流畅运行</li>
<li>同时，计算抢占允许在单个GPU上交互式调试kernel</li>
</ul>
</li>
</ul>
<h4 id="硬件结构">硬件结构</h4>
<ul>
<li>内存从原来的GDDR5更换到HBM</li>
<li>NVLink：可以GPU之间连接，也可以CPU和GPU之间连接
<ul>
<li>通过NVLink连接的GPU，程序可以直接访问另一个GPU的显存</li>
</ul>
</li>
</ul>
<h3 id="volta">Volta</h3>
<p>以V100为例，有6个GPC，每个GPC有7个TPC，每个TPC有2个SM</p>
<h4 id="sm和tensor-core">SM和Tensor Core</h4>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-21:47:39.png" alt="image-20231220214739795" style="zoom:90%;" />
<ul>
<li>
<p>core的变化：允许FP32和INT32操作同时执行</p>
<ul>
<li>原来SM是core（ALU+FPU）+DPU的结构，因此FP32与INT32无法同时运行
<ul>
<li>由于ALU都是流水线化、分阶段的，因此虽然ALU和FPU可以同时运行，但是可能处于不同阶段</li>
</ul>
</li>
<li>现在SM是FP32+FP64+INT的结构，分离了ALU和FPU
<ul>
<li>因此FP32与INT32可以同时运行</li>
<li>而且FP32和INT32可以满吞吐运行
<ul>
<li>对于1个warp共32个线程，交给16个单元去执行的话，要像G80等架构提到的那样占用连续的两个周期来完成issue。不过在第二个周期，dispatch unit可以继续发射指令到其他单元，比如INT32。两者交错起来，就正好能达到满吞吐。</li>
<li>虽然增加了1周期的延迟，但是Volta大多数指令延迟都从6个周期降低到4个周期，总体还是快</li>
</ul>
</li>
</ul>
</li>
<li>意义：很多程序具有执行指针算术（整数内存地址计算）与浮点计算相结合的内部循环，流水线循环的每次迭代都可以更新地址（INT32指针算术）并为下一次迭代加载数据，同时在FP32中处理当前迭代。</li>
</ul>
</li>
<li>
<p>Tensor Core</p>
<ul>
<li>每个tensor core在每个时钟周期内，可以执行64个浮点FMA操作（<code>4*4*4</code>的GEMM）</li>
<li>每个tensor core执行浮点FMA操作：<code>D=A*B+C</code>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-21:58:40.png" alt="image-20231220215840623" style="zoom: 33%;" /></li>
</ul>
</li>
<li>
<p>enhanced L1 data cache and shared memory</p>
<ul>
<li>Instruction Cache
<ul>
<li>原来SM中有一个Instruction Cache，每个processing block中有一个Instruction Buffer</li>
<li>现在SM中有一个L1 Instruction Cache，每个processing block中有一个L0 Instruction Cache</li>
</ul>
</li>
<li>提高了L1 data cache的带宽，降低了其延迟</li>
<li>共享内存
<ul>
<li>将共享内存和L1 data cache整合起来，一共128KB，其中共享内存可以分配到96KB</li>
<li>纹理内存、全局内存都会经过L1 data cache</li>
</ul>
</li>
<li>之前的GPU只有load caching，GV100中引入了write caching</li>
</ul>
</li>
</ul>
<h4 id="independent-thread-scheduling">Independent Thread Scheduling</h4>
<ul>
<li>
<p>之前的SIMT模型</p>
<ul>
<li>一个warp使用一个共享的程序计数器，作用于32个线程，使用一个活动掩码，masked thread就是inactive的thread。各个分支依次执行，最后reconverge（同步）</li>
<li>由于divergence处理成顺序的执行，因此，来自不同区域或不同执行状态的 Warp 中的线程不能相互发送信号或交换数据，同时需要由锁或互斥锁保护的细粒度数据共享的算法很容易导致死锁
<ul>
<li>例子：比如0~3号线程在执行完A之后，需要使用到X的计算结果，此时无法实现
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-22:29:49.png" alt="image-20231220222949079" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Volta的SIMT模型：引入独立线程调度，每个线程都有自己的程序计数器和调用堆栈
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-22:33:17.png" alt="image-20231220223317559" style="zoom:50%;" /></p>
<ul>
<li>Volta的独立线程调度允许GPU放弃任何线程的执行，以便更好地利用执行资源或允许一个线程等待另一个线程生成数据，现在线程可以按照子warp粒度进行分支和重新汇聚，同时Volta中的收敛优化器仍会将执行相同代码的线程组合在一起、并行运行以达到最大效率。
<ul>
<li>可以使用CUDA 9的warp同步函数<code>__syncwarp()</code>来强制warp重新汇聚，因此假设了warp同步的代码不再安全</li>
<li><code>void __syncwarp(unsigned mask = 0xffffffff)</code>
<ul>
<li>二进制位1表示对应的线程参与同步</li>
</ul>
</li>
</ul>
</li>
<li>虽然一个SM中拆分为了4个processing block，每个processing block16个FP32/INT32，而且每个线程都有自己的PC和stack，看起来half-warp在1个周期内可以直接调度和dispatch到一个processing block；但是每次调度仍然是一个warp（32个线程），消耗2个周期（1个周期调度到1个processing block，2个周期将完整的warp调度完毕）。
<ul>
<li>前面的方法会增加调度硬件的复杂性，而且这种运行时的动态信息会改变各个组件的可用情况，也可能会破坏编译器静态调度的预设状态。</li>
</ul>
</li>
<li>例子1：可以实现warp内部细粒度的同步
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-05-15:23:05.png" style="zoom:60%;" /></li>
<li>例子2：分支间交错执行，可以掩盖stall
<ul>
<li>独立线程调度使得假设了warp同步的代码不再安全，比如此时在执行Z的时候，一个warp中的32个线程没有reconverge（同步），而是保持原来的branch执行
<ul>
<li>这是因为调度程序必须保守地假设Z可能会产生其他分叉执行分支所需的数据，如果是这种情况，自动强制重新汇聚将不安全。
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-15:17:24.png" alt="image-20231221151724143" style="zoom: 60%;" />
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-22:58:51.png" alt="image-20231220225851393" style="zoom:50%;" /></li>
</ul>
</li>
<li>此时需要使用<code>__syncwarp()</code>强制汇聚，可以提高SIMT效率 <br>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-22:59:19.png" alt="image-20231220225919107" style="zoom:50%;" /></li>
<li>因此，从CUDA 9开始，原来的warp shuffle指令<code>__shfl</code>都变成了deprecated，推荐使用<code>__shfl_sync</code>，里面加入了mask参数</li>
</ul>
</li>
<li>例子3：无饥饿算法，多线程环境下双向链表插入节点
<ul>
<li>Volta的独立线程调度确保即使线程T0当前持有节点A的锁，同一warp中的另一个线程T1也可以成功等待锁变得可用，而不会妨碍线程T0的进展。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">__device__</span> <span class="kt">void</span> <span class="nf">insert_after</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">Node</span> <span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Node</span> <span class="o">*</span><span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">lock</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">a</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">b</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">c</span><span class="o">-&gt;</span><span class="n">prev</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">unlock</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>缺点：增加了寄存器负担，单个线程的程序计数器一般要占用两个寄存器</li>
<li>参考
<ul>
<li><a href="https://www.zhihu.com/question/290660113">https://www.zhihu.com/question/290660113</a></li>
<li><a href="https://developer.nvidia.com/blog/inside-volta/">https://developer.nvidia.com/blog/inside-volta/</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/186192189">https://zhuanlan.zhihu.com/p/186192189</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="multi-process-servicemps">Multi-Process Service(MPS)</h4>
<ul>
<li>
<p>MPS：实现多个计算应用程序共享GPU时的性能提升和隔离</p>
</li>
<li>
<p>特点</p>
<ul>
<li>保证服务质量：限制每个应用程序只使用GPU资源的一部分，从而降低或消除排队阻塞</li>
<li>独立地址空间：不同应用程序进行地址隔离
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-00:11:58.png" alt="image-20231221001158198" style="zoom:50%;" /></li>
</ul>
</li>
<li>
<p>发展</p>
<ul>
<li>
<p>Volta之前都是通过软件方法，使用时间片的方式Time-slice scheduling
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-23:49:35.png" alt="image-20231220234935121" style="zoom:40%;" /></p>
<ul>
<li>从Kepler GK110 GPU开始，NVIDIA引入了基于软件的Multi-Process Service（MPS）和MPS Server，MPS Server允许将多个不同的CPU进程（应用程序上下文）组合成单个应用程序上下文并运行在GPU上，从而实现更高的GPU资源利用率。</li>
<li>对于Pascal，CUDA Multi-Process Service是一个CPU进程，它代表已经请求和其他GPU应用程序同时共享执行资源的GPU应用程序。该进程充当中介，将工作提交到GPU内部的工作队列中以进行并发内核执行。</li>
</ul>
</li>
<li>
<p>Volta MPS：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-20-23:53:30.png" alt="image-20231220235330434" style="zoom:50%;" /></p>
<ul>
<li>Server CUDA Context管理GPU硬件资源，多个MPS Clients会将它们的任务通过MPS Server传入GPU</li>
<li>Volta MPS对MPS server的关键部分使用硬件加速，使得MPS客户端能够直接将工作提交到GPU内部的工作队列中，同时将MPS客户端的最大数量从Pascal上的16增加到Volta上的48</li>
<li>Volta MPS旨在将GPU共享在单个用户的应用程序之间，并不适用于多用户或多租户用例</li>
<li>如果其中一个运行出错，则可能导致运行的任务都失败，即Volta MPS不提供客户端之间的致命故障隔离。</li>
</ul>
</li>
</ul>
</li>
<li>
<p>应用：</p>
<ul>
<li>No Batching的推理场景中，允许许多单独的单个推理任务同时提交到GPU，提升GPU利用率</li>
<li>支持linux下的统一内存，
<ul>
<li>在GPU执行时，之前的MPS client都是运行在一个单独的地址空间，与访问独立CPU进程内存不兼容</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Hyper-Q与MPS</p>
<ul>
<li>Hyper-Q：多流优化，同一个应用程序下多个stream中，没有依赖的操作可以并行执行</li>
<li>MPS：同时并行运行多个应用程序，多个应用程序共享同一个GPU context</li>
</ul>
</li>
<li>
<p>more reading and reference</p>
<ul>
<li><a href="https://docs.nvidia.com/deploy/pdf/CUDA_Multi_Process_Service_Overview.pdf">MULTI-PROCESS SERVICE</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/346389176"># 教你如何继续压榨GPU的算力</a></li>
<li><a href="https://asphelzhn.github.io/2019/04/14/tensor_09_MPS/">https://asphelzhn.github.io/2019/04/14/tensor_09_MPS/</a></li>
<li><a href="https://blog.csdn.net/cleanarea/article/details/112691820">https://blog.csdn.net/cleanarea/article/details/112691820</a></li>
</ul>
</li>
</ul>
<h4 id="cooperative-groupscg">Cooperative Groups(CG)</h4>
<p>协作组是CUDA 9引入的新特性，允许自定义线程通信的粒度
<a href="https://zhuanlan.zhihu.com/p/673304744"># CUDA 编程模型之协作组（Cooperative Groups）</a>
<a href="https://blog.csdn.net/kunhe0512/article/details/128927355"># CUDA协作组详解</a></p>
<h3 id="turing">Turing</h3>
<p>以<a href="https://images.nvidia.com/aem-dam/Solutions/design-visualization/technologies/turing-architecture/NVIDIA-Turing-Architecture-Whitepaper.pdf">TU102</a>为例，有6个GPC，每个GPC有6个TPC，每个TPC有2个SM
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-16:35:55.png" alt="image-20231221163555318" style="zoom:75%;" /></p>
<ul>
<li>SM
<ul>
<li>添加了独立的integer datapath，可以与浮点数指令同时运行</li>
<li>Uniform Register：将共享内存、texture cache、memory load cache（L1 data cache？）重新设计，统一到一起</li>
</ul>
</li>
<li>第二代Tensor Core
<ul>
<li>添加了INT8和INT4精度模式，增强了推理性能</li>
<li>支持DLSS（Deep Learning Super Sampling）</li>
</ul>
</li>
<li>实时光线追踪、渲染管线、RT Core、DLSS等图像相关</li>
</ul>
<h3 id="ampere">Ampere</h3>
<p>以<a href="https://images.nvidia.com/aem-dam/en-zz/Solutions/data-center/nvidia-ampere-architecture-whitepaper.pdf">GA100</a>为例，有8 GPCs, 8 TPCs/GPC, 2 SMs/TPC</p>
<h4 id="sm-1">SM</h4>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-17:25:04.png" alt="image-20231221172504272" style="zoom:80%;" />
<ul>
<li>第三代Tensor Core
<ul>
<li>Tensor Core Sparsity利用2:4的细粒度结构化稀疏性，使得吞吐量翻倍
<ul>
<li>稀疏矩阵定义：2:4稀疏矩阵，即每个四元组中有两个非零值
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-20:41:04.png" alt="image-20231221204104503" style="zoom:67%;" /></li>
<li>过程：使用稠密权重进行训练，然后进行细粒度结构化剪枝，最后通过额外的训练步骤对剩余的非零权重进行微调。</li>
<li>具体而言，A100使用Sparse MMA(Matrix Multiply-Accumulate)指令，跳过对带零值的输入进行计算，从而使 Tensor Core 的计算吞吐量翻倍
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-21:01:09.png" alt="image-20231221210109424" style="zoom:50%;" /></li>
</ul>
</li>
<li>支持所有数据类型：FP16、BF16、TF32、FP64、INT8、INT4 和 INT1，且比V100有进一步的加速效果
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-21-20:37:22.png" alt="image-20231221203721459" style="zoom:50%;" />
<ul>
<li>如果不使用Tensor Core，默认使用FP32；如果使用Tensor Core，则默认使用TF32</li>
<li>支持FP16/FP32、BF16/FP32混合精度，且两种混合精度速度一样快</li>
<li>TF32一方面保持了FP16的精度，另一方面保持了FP32的范围，因此很适合训练</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="memory方面的改进">memory方面的改进</h4>
<ul>
<li>
<p>Data sharing improvements：
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-00:00:12.png" alt="image-20231222000012376" style="zoom: 50%;" /></p>
<ul>
<li>数据可以在一个warp中32个线程共享，原来Volta只能在8个线程之间共享
<ul>
<li>因此节省了寄存器和带宽</li>
<li>同时，A100 Tensor Core将矩阵乘法指令的k维变为原来的4倍</li>
</ul>
</li>
<li>表格中的数据怎么来的？<a href="https://zhuanlan.zhihu.com/p/614429902">Nvidia tensorCore 计算过程</a></li>
</ul>
</li>
<li>
<p>Data Fetch improvement
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-10:22:10.png" alt="image-20231222102210009" style="zoom: 50%;" /></p>
<ul>
<li>新的异步拷贝指令可以直接将数据从全局内存（通常是DRAM和L2缓存）中加载到共享内存中，绕过L1缓存和寄存器</li>
<li>原来Volta中，数据先经过L1缓存读取到寄存器，然后再写到共享内存中</li>
<li>异步拷贝指令与异步barrier搭配使用：异步拷贝完成后，通过异步barrier通知程序拷贝完成</li>
<li>Compute Data Compression
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-11:24:01.png" alt="image-20231222112401558" style="zoom:33%;" />
<ul>
<li>Combined L1 cache and shared memory
<ul>
<li>L1 data cache和共享内存整合到一起，一共192KB</li>
<li>FP32和INT32可以同时运行、且满吞吐运行（与Volta与Turing架构相同）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>L2 cache improvement</p>
<ul>
<li>设计改进
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-11:28:03.png" alt="image-20231222112803822" style="zoom:67%;" /></li>
<li>Residency Control：ping-pong buffer（或称double buffer）
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-11:16:24.png" alt="image-20231222111624574" style="zoom:50%;" />
<ul>
<li>ping-pong buffer常驻于L2缓存上，减少对内存的写回，保持L2中数据重用</li>
<li>比如推理场景中，权重分段轮流装载到L2缓存上，让计算与权重装载并行。此时，多batch可以共用更多的权重</li>
</ul>
</li>
</ul>
</li>
<li>
<p>总结
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-11:31:53.png" alt="image-20231222113153880" style="zoom: 50%;" /></p>
</li>
</ul>
<h4 id="multi-instance-gpumig">Multi-Instance GPU(MIG)</h4>
<ul>
<li>
<p>背景：Volta MPS虽然支持多个应用程序同时运行，但是可能一个应用程序占用太多内存带宽或是L2缓存，对其他应用程序造成影响</p>
</li>
<li>
<p>MIG
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-16:01:25.png" alt="image-20231222160125125" style="zoom:50%;" /></p>
<ul>
<li>MIG可以将每个A100 划分为最多7个GPU Instance，每个instance可以为client（虚拟机、容器、进程等）提供定义的服务质量和故障隔离</li>
<li>每个instance由若干个GPU slices组成，GPU slices的结构
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-16:16:03.png" alt="image-20231222161603049" style="zoom:50%;" />
<ul>
<li>Sys Pipe：GigaThread Engine的一部分</li>
<li>一个GPC（7个TPC，14个SM）</li>
<li>一个L2 slice group（包括10个L2 cache slices）</li>
<li>对一部分frame buffer memory的访问</li>
</ul>
</li>
<li>每个instance内部可以再细分为compute instance
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-16:27:19.png" alt="image-20231222162719640" style="zoom:67%;" />
<ul>
<li>compute instance可以自行配置和封装计算资源，默认每个instance创建一个compute instance，因此该compute instance使用该instance的全部资源</li>
<li>每个compute instance包括一个Sys Pipe和若干个GPC，所有共享一个compute instance的应用程序共享一个Sys Pipe，每个compute instance都可以单独进行上下文切换</li>
<li>每个compute instance都支持MPS，MPS client的最大数量与compute instance大小成正比</li>
</ul>
</li>
</ul>
</li>
<li>
<p>应用场景：</p>
<ul>
<li>Multi-Tenant</li>
<li>Single Tenant, Single User：一个用户运行多个GPU应用程序</li>
<li>Single Tenant, Multi-User：比如对外部提供AI服务</li>
</ul>
</li>
</ul>
<h4 id="cuda-advances">CUDA Advances</h4>
<ul>
<li>
<p>Task Graph Acceleration</p>
<ul>
<li>背景：对于深度学习等应用场景，有iterative structure（即same workflow is executed repeatedly）
<ul>
<li>以前只能在每个iteration中，CPU重新提交任务到GPU。尤其是很多小的kernel在整个运行过程中，launch、init等开销占了相当一部分时间。</li>
<li>现在定义一个task graph（若干个操作、相应依赖关系和一些内存操作），可以define-once/run-repeatedly，即先将多个kernel预先构建为一个task graph，然后CPU一次性launch，减少了launch、init的时间
<ul>
<li>kernel的执行流程可以分为三个步骤：launch，grid initialization，kernel execution
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-26-16:09:41.png" alt="image-20231226160941218" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
</li>
<li>加速原理：
<ul>
<li>launch optimization：submit multiple work items to the GPU in a single operation</li>
<li>execution dependency optimization：可以优化复杂的graph（比如workflow fork and re-join，在一个fork分支中可以有多个dependency）
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-26-17:31:09.png" alt="image-20231226173109417" style="zoom:50%;" /></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/kunhe0512/article/details/125509926">异步数据拷贝</a>和异步barrier：<code>memcpy_asnyc</code></p>
<ul>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-data-copies">异步数据拷贝</a>：
<ul>
<li><code>memcpy_asnyc</code>：从global memory到shared memory的异步数据拷贝</li>
<li><code>cudaMemcpyAsync</code>：从CPU memory到GPU global memory的异步数据拷贝</li>
</ul>
</li>
<li><a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#asynchronous-barrier">异步barrier</a>：<code>arrival</code>和<code>wait</code>是分开的
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-19:33:51.png" alt="image-20231222193351615" style="zoom:40%;" />
<ul>
<li><code>arrival</code>：最快线程到达barrier</li>
<li><code>wait</code>：等待其他线程（或者最慢的线程）到达barrier</li>
<li>普通的barrier由于各线程快慢不一，中间有idle；异步barrier中间原来idle的部分现在进行其他independent work</li>
</ul>
</li>
<li><a href="https://developer.nvidia.com/blog/controlling-data-movement-to-boost-performance-on-ampere-architecture/">Controlling Data Movement to Boost Performance on the NVIDIA Ampere Architecture</a>：两阶段的pipeline，将计算与拷贝重叠
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-21:21:41.png" alt="image-20231222212140951" style="zoom:50%;" /></li>
</ul>
</li>
<li>
<p>L2 cache residency control</p>
<ul>
<li>两种数据：
<ul>
<li>persisting data：数据重复使用，比如深度学习场景，或生产者-消费者场景</li>
<li>streaming data：数据只使用一次
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-12-22-21:19:04.png" alt="image-20231222211904317" style="zoom:33%;" /></li>
</ul>
</li>
<li>L2 cache中专门留出一部分给persisting data使用，persistent access优先访问这部分，具体见<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#device-memory-l2-access-management">Device Memory L2 Access Management</a></li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/han2529386161/article/details/106411138"># NVIDIA GPU A100 Ampere(安培) 架构深度解析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/467466998"># CUDA效率优化之：CUDA Graph</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/145477249"># NV Ampere GPU架构学习与思考</a></li>
</ul>
</li>
</ul>
<h3 id="ada-lovelace">Ada Lovelace</h3>
<ul>
<li>cuda core数量增加</li>
<li>第四代Tensor Core
<ul>
<li>Hopper FP8 Transformer Engine</li>
</ul>
</li>
</ul>
<h3 id="hopper">Hopper</h3>
<p><a href="https://resources.nvidia.com/en-us-tensor-core">white paper</a></p>
<h3 id="参考">参考</h3>
<ul>
<li><a href="https://mp.weixin.qq.com/s/qakvAfNV4KkmNa3P56i-dQ">https://mp.weixin.qq.com/s/qakvAfNV4KkmNa3P56i-dQ</a></li>
<li><a href="https://www.zhihu.com/people/zhang-huan-11-88/posts">江南泣相关（翻译）博客</a>和对应<a href="https://developer.nvidia.com/key-technologies">white paper</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/258196004">NVIDIA GPU的一些解析（一）</a>的相关解读</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>常用vim操作</title>
      <link>https://qinganzhang.github.io/posts/%E5%B8%B8%E7%94%A8vim%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 29 Feb 2024 15:29:41 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/%E5%B8%B8%E7%94%A8vim%E6%93%8D%E4%BD%9C/</guid>
      <description>1. 查看 1.1 移动光标 w/W, b/B移动到下一单词、上一单词的开头，e/E移动到下一单词的结尾，大写空格分割，小写非字母分割 $, ^行尾 行首，0行间第一个字</description>
      <content:encoded><![CDATA[<h1 id="1-查看">1. 查看</h1>
<h2 id="11--移动光标">1.1  移动光标</h2>
<ul>
<li><code>w/W, b/B</code>移动到下一单词、上一单词的开头，<code>e/E</code>移动到下一单词的结尾，大写空格分割，小写非字母分割</li>
<li><code>$, ^</code>行尾 行首，<code>0</code>行间第一个字符</li>
<li><code>Ctrl+f/b</code>翻页，<code>Ctrl+d/u</code>翻半页，<code>Ctrl+e/y</code>上下滚动一行</li>
<li><code>数字+方向键</code>移动多次（<code>数字+cmd</code>执行多次cmd）</li>
<li><code>gg, G</code>文件首尾</li>
<li><code>50%</code>移动到文件50%的位置，<code>:50</code>移动到第50行，<code>.</code>表示当前行号，<code>$</code>表示最后一行的行号</li>
<li><code>/pattern</code>正则匹配查找，<code>n/N</code>上下跳转</li>
<li>光标移动到括号上时，使用<code>%</code>进行括号配对</li>
</ul>
<h2 id="12--文件编码">1.2  文件编码</h2>
<ul>
<li><code>:set fileencoding</code>查看当前文件编码</li>
<li><code>:e ++enc=utf-8</code>使用utf-8重新打开文件</li>
</ul>
<h2 id="13--显示">1.3  显示</h2>
<ul>
<li><code>:set nu, :set nonu</code>显示/不显示行号，在<code>~/.vimrc</code>中设置<code>set nu</code>持久化设置</li>
<li><code>Ctrl+G</code>显示当前状态</li>
</ul>
<h2 id="14--分屏">1.4  分屏</h2>
<ol>
<li>打开
<ul>
<li><code>vim -O file1 file2 </code>打开多个文本（<code>-O</code>垂直分屏，<code>-o</code>水平分屏）</li>
<li><code>:vs file</code>在当前vim中打开file的垂直分屏，<code>:sp file</code>在当前vim中打开file的水平分屏</li>
<li><code>Ctrl+w v/s</code>复制当前屏为相同垂直分屏或水平分屏</li>
<li><code>:new newfile</code>在vim中创建新文本并创建分屏</li>
</ul>
</li>
<li>切换
<ul>
<li><code>Ctrl+w+w</code>切换下一个</li>
<li><code>Ctrl+w+h/j/k/l</code>，hl左右，jk上下</li>
</ul>
</li>
<li>改变位置
<ul>
<li><code>Ctrl+w Shift+h/j/k/l</code>，当前屏左上下右移动</li>
</ul>
</li>
<li>改变大小
<ul>
<li><code>Ctrl+w Shift+|</code>水平加宽，<code>Ctrl+w Shift+_</code>垂直加宽，<code>Ctrl+w =</code>重置大小</li>
<li><code>Ctrl+w n +</code>增加高度n，<code>Ctrl+w n -</code>减少高度n，<code>Ctrl+w n Shift+&lt;</code>界线左移n，<code>Ctrl+w n Shift+&gt;</code>界线右移n</li>
</ul>
</li>
<li>关闭
<ul>
<li><code>Ctrl+w c</code>关闭当前分屏</li>
<li><code>Ctrl+w o</code>只保留当前分屏</li>
</ul>
</li>
</ol>
<h1 id="2-编辑">2. 编辑</h1>
<h2 id="21-进入编辑模式">2.1 进入编辑模式</h2>
<ul>
<li><code>i</code>光标处插入，<code>a</code>光标右边插入，<code>o,O</code>下面、上面另起一行，<code>I,A</code>行首尾插入</li>
</ul>
<h2 id="22-简单编辑">2.2 简单编辑</h2>
<h3 id="221--选中v">2.2.1  选中：<code>v</code></h3>
<ul>
<li><code>v, V, Ctrl+v</code>字符、行、块选中</li>
<li>可以结合<code>w/W, b/B, e/E</code></li>
<li>结合text object</li>
</ul>
<h3 id="222--text-object">2.2.2  text object</h3>
<pre><code>包括范围和文本对象，可以结合各种操作使用
</code></pre>
<ul>
<li>范围：<code>i</code>：inner,<code>a</code>：around</li>
<li>文本对象：<code>w</code>：word，<code>s</code>：sentence，各种括号引号</li>
</ul>
<h3 id="223--删除和剪切d">2.2.3  删除和剪切：<code>d</code></h3>
<ul>
<li>
<p>删除将内容复制到匿名寄存器中（即剪切），可以使用黑洞寄存器<code>&quot;_</code>避免剪切内容</p>
<ul>
<li>
<p>不剪切的删除（将删除内容复制到黑洞寄存器中，相当于不保存）：<code>&quot;_cmd</code>，其中cmd是删除相关的命令，eg：<code>&quot;_x</code></p>
</li>
<li>
<p>使用键盘映射实现更简便的写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&#34;在~/.vimrc中,将删除映射为不剪切的删除，剪切映射为删除命令前加前缀&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">let mapleader = &#34;,&#34;
</span></span><span class="line"><span class="cl">nnoremap x &#34;_x
</span></span><span class="line"><span class="cl">nnoremap X &#34;_X
</span></span><span class="line"><span class="cl">nnoremap d &#34;_d
</span></span><span class="line"><span class="cl">nnoremap dd &#34;_dd
</span></span><span class="line"><span class="cl">nnoremap D &#34;_D
</span></span><span class="line"><span class="cl">vnoremap d &#34;_d
</span></span><span class="line"><span class="cl">vnoremap dd &#34;_dd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&#34;&lt;leader&gt;是前缀，通过mapleader设定&#34;
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;x &#34;&#34;x
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;X &#34;&#34;X
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;d &#34;&#34;d
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;dd &#34;&#34;dd
</span></span><span class="line"><span class="cl">nnoremap &lt;leader&gt;D &#34;&#34;D
</span></span><span class="line"><span class="cl">vnoremap &lt;leader&gt;d &#34;&#34;d
</span></span><span class="line"><span class="cl">vnoremap &lt;leader&gt;dd &#34;&#34;dd
</span></span></code></pre></td></tr></table>
</div>
</div><p>在<code>~/.vimrc</code>中输入<code>:source ~/.vimrc</code>使设定生效</p>
<p>在vim中输入<code>:map</code>查看当前的键盘映射</p>
</li>
</ul>
</li>
<li>
<p><code>D, d$</code>删除光标至行尾，<code>dd</code>删除当前行</p>
</li>
<li>
<p><code>x</code>删除当前字符，<code>daw</code>删除单词及后面的空格，<code>diw</code>删除单词，结合text object</p>
</li>
<li>
<p><code>:m,nd</code>删除m-n行</p>
</li>
<li>
<p><code>s</code>删除字符并插入，<code>S</code>清空行并插入</p>
</li>
<li>
<p>先选中，然后<code>x</code>删除选中部分，<code>D</code>删除选中行</p>
</li>
</ul>
<h3 id="224--复制y">2.2.4  复制：<code>y</code></h3>
<ul>
<li><code>yy</code>复制当前行，<code>:m,ny</code>复制m-n行到剪贴板</li>
<li>结合text object</li>
</ul>
<h3 id="225--粘贴p">2.2.5  粘贴：<code>p</code></h3>
<ul>
<li><code>p，P</code>粘贴到光标处/后</li>
<li><code>m,ncok</code>复制m-n行到k行下一行</li>
<li><code>m,nmk</code>移动m-n行到k行下一行</li>
</ul>
<h3 id="226--搜索">2.2.6  搜索</h3>
<ul>
<li><code>/pattern</code>匹配，<code>n, N</code>下一个上一个匹配对象</li>
<li><code>*, #</code>匹配下一个，上一个相同的单词</li>
</ul>
<h3 id="227--替换c">2.2.7  替换：<code>c</code></h3>
<ul>
<li>结合text object</li>
<li><code>r</code>单字符替换，<code>R</code>字符串替换</li>
<li><code>[range]s/pattern/replace/[flags]</code>
<ul>
<li><code>[range]</code>：<code>%</code>(全文)，<code>.</code>，<code>m,n</code>，<code>m</code></li>
<li><code>[flags]</code>：<code>g</code>全局替换，<code>c</code>替换前询问，不写默认替换首个</li>
</ul>
</li>
</ul>
<h3 id="228--撤销重做">2.2.8  撤销重做</h3>
<ul>
<li><code>u</code>撤销</li>
<li><code>Ctrl+r</code>重做</li>
</ul>
<h3 id="229--批量注释">2.2.9  批量注释</h3>
<ol>
<li>方法一：
<ul>
<li>注释：<code>Ctrl+v</code>选择，<code>Shift+i</code>进入编辑模式，输入插入的字符比如<code>#</code>，再两次<code>Esc</code></li>
<li>取消注释：<code>Ctrl+v</code>选择，<code>x</code>或<code>d</code>删除（就是选择然后删除）</li>
</ul>
</li>
<li>方法二：正则替换
<ul>
<li>注释：<code>:m,ns/^/#/g</code></li>
<li>取消注释：<code>:m,ns/^#//g</code>（替换成空白）</li>
</ul>
</li>
</ol>
<h3 id="2210--其他">2.2.10  其他</h3>
<ul>
<li><code>J</code>将当前行下面的行合并到当前行</li>
</ul>
<h1 id="3-其他">3. 其他</h1>
<h2 id="31--优质blog">3.1  优质Blog</h2>
<ul>
<li><a href="https://harttle.land/vim-practice.html">完全用Vim工作</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git笔记</title>
      <link>https://qinganzhang.github.io/posts/git%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 29 Feb 2024 14:56:05 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/git%E7%AC%94%E8%AE%B0/</guid>
      <description>Git配置相关 （全局）配置：如果是局部配置，每个仓库都需要进行配置 1 2 3 4 5 6 7 8 # 设置全局配置 # git config --global user.name &amp;#34;zhangqingan&amp;#34; # git config --global user.email &amp;#34;zhangqingannn@bupt.edu.cn&amp;#34; # git config --global https.proxy http://127.0.0.1:7890 # git config --global</description>
      <content:encoded><![CDATA[<h3 id="git配置相关">Git配置相关</h3>
<ul>
<li>
<p>（全局）配置：如果是局部配置，每个仓库都需要进行配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 设置全局配置
</span></span><span class="line"><span class="cl"># git config --global user.name &#34;zhangqingan&#34;
</span></span><span class="line"><span class="cl"># git config --global user.email &#34;zhangqingannn@bupt.edu.cn&#34;
</span></span><span class="line"><span class="cl"># git config --global https.proxy http://127.0.0.1:7890
</span></span><span class="line"><span class="cl"># git config --global https.proxy http://127.0.0.1:7890
</span></span><span class="line"><span class="cl"># 清除全局配置
</span></span><span class="line"><span class="cl"># git config --global unset user.name
</span></span><span class="line"><span class="cl"># git config --global unset user.email
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>如果是针对仓库的局部配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git config --local user.name &#34;zhangqingan&#34;
</span></span><span class="line"><span class="cl">git config --local user.email &#34;zhangqingannn@bupt.edu.cn&#34;
</span></span><span class="line"><span class="cl"># git config --local --list
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>生成密钥对</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ssh-keygen -t rsa -C &#34;zhangqingannn@bupt.edu.cn&#34;
</span></span><span class="line"><span class="cl"># 并且后续生成密钥的位置自定义，注意win上这里是一个目录，linux上是文件名
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ssh-keygen -l -f key # 查看密钥的contents（SHA256+comments）
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>添加私钥</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># ssh-agent bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ssh-add private_key # 将私钥添加到本地
</span></span><span class="line"><span class="cl">ssh-add -l # 查看当前添加的私钥
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://zhuanlan.zhihu.com/p/126117538">ssh agent详解</a></p>
</li>
<li>
<p>修改配置文件：修改<code>~/.ssh/config</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Host github(bupt)
</span></span><span class="line"><span class="cl">  User QinganZhang
</span></span><span class="line"><span class="cl">  HostName ssh.github.com
</span></span><span class="line"><span class="cl">  IdentityFile /home/zqg/.ssh/github/bupt
</span></span><span class="line"><span class="cl">  Port 443 # or 22
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>reference and more reading</p>
<ul>
<li><a href="https://blog.csdn.net/yuanlaijike/article/details/95650625">Git多用户配置</a></li>
<li><a href="https://www.cnblogs.com/cscshi/p/15705045.html">如何为Git设置代理</a></li>
</ul>
</li>
</ul>
<h3 id="相关概念">相关概念</h3>
<ul>
<li>
<p>顶层概念：</p>
<ul>
<li>Workspace：工作区，本地的工作目录</li>
<li>Repository：包含<code>.git</code>目录的工作区，其中<code>.git</code>为版本库，其中保存了stage暂存区、第一个分支main、指向main的指针HEAD</li>
<li>Index/Stage：暂存区</li>
<li>Remote：远程仓库</li>
</ul>
</li>
<li>
<p>底层概念：from <a href="https://missing-semester-cn.github.io/2020/version-control/">missing semester中的Git</a></p>
<ul>
<li>
<p>文件称为Blob对象（数据对象），目录称为tree，每个commit即为一个对文件和目录的快照的指针（保存了当前的整个仓库，或者说追踪最顶层的树）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// 文件就是一组数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">type</span> <span class="n">blob</span> <span class="o">=</span> <span class="n">array</span><span class="o">&lt;</span><span class="n">byte</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 一个包含文件和目录的目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">type</span> <span class="n">tree</span> <span class="o">=</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span> <span class="n">tree</span> <span class="o">|</span> <span class="n">blob</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 每个提交都包含一个父辈，元数据和顶层树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">type</span> <span class="n">commit</span> <span class="o">=</span> <span class="k">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nl">parent</span><span class="p">:</span> <span class="n">array</span><span class="o">&lt;</span><span class="n">commit</span><span class="o">&gt;</span> <span class="c1">// 一个commit可能有多个parent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nl">author</span><span class="p">:</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">    <span class="nl">message</span><span class="p">:</span> <span class="n">string</span>
</span></span><span class="line"><span class="cl">    <span class="nl">snapshot</span><span class="p">:</span> <span class="n">tree</span> <span class="c1">// 追踪最顶层的树
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>对象可以是文件、目录或者commit，对象通过SHA-1哈希进行按名存取（文件和目录好说，但是commit就不好访问了，因此统一使用SHA-1哈希）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">type object = blog | tree | commit
</span></span><span class="line"><span class="cl">objects = map&lt;string, object&gt;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>为了方便好记，使用引用来指向最近一次的commit，而不是来记一串哈希值。因此，分支就是可变的引用，而标签就是绑定到特定commit的引用，HEAD指向当前的commit</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">references = map&lt;string, string&gt;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>因此，Repository保存的就是对象和引用。</p>
</li>
<li>
<p>前面说commit是一个对文件和目录的快照，是通过向暂存区进行若干次操作，确认保存操作的结果，即形成一个快照</p>
</li>
</ul>
</li>
<li>
<p>其他概念：</p>
<ul>
<li>track/untrack：文件或目录是否纳入到git的版本控制范围内</li>
</ul>
</li>
</ul>
<h3 id="基础操作">基础操作</h3>
<h4 id="常用操作">常用操作</h4>
<ul>
<li>
<p><code>git init -b main</code>：创建.git文件夹，将当前目录变成一个仓库，默认分支为main</p>
</li>
<li>
<p><code>git add</code>：将文件添加到暂存区（stage），相当于创建了快照，否则文件就是untracked的</p>
<ul>
<li><code>git diff</code>：比较当前工作区和暂存区快照之间的差异，即修改之后还没有暂存起来的变化内容</li>
</ul>
</li>
<li>
<p><code>git commit -m &quot;comment&quot;</code>：将暂存区的修改提交到分支（多次add之后进行一次commit），commit就是一个快照</p>
<ul>
<li><code>git diff --staged</code>：比较暂存区快照和最近一次commit之间的差异</li>
<li><code>git commit -a -m &quot;comment&quot; </code>：将所有跟踪过的文件暂存起来一起提交，跳过了<code>git add</code>步骤</li>
</ul>
</li>
<li>
<p><code>git status</code>：查看当前文件夹中文件的状态</p>
</li>
<li>
<p><code>git rm --cached &lt;file&gt;</code>：取消对file的跟踪</p>
</li>
<li>
<p><code>git diff</code>：</p>
<ul>
<li><a href="https://blog.csdn.net/lx_ros/article/details/131741154">git diff命令</a>，<a href="https://git-scm.com/docs/git-diff">官方文档</a></li>
<li><a href="https://blog.csdn.net/shaotianyang12/article/details/122025393">git diff输出结果解读</a>
<ul>
<li><a href="https://blog.csdn.net/gao_zhennan/article/details/120217246">git diff输出中 \ No newline at end of file的含义</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>git log</code>：查看commit历史，最近的排在最上面</p>
<ul>
<li><code>-p (--path)</code>：显示每次提交所引入的差异（按补丁的格式输出）
<ul>
<li>补丁：即两次文件的差异</li>
</ul>
</li>
<li><code>--stat</code>：显示每次提交的简略统计信息</li>
<li><code>--ptetty</code>：设置输出模式，可以自定义输出格式</li>
<li><code>--decorate</code>：查看各个分支当前所指向的对象</li>
<li><code>--graph</code>：</li>
<li><code>-n</code>：限制输出长度</li>
<li><code>--since, --until</code></li>
<li><code>--grep</code>：搜索提交说明中的关键字</li>
<li><code>-S</code>：pickaxe选项，接受一个字符串，搜索那些添加或删除了该字符串的提交</li>
<li><code>-- path</code>：输出某些文件或目录的历史提交，注意这个参数是放在最后的（因此用两个短线隔开）</li>
</ul>
</li>
</ul>
<h4 id="版本控制">版本控制</h4>
<ul>
<li>
<p>版本回退</p>
<ul>
<li><code>git reset --hard HEAD^</code>：返回到最近一次commit
<ul>
<li><code>HEAD</code>指向最近一次的commit，<code>HEAD^</code>和<code>HEAD^^</code>分别表示上一个commit和上上个commit</li>
</ul>
</li>
<li><code>git reset --hard commitId</code>：返回到特定的commit
<ul>
<li><code>git log --pretty=oneline</code> ：显示所有提交过的commit，不包括已经回退的commit记录
<ul>
<li><a href="https://www.zhihu.com/question/284554416">怎么才能看懂git log的线</a></li>
</ul>
</li>
<li><code>git reflog</code>：显示所有提交过的commit，包括回退的操作，比如回退之后又反悔了，需要使用reflog来找到新版本对应的commit id</li>
</ul>
</li>
</ul>
</li>
<li>
<p>撤销修改</p>
<ul>
<li>如果只是在本地工作区修改了，还没有git add：<code>git restore &lt;file&gt;</code>或者<code>git checkout -- &lt;file&gt;</code></li>
<li>如果在本地工作区修改之后，已经git add：<code>git restore --staged &lt;file&gt;</code>或者<code>git reset HEAD &lt;file&gt;</code></li>
<li>如果已经git commit，则进行版本回退</li>
</ul>
</li>
<li>
<p>重新提交：如果上一次commit完成后，发现漏了些文件，此时先git add，然后使用<code>git commit --ament</code>，这样只会有一次提交，后一次的提交会覆盖前一次的提交</p>
</li>
</ul>
<h4 id="远程库">远程库</h4>
<p>对远程库的操作实际上都是对远程库中远程分支的操作，默认远程库为origin，远程分支为 与当前本地仓库分支 同名的远程分支</p>
<ul>
<li>
<p>远程库的几种使用场景：</p>
<ul>
<li>
<p>克隆别人的仓库：<code>git clone</code>默认只有main分支，使用<code>git checkout -b dev origin/dev</code>在本地创建dev分支，并且与远程的dev分支关联起来</p>
</li>
<li>
<p>自己在GitHub上新建一个仓库，然后clone下来进行开发</p>
</li>
<li>
<p>自己在本地目录下，先<code>git init</code>创建本地仓库，然后将本地仓库与远程仓库关联起来：<code>git remote add &lt;shortname&gt; &lt;url&gt;</code></p>
<ul>
<li>
<p><code>&lt;url&gt;</code>支持多种协议，<code>&lt;shortname&gt;</code>即代表了该url</p>
</li>
<li>
<p>一般远程库的名字就叫origin</p>
</li>
<li>
<p>可以关联多个远程库，比如本地仓库关联一个共有的和一个私有的仓库</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看远程库信息：<code>git  remote -v</code></p>
<ul>
<li>远程库可能有多个</li>
</ul>
</li>
<li>
<p>获取远程库的更新：</p>
<ul>
<li><code>git fetch &lt;remote&gt;</code>：只会将远程库的更新下载到本地仓库，不会自动进行合并</li>
<li><code>git pull</code>：如果当前分支设置了跟踪远程分支，则<code>git pull</code>会拉取更新，并自动进行合并。如果有冲突，需要手动解决冲突。</li>
<li><a href="https://blog.csdn.net/weixin_41975655/article/details/82887273">详解git pull和git fetch的区别</a></li>
</ul>
</li>
<li>
<p>将本地库的内容推送到远程库：<code>git push &lt;remote&gt; &lt;branch&gt;</code></p>
<ul>
<li>默认remote是origin，默认将本地分支推送到远程的同名分支上</li>
<li><code>git push -u origin main</code>：第一次push时，远程库是空的，此时不但会将本地库的内容推送到远程库，而且将本地的main分支和远程库的main分支关联起来</li>
<li>如果他人先于你push到远程，你的push会被拒绝，此时需要拉取更新，手动修改冲突的部分，合并之后才能再push</li>
</ul>
</li>
<li>
<p>查看某个远程仓库：<code>git remote show &lt;remote&gt;</code></p>
</li>
<li>
<p>远程仓库重命名：<code>git remote rename old-name new-name</code></p>
</li>
<li>
<p>解除本地和远程库之间的关联关系：<code>git remote rm origin</code></p>
</li>
</ul>
<h4 id="分支管理">分支管理</h4>
<p>分支是指向commit的可变指针，默认名字为main，main分支在每次提交时都自动向前移动</p>
<p>HEAD是一个指向当前所在的本地分支的指针（可以想象为当前分支的别名）</p>
<h5 id="基本操作">基本操作</h5>
<p>注意这些操作都是在本地仓库的</p>
<ul>
<li>
<p>创建分支：<code>git branch dev</code></p>
<ul>
<li><code>--merged</code>：查看哪些分支已经合并到当前分支</li>
<li><code>--no-merged</code>：查看所有包含未合并工作的分支（即没有汇聚到当前分支的那些分支）</li>
</ul>
</li>
<li>
<p>重命名当前分支：<code>git branch -M newname</code></p>
</li>
<li>
<p>切换分支：<code>git checkout dev</code></p>
</li>
<li>
<p>创建并切换分支：<code>git checkout -b dev</code>或者<code>git switch -c dev</code></p>
</li>
<li>
<p>合并指定分支到当前分支：<code>git merge dev</code></p>
<ul>
<li>如果当前分支main和待合并分支dev存在冲突，此时进行了合并，但是没有创建一个新的commit，需要先解决冲突，再手动进行commit，解决冲突就是手动将git merge失败的文件手动进行编辑，可以使用<code>git status</code>查看unmerged的文件，然后使用<code>git merge --continue</code>继续合并过程。
<ul>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">Git官方文档-3.2分支的新建与合并</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/621257493">Git冲突详细处理步骤及案例</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/619771430">如何避免Git冲突</a></li>
<li><a href="https://blog.csdn.net/qq_44536533/article/details/123412327">git解决冲突（超详细图文版及常用命令）</a></li>
</ul>
</li>
<li>因此使用分支时应该在main分支中生成多个dev分支，最后选择合适的dev分支进行合并，而非直接在main分支上进行修改</li>
<li>默认合并分支时使用Fast forward模式，此时删除分支之后，会丢掉分支信息。如果禁用fast forward模式（<code>--no-ff</code>），git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
<ul>
<li>fast forward模式的含义：比如dev是master的直接后继，即master之后没有分叉，此时将dev merge到master上时，直接移动master的指针即可</li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看分支：<code>git branch</code></p>
<ul>
<li><code>-vv</code>：列出每一个分支正在跟踪的远程分支，以及ahead和behind信息
<ul>
<li>如果需要查看最新的信息，则需要更新远程的信息，<code>git fetch --all; git branch -vv</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>删除分支：<code>git branch -d dev</code></p>
<ul>
<li>如果当前分支还没有被合并，而且需要删除当前分支，需要使用<code>git branch -D dev</code>强行删除</li>
</ul>
</li>
</ul>
<h5 id="远程分支">远程分支</h5>
<p>远程跟踪分支是远程分支状态的引用，相当于书签。比如远程仓库命名为origin，拉取该仓库的main分支，因此本地就将对应的commit叫做<code>origin/main</code>，在本地仓库同样有一个main分支，比如本地进行多个commit会ahead of origin/main。<a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">Git官方文档-3.5远程分支</a></p>
<ul>
<li>比如当拉取本地没有的、位于远程的新的分支b时，本地只会有一个不可修改的<code>origin/b</code>指针，本地不会自动生成一份可编辑的副本。因此，需要使用<code>git merge origin/b</code>将远程分支b合并到本地当前分支，或者<code>git checkout -b b origin/b</code>将远程分支拉取到本地的新分支b上（如果本地仓库没有分支b，而且远程分支只有一个叫做b的分支，则一个快捷方式为：<code>git checkout b</code>）</li>
<li>修改或设置跟踪的上游分支 ：<code>git branch -u origin/b</code></li>
<li>删除远程分支：<code>git push origin --delete b</code>
<ul>
<li>这个操作只是从服务器上移除这个指针，实际物理删除需要等到过一段时间git服务器进行垃圾回收时，因此误删通常是容易恢复的</li>
</ul>
</li>
</ul>
<h5 id="最佳实践-修复bug">最佳实践-修复Bug</h5>
<ul>
<li>背景：比如main分支上有一个bug，但是当前在dev分支上，而且针对dev的工作还没有完成（即当前不能commit到dev分支，从而清空status）</li>
<li>大致流程为：
<ul>
<li>使用<code>git stash</code>将当前工作区保存起来，此时工作区恢复到最近一次commit时的状态</li>
<li>然后修复bug：先切换到main分支，创建修复bug的分支，修复bug，然后再合并到main分支，同时也需要将修复bug这个commit合并到其他dev分支，切换到dev分支，然后<code>git cherry-pick</code>
<ul>
<li><code>git cherry-pick commit_id</code>：复制一个特定的commit到当前分支（相当于在dev分支上将修复bug的操作重新进行commit，因此生成的commit id和在main分支上的commit id不同）</li>
</ul>
</li>
<li>修复完bug再恢复当前工作区
<ul>
<li>查看暂存的工作区：<code>git stash list</code></li>
<li>恢复暂存的工作区：
<ul>
<li><code>git stash apply</code>：恢复之前保存的工作区，但是保存的工作区内容还在stash中，需要使用<code>git stash drop</code>进行删除。可以恢复指定的工作区：<code>git stash apply stash{0}</code></li>
<li><code>git stash pop</code>：恢复工作区的公式，也将保存在stash中的内容删除</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="rebase">Rebase</h5>
<p>用来将一组commit按照顺序（即某一分支上的commit）合并到一个特定的commit后面（即另一个分支的最后）</p>
<ul>
<li>万能公式：<code>git rebase --onto &lt;base&gt; &lt;start&gt; &lt;end&gt;</code></li>
<li>变基原则：如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，则不要进行变基</li>
<li>参考
<ul>
<li><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git官方文档-3.6变基</a></li>
<li>万能公式来源：<a href="https://www.zhihu.com/question/25072850/answer/3303267651">强烈推荐：git rebase有哪些用法？elpie-kay的回答</a></li>
</ul>
</li>
</ul>
<h4 id="标签管理">标签管理</h4>
<p>标签就是指向commit的指针，但是分支可以移动，标签不能移动</p>
<p>在关键commit节点，使用commit id不方便，因此标签绑定到该commit id</p>
<ul>
<li>
<p>打标签：<code>git tag v1.0</code></p>
<ul>
<li>在某个特定的commit上打tag，并添加说明：<code>git tag -a v1.0 -m &quot;comments&quot; commitId</code></li>
<li>这里说的标签指的是轻量标签（某个特定提交的引用），附注标签指的是上面添加的说明</li>
</ul>
</li>
<li>
<p>查看所有标签：<code>git tag</code></p>
<ul>
<li>标签不是按照时间顺序列出，而是按照字母排列列出</li>
<li>查看标签信息：<code>git show v1.0</code></li>
</ul>
</li>
<li>
<p>删除标签：<code>git tag -d v0.9</code>可以删除本地标签</p>
<ul>
<li>删除远程标签时，先从本地删除，然后使用从远程删除。从远程删除：
<ul>
<li>第一种方法：<code>git push origin :refs/tags/v0.9</code>（即将冒号前面的空值推送到远程）</li>
<li>第二种方法：<code>git push origin --delete v0.9</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>推送标签到远程：<code>git push origin v1.0</code></p>
<ul>
<li>默认情况下git push不会将标签推送到远程仓库上</li>
<li>一次性推送所有标签到远程：<code>git push origin --tags</code></li>
</ul>
</li>
<li>
<p>检出标签：<code>git checkout &lt;tag&gt;</code>，即将HEAD移动到指向某个标签，此时仓库处于detached HEAD状态</p>
</li>
</ul>
<h3 id="自定义git">自定义Git</h3>
<h4 id="忽略特殊文件gitignore">忽略特殊文件<code>.gitignore</code></h4>
<p>一些<a href="https://github.com/github/gitignore">.gitignore模板</a></p>
<p>虽然某个文件可以匹配到gitignore的规则，但是需要强制添加：<code>git add -f myfile</code></p>
<p>或者某个文件应该可以添加但仍然被忽略了，说明gitignore规则有问题，找出对应的规则条目：<code>git check-ignore -v myfile</code></p>
<p>在线生成gitignore文件：<a href="https://gitignore.itranswarp.com/">Gitignore Online Generator</a></p>
<h4 id="配置别名">配置别名</h4>
<ul>
<li>
<p>几个例子：</p>
<ul>
<li>
<p><code>git config --global alias.st status</code></p>
</li>
<li>
<p><code>git config --global alias.unstage 'restore --stage'</code>：将add到暂存区的修改撤销掉</p>
</li>
<li>
<p><code>git config --global alias.last 'log -1'</code>：显示最后一次提交信息</p>
</li>
<li>
<p><code>git config --global alias.lg &quot;log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit&quot;</code>：自定义git log显示</p>
</li>
</ul>
</li>
<li>
<p>删除别名时，只需要在仓库的配置文件<code>.git/config</code>或是用户的配置文件<code>.gitconfig</code>的<code>[alias]</code>段落中，删除掉特定的行即可</p>
</li>
</ul>
<h3 id="工作流">工作流</h3>
<h4 id="向一个项目贡献">向一个项目贡献</h4>
<h5 id="提交准则">提交准则</h5>
<ul>
<li>
<p>提交不应包含trailing whitespace。git apply应用补丁时会检测空白错误,默认情况下,尾部空白,包含空白的空行,初始tab缩进之后紧跟的空白字符会被认为是错误。<a href="https://blog.csdn.net/sodaslay/article/details/46715311">参考</a></p>
<ul>
<li>在git apply patch时，应该先<code>git diff --check</code>，将会找到可能的whitespace errors并列出来</li>
</ul>
<blockquote>
<p>By default, trailing whitespaces (including lines that consist solely of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors.</p>
<p>—— from <a href="https://git-scm.com/docs/git-diff">git-diff</a></p>
</blockquote>
</li>
<li>
<p>让每个commit解决一个问题，不要多个问题混在一个commit中</p>
</li>
<li>
<p>重视写commit message</p>
<ul>
<li>一个<a href="https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">好的commit message模板</a></li>
</ul>
</li>
</ul>
<h5 id="私有开发项目">私有开发项目</h5>
<p>Git文档中一个<a href="https://git-scm.com/book/zh/v2/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%90%91%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE">私有开发项目的例子</a></p>
<h5 id="私有管理团队">私有管理团队</h5>
<p>多个开发者在feature分支上工作，只有整合者才能将feature分支merge到master分支</p>
<p>Git文档中一个<a href="https://git-scm.com/book/zh/v2/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%90%91%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE">私有管理团队的例子</a></p>
<h5 id="派生的公开项目">派生的公开项目</h5>
<p>先fork公开项目，然后自己进行修改，最后通过Pull Request请求合并</p>
<p>Git文档中一个<a href="https://git-scm.com/book/zh/v2/%E5%88%86%E5%B8%83%E5%BC%8F-Git-%E5%90%91%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E8%B4%A1%E7%8C%AE">派生的公开项目的例子</a></p>
<h5 id="通过邮件的公开项目">通过邮件的公开项目</h5>
<p>使用<code>git format-patch</code>生成mbox文件，它将每一个提交转换为一封电子邮件，其中保留了所有的提交信息。最后通过<code>git send-email</code>发送补丁。</p>
<h4 id="维护项目">维护项目</h4>
<h5 id="在主题分支中工作">在主题分支中工作</h5>
<h5 id="应用来自邮件的补丁">应用来自邮件的补丁</h5>
<ul>
<li>使用<code>git apply</code>应用补丁
<ul>
<li>补丁是通过<code>git diff</code>生成的，可以对补丁进行检查<code>git apply --check</code></li>
<li><code>git apply</code>要么全部应用补丁，要么全部不应用，不会部分应用补丁</li>
<li><code>git apply</code>之后，需要手动暂存并提交</li>
</ul>
</li>
<li>使用<code>git am</code>应用补丁（推荐）
<ul>
<li>补丁是通过<code>git format-patch</code>生成的，此时补丁中包含了作者信息和commit message，因此更加推荐</li>
<li><code>git am</code>是为了读取mbox文件而构建的，mbox是一种用来在单个文本文件中存储一个或多个电子邮件消息的简单纯文本格式</li>
<li><code>git am</code>会自动创建一个新的提交，作者信息和提交消息来自于mbox文件，并自动应用mbox指向的补丁</li>
<li>如果发生冲突，则同样需要手动进行修改，然后暂存，再<code>git am --resolved</code>继续应用下一个补丁</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/u013318019/article/details/114860407">git生成patch和打patch</a></li>
</ul>
<h5 id="检出远程分支">检出远程分支</h5>
<ul>
<li>背景：别人fork了自己的仓库，并且在某个分支上进行了修改，想提交贡献，此时我得到了它的仓库的URL和对应的分支
<ul>
<li>如果想与他人建立长期的合作交流：将其仓库添加为远程仓库，fetch到本地并在本地checkout到该分支，进行测试</li>
<li>如果别人只是偶尔提供一个贡献
<ul>
<li>直接pull到本地（不会将该URL添加为远程仓库），然后切换分支并进行测试</li>
<li>或者使用电子邮件来接受patch（或者使用托管服务）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="确定引入了哪些东西">确定引入了哪些东西</h5>
<ul>
<li>
<p>检查main分支未包含的commit，比如检查某个分支<code>contrib</code>上引入的修改：<code>git log contrib --not main</code></p>
</li>
<li>
<p>如果想具体查看contrib分支上相对于原来main，到底有什么区别（即diff），使用<code>git diff main...contrib</code>，即对contrib分支的最新提交和两个分支的最近共同祖先进行比较（注意三个点）</p>
<ul>
<li>因为在进行contrib分支上的工作时，main分支可能同时继续向前，diff比较时的main分支应该为原来的位置，即为contrib和现在main分支的最近共同祖先</li>
</ul>
</li>
</ul>
<h5 id="将贡献的工作整合进来">将贡献的工作整合进来</h5>
<ul>
<li>
<p>合并工作流：将主题分支合并到main分支，然后删除主题分支</p>
<ul>
<li>如果项目很重要，可以使用两阶段循环合并，即维护两个长期分支（main和develop分支），新代码首先合并到develop分支，打标签发布时才将main分支更新到稳定的develop分支</li>
</ul>
</li>
<li>
<p>为了保持线性的提交历史，可以在 main分支上对贡献来的工作进行变基而不是直接合并。另一种类似效果的方式是，提取分支的补丁，然后应用到当前分支上</p>
</li>
<li>
<p>Rerere：重用已记录的冲突解决方案，是一种简化冲突解决的方法。当启用 rerere 时，Git 将会维护一些成功合并之前和之后的镜像，当 Git 发现之前已经修复过类似的冲突时， 便会使用之前的修复方案，而不需要你的干预。</p>
</li>
</ul>
<h5 id="发布">发布</h5>
<ul>
<li>为发布打标签</li>
<li>生成一个构建号</li>
<li>创建一个归档文件</li>
<li>制作提交简报</li>
</ul>
<h4 id="基于github的工作流">基于Github的工作流</h4>
<h3 id="常见问题">常见问题</h3>
<h4 id="ssh--t-gitgithubcom-连接超时"><code>ssh -T git@github.com</code> 连接超时</h4>
<p>示例：<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-01-29-14:14:58.png" alt="image-20240129141458740" style="zoom:90%;" /></p>
<p><code>ssh -T git@github.com</code>的含义：</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-01-29-14:08:03.png" alt="image-20240129140801719" style="zoom:80%;" />
<p>解决方法：</p>
<ul>
<li>
<p>如果使用ssh协议：修改HostName或者修改Port</p>
<ul>
<li>
<p>在<code>.ssh</code>文件夹下的<code>config</code>文件中修改：<a href="https://zhuanlan.zhihu.com/p/679107398">参考</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">Host github.com 
</span></span><span class="line"><span class="cl">    HostName ssh.github.com
</span></span><span class="line"><span class="cl">    User xxx
</span></span><span class="line"><span class="cl">    IdentityFile xxx
</span></span></code></pre></td></tr></table>
</div>
</div>  <img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-01-29-14:37:47.png" alt="image-20240129143747231" style="zoom: 80%;" />
</li>
</ul>
</li>
<li>
<p>如果使用https协议：<a href="https://zhuanlan.zhihu.com/p/521340971">参考</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Leetcode刷题记录</title>
      <link>https://qinganzhang.github.io/posts/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Thu, 29 Feb 2024 14:54:23 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</guid>
      <description>[toc] tags：【双指针】，【前缀和】，【原地哈希】 【好题】，【不会】，【重要】，【继续看】 方法 双指针 前后定长双指针 前后快慢双指针 左右双向双指针</description>
      <content:encoded><![CDATA[<p>[toc]</p>
<p>tags：【双指针】，【前缀和】，【原地哈希】</p>
<p>【好题】，【不会】，【重要】，【继续看】</p>
<h2 id="方法">方法</h2>
<h3 id="双指针">双指针</h3>
<h4 id="前后定长双指针">前后定长双指针</h4>
<h4 id="前后快慢双指针">前后快慢双指针</h4>
<h4 id="左右双向双指针">左右双向双指针</h4>
<ul>
<li><a href="https://leetcode.cn/problems/valid-triangle-number/description/">611.有效三角形的个数</a>
<ul>
<li>方法一：二重循环a、b，对c进行二分查找（查找最后一个满足<code>a+b&lt;c</code>的c）</li>
<li>方法二：遍历c，左右双指针表示<code>a(nums[i])</code>和<code>b(nums[j])</code>，<a href="https://leetcode.cn/problems/valid-triangle-number/solutions/2432875/zhuan-huan-cheng-abcyong-xiang-xiang-shu-1ex3">参考</a>
<ul>
<li><code>if(nums[i] + nums[j] &gt; c)</code> ，此时有j-i个三角形，j向左走（i向右走无用）</li>
<li><code>if(nums[i] + nums[j] &lt;= c)</code> ，此时有0个三角形，i向右走（j向左走无用）</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/container-with-most-water/description/">11.盛最多水的容器</a>：盛水体积只取决于左右两隔板的高度（木桶理论）
<ul>
<li>区别于接雨水，雨水可能分布在不连续的凹陷处</li>
</ul>
</li>
</ul>
<h4 id="两分支双指针">两分支双指针</h4>
<ul>
<li><a href="https://leetcode.cn/problems/compare-version-numbers/description/">165.比较版本号</a></li>
</ul>
<h3 id="滑动窗口">滑动窗口</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/fruit-into-baskets/">904. 水果成篮</a></p>
<ul>
<li>基于双指针的滑动窗口</li>
<li>必须使用滑动窗口保证水果是连续的，如果只使用哈希表，则可能出现中间有中断的情况</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a>：<a href="https://leetcode.cn/problems/minimum-window-substring/submissions/498126388">代码</a></p>
<ul>
<li>对t统计词频，得到相同的两个ump：<code>tump</code>和<code>tmp_ump</code></li>
<li>只移动右指针，找到s中第一个包含t的区间
<ul>
<li>移动右指针的过程中，逐步递减并erase<code>tmp_ump</code>中的元素，直到<code>tmp_ump</code>为空，此时就找到了s中第一个包含t的区间，同时维护区间的词频<code>win_ump</code></li>
</ul>
</li>
<li>窗口进行移动：将<code>c=s[left++]</code>从<code>win_ump</code>中减一，同时左指针向右移动了一位，
<ul>
<li>如果此时<code>win_ump[c] &gt;= tump[c]</code>，说明c不在t中，或者c是t中是多余重复的，因此continue</li>
<li>如果此时<code>win_ump[c] &lt; tump[c]</code>，说明c是t中的，需要右指针向右移动，再次找到c字符，因此得到了新的窗口</li>
<li>技巧：可以<code>s+=' '</code>，避免最后跳出循环还要移动左指针，</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a> 【重要】</p>
<ul>
<li>同<a href="https://www.nowcoder.com/practice/b56799ebfd684fb394bd315e89324fb4?tpId=295&amp;tqId=1008889&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">最长无重复子数组</a>，都是用左右双指针作为滑动窗口，同时数组做哈希用于判断是否用过该元素</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/description/">1004.最大连续1的个数Ⅲ</a></p>
<ul>
<li>两种思路
<ul>
<li><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/submissions/496425055/">复杂的代码</a>：维护窗口内0的数量，但同时也分情况讨论左右断点的情况</li>
<li><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/submissions/496458757">简洁的代码</a>：找出一个最长的子数组，该子数组中最多有k个0，因此只需要维护窗口内0的数量即可</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="数组二刷">数组【二刷】</h2>
<h3 id="模拟题">模拟题</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/diagonal-traverse/description/">498.对角线遍历</a>：<code>i+j==level</code></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/rotate-image/description/">48.旋转图像</a></p>
<ul>
<li>最重要的是找到原来<code>(i,j)</code>位置的元素，旋转之后在什么位置（<code>(j,n-i-1)</code>）</li>
<li>矩阵变换的方法也是从上面的对应关系来的
<ul>
<li>先转置<code>(j,i)</code>，再水平翻转<code>(j,n-i-1)</code></li>
<li>或者先垂直翻转<code>(n-i-1,j)</code>，再转置<code>(j,n-i-1)</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/spiral-matrix/description/">54.螺旋矩阵</a> 和 <a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></p>
<ul>
<li>按圈遍历，设定四个逐步减小的边界</li>
<li>每圈遍历中，判断新到达的位置是否超出边界，若是则改变方向</li>
</ul>
</li>
</ul>
<h3 id="二分查找">(二分)查找</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 假设v非递减
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="nf">find_first_ge</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回第一个&gt;=target的元素的索引（lower_bound）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">)</span> <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span> <span class="c1">// target is in left part
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span> <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// target is in right part
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span> <span class="c1">// v[mid] == target, 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">left</span><span class="p">;</span> <span class="c1">// now left == right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">find_first_gt</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回第一个&gt;target的元素的索引（upper_bound）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">(</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">target</span><span class="p">)</span> <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">target</span><span class="p">)</span> <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// difference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">find_last_le</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回最后一个&lt;=target的元素的索引
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">find_first_gt</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 即第一个&gt;target的元素的前一个位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">find_last_lt</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 返回最后一个&lt;target的元素的索引
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">find_first_ge</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 即第一个&gt;=target的元素的前一个位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/description/">240.搜索二维矩阵Ⅱ</a>
<ul>
<li>方法一：从右上开始，按照搜索二叉树的逻辑查找</li>
<li>方法二：每行进行一次二分查找</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/find-peak-element/">162.寻找峰值</a>  【继续看】
<ul>
<li>方法一：分治，类似归并排序，递归找最大值</li>
<li>方法二：类似二分查找，判断nums[mid]与nums[mid+1]的大小关系（即判断中点是上坡还是下坡），从而修改左右索引
<ul>
<li>原理是因为开始时left和right都是最小值，此后mid部分永远是高点</li>
<li>细节：在函数体中，left与right不相等，因此mid永远不会等于right，同时left与right是左闭右闭，<a href="https://leetcode.cn/problems/find-peak-element/submissions/494663427">代码</a></li>
</ul>
</li>
</ul>
</li>
<li>搜索旋转排序数组系列：是否有重复数字，如果有重复数组，首先移动左右端点，保证left和right指向的元素不同。多使用原语表示（比如<code>find_first_gt</code>、<code>find_first_ge</code>）
<ul>
<li><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/description/">33.搜索旋转排序数组</a>：首先二分找到分界点，然后在左边或者右边再次进行二分（此时范围是有序的）</li>
<li><a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/solutions/704686/sou-suo-xuan-zhuan-pai-xu-shu-zu-ii-by-l-0nmp/">81.搜索旋转排序数组Ⅱ</a>：尝试将问题转换到<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array/description/">33.搜索旋转排序数组</a>，<a href="https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/solutions/2606169/luo-ji-qing-xi-de-81sou-suo-xuan-zhuan-p-34qr/">我的题解</a></li>
<li><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array-ii/">154.寻找旋转排序数组中的最小值Ⅱ</a>   <a href="https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=295&amp;tqId=23269&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D295">BM21旋转数组的最小数字</a></li>
</ul>
</li>
</ul>
<h3 id="排序">排序</h3>
<ul>
<li>
<p>快排：在partition时，如果选left作为pivot，则需要先移动右边的指针，<a href="https://www.cnblogs.com/MAKISE004/p/16909610.html">原理</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">qSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">){</span> <span class="c1">// [left, right]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">left</span> <span class="o">&gt;=</span> <span class="n">right</span><span class="p">)</span> <span class="k">return</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">left</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">])</span> <span class="k">return</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="p">{</span><span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span> <span class="k">return</span> <span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 左中右，取中间大小的值，放在最左边
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">begin</span> <span class="o">=</span> <span class="n">left</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">right</span><span class="p">,</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">left</span> <span class="o">+</span> <span class="n">right</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">min</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]),</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">==</span> <span class="n">pivot</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">pivot</span><span class="p">)</span> <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 注意元素是覆盖的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span><span class="p">)</span> <span class="o">--</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="p">)</span> <span class="o">++</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span> <span class="c1">// now: left == right
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 缩小中轴范围，尤其针对重复元素多的数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&gt;</span> <span class="n">begin</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">--</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">right</span> <span class="o">&lt;</span> <span class="n">end</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">++</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">qSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">left</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">qSort</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">right</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">end</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>归并排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 归并排序需要辅助数组，因为前后两个有序数组是连着的，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="kt">int</span> <span class="n">begin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">in</span><span class="p">){</span> <span class="c1">// [begin, end)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">begin</span> <span class="o">&gt;=</span> <span class="n">end</span> <span class="o">||</span> <span class="n">begin</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span> <span class="k">return</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">begin</span> <span class="o">+</span> <span class="n">end</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span> <span class="c1">// [begin, mid)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">mergeSort</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span> <span class="c1">// [mid, end)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// now left part and right part are all sorted, merge them into out
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">begin</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">mid</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">begin</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span> <span class="c1">// stable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">)</span> <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">)</span> <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">in</span><span class="p">[</span><span class="n">j</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// copy out back to in
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">begin</span><span class="p">;</span> <span class="n">s</span> <span class="o">&lt;</span> <span class="n">end</span><span class="p">;</span> <span class="o">++</span><span class="n">s</span><span class="p">)</span> <span class="n">in</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">s</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&amp;tqId=23260&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D295">BM20 数组中的逆序对</a>： 归并方式，前后两段数据都是有序数组，比如前面一段数组中<code>nums[a]</code>大于后面一段数组中<code>nums[b]</code>，则前面数组中<code>[a:mid)</code>这一段元素都大于<code>nums[b]</code>，这些都是逆序对，只需在归并时统计这样的长度即可。<a href="https://www.nowcoder.com/practice/96bd6684e04a44eb80e6a68efc0ec6c5?tpId=295&amp;tqId=23260&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D295">代码</a></li>
</ul>
</li>
<li>
<p>堆排序</p>
<ul>
<li>
<p>第一种方法：数组原地构建最大堆，数组原地进行排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">heapSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">buildMaxHeap</span><span class="p">(</span><span class="n">nums</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> <span class="c1">// 将最大堆的首元素（最大元素）放在数组后面位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">adjust</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">--</span><span class="n">len</span><span class="p">);</span> <span class="c1">// 首元素变了，因此需要调整，同时堆的长度减一
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">buildMaxHeap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">){</span> <span class="c1">// n/2-1是最后一个非叶节点，依次向上检测和调整每个非叶节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">adjust</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">adjust</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 当前节点的索引为idx，在[0, len)范围内是最大堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">leftSon</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">rightSon</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// largeIdx指向{根节点，左孩子，右孩子}中较大的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">leftSon</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">leftSon</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">leftSon</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">rightSon</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">rightSon</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">largeIdx</span><span class="p">])</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">rightSon</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">largeIdx</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">largeIdx</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">            <span class="n">idx</span> <span class="o">=</span> <span class="n">largeIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第二种方法：数组构建最小堆，依次弹出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 手写堆
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">minHeap</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">heap</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">minHeap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span><span class="o">:</span> <span class="n">heap</span><span class="p">(</span><span class="n">nums</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">        <span class="n">len</span> <span class="o">=</span> <span class="n">heap</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// build minHeap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="o">--</span><span class="n">i</span><span class="p">)</span> <span class="n">adjust</span><span class="p">(</span><span class="n">i</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">adjust</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">leftSon</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">rightSon</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">idx</span><span class="p">;</span> <span class="c1">// largeIdx指向{根节点，左孩子，右孩子}中较大的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">leftSon</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">heap</span><span class="p">[</span><span class="n">leftSon</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">heap</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">leftSon</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">rightSon</span> <span class="o">&lt;</span> <span class="n">len</span> <span class="o">&amp;&amp;</span> <span class="n">heap</span><span class="p">[</span><span class="n">rightSon</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">heap</span><span class="p">[</span><span class="n">largeIdx</span><span class="p">])</span> <span class="n">largeIdx</span> <span class="o">=</span> <span class="n">rightSon</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="n">largeIdx</span> <span class="o">!=</span> <span class="n">idx</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="n">swap</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">heap</span><span class="p">[</span><span class="n">largeIdx</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">                <span class="n">idx</span> <span class="o">=</span> <span class="n">largeIdx</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>        
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">top</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">];}</span> <span class="c1">// return min value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kt">void</span> <span class="nf">pop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">swap</span><span class="p">(</span><span class="n">heap</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">heap</span><span class="p">[</span><span class="o">--</span><span class="n">len</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">adjust</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 或者调用优先队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">heapSort</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">priority_queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">pq</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">n</span><span class="p">:</span> <span class="n">nums</span><span class="p">)</span> <span class="n">pq</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">pq</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span><span class="n">ans</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pq</span><span class="p">.</span><span class="n">top</span><span class="p">());</span> <span class="n">pq</span><span class="p">.</span><span class="n">pop</span><span class="p">();}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/largest-number/description/">179.最大数</a></p>
<ul>
<li>巧妙的自定义排序规则：<code>a+b&lt;b+a</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/description/">215.数组中的第k个最大元素</a> 【重要】</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">findKthLargest</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">,</span> <span class="kt">int</span> <span class="n">begin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">end</span><span class="p">,</span> <span class="kt">int</span> <span class="n">k</span><span class="p">){</span> <span class="c1">// [begin, end), 快排逻辑
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">begin</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span> <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">begin</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">begin</span><span class="o">+</span><span class="mi">2</span> <span class="o">==</span> <span class="n">end</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">begin</span><span class="p">)</span> <span class="k">return</span> <span class="n">max</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">begin</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">begin</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">k</span> <span class="o">==</span> <span class="n">begin</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">min</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">begin</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">begin</span><span class="o">+</span><span class="mi">1</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="n">begin</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">end</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// [left, right]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="p">)</span> <span class="o">--</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">pivot</span><span class="p">)</span> <span class="o">++</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">nums</span><span class="p">[</span><span class="n">right</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span> <span class="c1">// now left == right        
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="o">==</span> <span class="n">mid</span><span class="p">)</span> <span class="k">return</span> <span class="n">pivot</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">mid</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">mid</span> <span class="o">&gt;</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">--</span><span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">findKthLargest</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">begin</span><span class="p">,</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span> <span class="c1">// 注意这里还是传入[begin, mid+1)而非[begin, mid)，因为经过while优化，此时mid可以退到和begin位置相同
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">{</span> <span class="c1">// k-1 &gt; mid
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span><span class="p">(</span><span class="n">mid</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">==</span> <span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">++</span><span class="n">mid</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">findKthLargest</span><span class="p">(</span><span class="n">nums</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">end</span><span class="p">,</span> <span class="n">k</span><span class="p">);</span> <span class="c1">// 注意这里还是传入[mid, end)而非[mid+1, end)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><a href="https://leetcode.cn/problems/smallest-k-lcci/description/">剑指40.最小k个数</a>：快排逻辑</p>
</li>
</ul>
<h3 id="套路题">套路题</h3>
<ul>
<li><a href="https://leetcode.cn/problems/longest-common-prefix/description/">14.最长公共前缀</a>
<ul>
<li>按行比，按列比，都行</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209.长度最小的子数组</a>
<ul>
<li>方法一：贪心+双指针</li>
<li>方法二：前缀和+二分
<ul>
<li>细节较多：前缀和是inclusive的还是exculsive的（<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/submissions/494871477">这里</a>用的是exculsive的），二分找的是第一个大于val的位置</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/diao-zheng-shu-zu-shun-xu-shi-qi-shu-wei-yu-ou-shu-qian-mian-lcof/description/">剑指21.调整数组顺序使奇数位于偶数前面</a>
<ul>
<li>如果不需要保持奇数/偶数内部的相对顺序，左右双指针向内走</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/majority-element/description/">169.多数元素</a>
<ul>
<li>投票法：维护一个元素值value和计数值cnt，数组元素等于value时累加cnt，不等于value时递减cnt，当cnt==0时更新value</li>
<li>可以保证最后众数的cnt至少为1</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/longest-consecutive-sequence/description/">128.最长连续序列</a>
<ul>
<li>哈希表<code>unordered_map&lt;int, bool&gt;</code>（bool表示是否使用过该数字），元素往前往后分别试探</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/next-permutation/description/">31.下一个排列</a> ： <a href="https://leetcode.cn/problems/next-permutation/solutions/2547378/jiao-ni-yi-bu-yi-bu-xie-chu-zui-jian-dai-saaz">题解</a>  与<a href="https://leetcode.cn/problems/next-greater-element-iii/description/">556.下一个更大元素Ⅲ</a>相同
<ul>
<li>从后往前遍历，找到一个最长的后缀，这个后缀是逆序的（即该后缀从前往后看递减，从后往前看递增）</li>
<li>该最长后缀前面一个元素<code>nums[idx]</code>，是小于最长后缀的第一个元素的</li>
<li>在该最长后缀中，找到最后一个<code>&gt;nums[idx]</code>的元素<code>nums[pos]</code>，然后交换（因此最长后缀又变长了一位）</li>
<li>最后<code>reverse[idx+1, end)</code>，因此数组前面部分不动，后面部分得到了下一个排列</li>
</ul>
</li>
</ul>
<h3 id="综合">综合</h3>
<ul>
<li><a href="https://leetcode.cn/problems/subarray-sum-equals-k/description/">560.和为K的子数组</a>：【前缀和】+【哈希表】
<ul>
<li>通过前缀和可以将区间和转换为两个点的查询</li>
<li>通过哈希表记录遍历过的位置的前缀和（value是特定前缀和的计数）</li>
<li>现在已知一个点和中间差值，通过哈希找到另一个点</li>
<li>区别<a href="https://leetcode.cn/problems/minimum-size-subarray-sum/">209.长度最小的子数组</a></li>
</ul>
</li>
</ul>
<h3 id="字符串">字符串</h3>
<h4 id="模拟">模拟</h4>
<ul>
<li><a href="https://leetcode.cn/problems/add-strings/">415.字符串相加</a>  <a href="https://leetcode.cn/problems/multiply-strings/description/">43.字符串相乘</a></li>
<li><a href="https://leetcode.cn/problems/string-compression/description/">443.压缩字符串</a></li>
<li><a href="https://leetcode.cn/problems/zigzag-conversion/description/">6.Z字形变换</a></li>
<li><a href="https://leetcode.cn/problems/validate-ip-address/description/">468.验证IP地址</a>：先判断有<code>.</code>还是<code>:</code>，然后根据<code>.</code>或者<code>:</code>分割之后，逐段判断</li>
<li><a href="https://leetcode.cn/problems/reverse-integer/description/">7.整数反转</a>：用字符串表示数字</li>
<li><a href="https://leetcode.cn/problems/fraction-to-recurring-decimal/description/">166.分数到小数</a>：首先注意符号问题，然后注意能否整除，最后逐次<code>*10</code>模拟竖式除法</li>
</ul>
<h4 id="套路">套路</h4>
<ul>
<li>
<p>翻转字符串的妙用：局部翻转后再整体反转（或反过来），达到子串位置颠倒的效果</p>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">LCR 182. 动态口令</a></p>
</li>
</ul>
</li>
<li>
<p>KMP系列</p>
<ul>
<li><a href="https://www.programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%80%E8%AF%BE">实现strStr</a></li>
</ul>
</li>
</ul>
<h2 id="链表二刷">链表【二刷】</h2>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></p>
<ul>
<li>
<p>注意递归写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">ListNode</span><span class="o">*</span> <span class="nf">reverseList</span><span class="p">(</span><span class="n">ListNode</span><span class="o">*</span> <span class="n">head</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 递归，返回反转链表的头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">head</span><span class="o">==</span><span class="k">nullptr</span> <span class="o">||</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">==</span><span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span> <span class="n">head</span><span class="p">;</span> <span class="c1">// 当前是空节点，或者是最后一个节点    
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">ListNode</span><span class="o">*</span> <span class="n">newHead</span> <span class="o">=</span> <span class="n">reverseList</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span> <span class="c1">// 已经将head-&gt;next部分的链表处理完毕
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">next</span>  <span class="o">=</span> <span class="n">head</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">newHead</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>迭代写法1：遍历，修改相邻节点的指针指向</p>
</li>
<li>
<p>迭代写法2：创建<strong>虚拟头节点</strong>，进行<strong>头插法</strong>（遍历链表，插入到虚拟头节点之后）</p>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II</a> 【好题】</p>
<ul>
<li>快慢指针可以判断有环</li>
<li><a href="https://www.programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html#%E6%80%9D%E8%B7%AF">如何找到这个环的入口</a></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/sort-list/description/">148.排序链表</a></p>
<ul>
<li>递归方法：（自顶向下的）归并排序，时间复杂度O(n logn)，空间复杂度O(logn)</li>
<li>迭代方法：自底向上的归并排序，时间复杂度O(n logn)，空间复杂度O(1)</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/reorder-list/description/">143.重排链表</a> 【好题】</p>
<ul>
<li>先快慢指针寻找中点，然后后半段链表原地反转，最后两个链表合并</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/merge-k-sorted-lists/description/">23.合并K个升序链表</a></p>
<ul>
<li>最小堆：<code>priority_queue&lt;ListNode*, vector&lt;ListNode*&gt;, decltype(cmp)&gt; pq;</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/add-two-numbers-ii/description/">445.两数相加Ⅱ</a></p>
<ul>
<li>一种方法是反转链表，另一种是使用栈进行计算</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/lru-cache-lcci/description/">LRU缓存</a> 【好题】<a href="https://www.nowcoder.com/practice/5dfded165916435d9defb053c63f1e84?tpId=295&amp;tqId=1024689&amp;ru=%2Fexam%2Foj&amp;qru=%2Fta%2Fformat-top101%2Fquestion-ranking&amp;sourceUrl=%2Fexam%2Foj">代码</a></p>
<ul>
<li>
<p>数据结构：双向链表维护最近更新的节点，<code>unordered_map&lt;int,Node*&gt;</code>实现从key到链表中节点的映射</p>
</li>
<li>
<p>设置dummyHead与dummyTail，可以避免专门判断head与tail是否为空（因为是双向链表，所以要设置头尾两个dummyNode）</p>
</li>
<li>
<p>在Node中需要同时包含key和value，因为当删除某个node时，需要知道其对应的key，从而删除哈希表中对应的表项</p>
</li>
<li>
<p>在向链表插入节点或是从链表中删除节点时，不要忘记更新map</p>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/lfu-cache/description/">LFU缓存</a> 【好题】</p>
<ul>
<li>方法一：map记录key到Node的映射，使用平衡二叉树保存Node的结构</li>
<li>方法二：双哈希表</li>
</ul>
</li>
</ul>
<h3 id="递归">递归</h3>
<p>递归写法代码量一般比较少，也比较优雅，尤其在没有头节点的情况下避免对头节点另外判断</p>
<ul>
<li><a href="https://leetcode.cn/problems/copy-list-with-random-pointer/description/">138.随机链表的复制</a></li>
<li><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">21.合并两个有序链表</a></li>
</ul>
<p><a href="https://www.nowcoder.com/practice/f23604257af94d939848729b1a5cda08?tpId=295&amp;tags=&amp;title=&amp;difficulty=0&amp;judgeStatus=0&amp;rp=0&amp;sourceUrl=%2Fexam%2Fcompany">单链表的排序</a>：归并排序</p>
<h2 id="哈希表二刷">哈希表【二刷】</h2>
<ul>
<li>
<p>有时可以直接使用数组进行哈希，有时需要使用map（unordered_map）或set（unordered_set）进行哈希，注意如果键无法进行哈希，则无法使用unordered_map或unordered_set（比如vector容器就没有hash方法，不能作为unordered_map或unordered_set的键）</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/happy-number/description/">202.快乐数</a>：使用哈希表空间复杂度为O(n)，将其视为快慢指针此时空间复杂度为O(1)</p>
</li>
<li>
<p>n数之和系列：给定n数之和</p>
<ul>
<li>
<p>给定一个数组，要求返回其中一个元组下标：哈希</p>
<ul>
<li><a href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></li>
</ul>
</li>
<li>
<p>给定一个数组，要求返回所有元组下标：先排序，外层遍历，内层左右指针向中移动，根据当前三数之和确定左指针还是右指针移动，同时注意跳过相同的数字</p>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/3sum/">15. 三数之和</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/4sum/">18. 四数之和</a>：注意四数之和可能超过int的范围</p>
</li>
</ul>
</li>
<li>
<p>给定多个数组，要求返回元组的个数：哈希</p>
<ul>
<li><a href="https://leetcode.cn/problems/4sum-ii/">454. 四数相加 II</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>【原地哈希】</p>
<ul>
<li>
<p>例题：<a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/description/">LCR 120.寻找文件副本</a>：可能有多个重复数字，返回任意其一</p>
<ul>
<li>调整数组为<code>nums[i]==i</code>，如果将i写入到nums[i]时发现原来已经<code>nums[i]==i</code>，说明i就是重复数字</li>
<li>方法：<a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/submissions/494982727/">通过交换实现调整</a></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/find-all-duplicates-in-an-array/description/">442.数组中重复的数据</a>：数字出现1或2次，返回所有出现两次的数字</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/find-the-duplicate-number/description/">287.寻找重复数</a>：只有一个重复数，返回之；但是不能修改原数组</p>
<ul>
<li>Floyd判圈</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/missing-number/description/">268.丢失的数字</a>：只有一个缺失的数字，返回之</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/first-missing-positive/submissions/495038497">41.缺失的第一个正数 </a>：首先要判断数字是否在<code>[0,n]</code>的范围内</p>
<ul>
<li>
<p>方法一：标记</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">minNumberDisappeared</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// write code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="nl">n</span><span class="p">:</span> <span class="n">nums</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="n">n</span> <span class="o">=</span> <span class="n">INT_MAX</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="c1">// 将数组中的元素都转换为正数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">abs</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()){</span> <span class="c1">// 如果位置j在数组内
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">abs</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="c1">// 将位置j的数值标记为负
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span> 
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span> <span class="c1">// 找一个没有标记过的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>方法二：交换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">minNumberDisappeared</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// write code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">nums</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">nums</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
</span></span><span class="line"><span class="cl">            <span class="n">swap</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">nums</span><span class="p">[</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">i</span><span class="p">)</span> <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>总结：虽然原地哈希的核心部分都是判断当前位置j的元素<code>j=nums[i]</code>为索引时，是否已经写入<code>j?=nums[j]</code>，但是中间很多细节略微不同</p>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/subarray-sums-divisible-by-k/">974.和可被K整除的子数组</a>：前缀和+哈希表</p>
<ul>
<li>前缀和实际上是前缀和的取模，使用哈希表记录模和其计数</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/integer-to-roman/description/">12.整数转罗马数字</a></p>
<ul>
<li>哈希表记录数字到字符串的映射，注意使用<code>map&lt;int, string, greater&lt;int&gt;&gt;</code>将key从大到小排列</li>
</ul>
</li>
</ul>
<h2 id="栈与队列二刷">栈与队列【二刷】</h2>
<ul>
<li>用栈模拟队列：一个输入栈，一个输出栈</li>
<li>用队列模拟栈：只需要一个队列，将元素进行循环弹入弹出</li>
<li>优先队列
<ul>
<li>注意优先队列如何自定义比较顺序</li>
</ul>
</li>
</ul>
<h3 id="栈">栈</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/basic-calculator-ii/description/">基本计算器Ⅱ</a>：遇到加减法入栈（即栈内都进行加法运算），有两种不太相同的写法：比如<code>a+b*c</code></p>
<ul>
<li>
<p>方法一：<a href="https://leetcode.cn/problems/basic-calculator-ii/submissions/497469850">暂存数字</a>。比如解析<code>+</code>时，暂存的是数字a，此时可以入栈；比如解析<code>*</code>时，暂存的是数字b（运算符前面的数字），此时先不能入栈，需要继续向后解析完c之后，更新暂存的数字</p>
</li>
<li>
<p>方法二：<a href="https://leetcode.cn/problems/basic-calculator-ii/submissions/497709896">暂存数字前的运算符</a>，更简洁。比如解析b时，当前暂存的运算符是<code>+</code>（数字前面的运算符），因此遇到新的运算符<code>*</code>时，根据需要出栈入栈</p>
<ul>
<li>技巧：将<code>a+b*c</code>处理成<code>a+b*c+0</code>，且开始时暂存的运算符是<code>+</code></li>
</ul>
</li>
<li>
<p>但是当表达式中含有括号时，可以递归，但是此时不太好在递归函数传入的表达式参数后面<code>+0</code>，具体代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl">    <span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">).</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">(</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// s += &#34;+0&#34;; // 本来想在表达式末尾加上0，但是因为使用的使用，所以无法使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numSt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 相当于在表达式前面加上 0+
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">char</span> <span class="n">preSymbol</span> <span class="o">=</span> <span class="sc">&#39;+&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span><span class="p">(;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">idx</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// cout &lt;&lt; idx &lt;&lt; &#34; &#34; &lt;&lt; num &lt;&lt; endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="n">num</span> <span class="o">=</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">                <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">func</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="n">num</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">idx</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">==</span> <span class="err">&#39;</span><span class="p">)</span><span class="err">&#39;</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="c1">// 此时这几个变量的顺序: numSt.top() preSymbol num s[idx]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="k">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">-</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">                    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">numSt</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">numSt</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">                    <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tmp</span> <span class="o">*</span> <span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="p">}</span>
</span></span><span class="line"><span class="cl">                <span class="n">preSymbol</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="n">idx</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">                <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">-</span><span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">preSymbol</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">numSt</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">numSt</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">numSt</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">tmp</span> <span class="o">*</span> <span class="n">num</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">numSt</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span> <span class="o">+=</span> <span class="n">numSt</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="n">numSt</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nf">make_pair</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span> <span class="n">idx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/decode-string/">394.字符串解码</a>：【重要】</p>
<ul>
<li>方法一：【双栈】<a href="https://leetcode.cn/problems/decode-string/submissions/497922753">写法</a>，数字栈与string栈
<ul>
<li>字符串出栈时，每个元素需要先reverse，连起来字符串之后要再次reverse（因为出栈是逆序的，每个元素内部有时顺序的）</li>
<li>数字栈使用<code>stack&lt;int&gt;</code>，string栈使用<code>deque&lt;string&gt;</code>进行模拟，方便最后进行出栈</li>
</ul>
</li>
<li>方法二：<a href="https://leetcode.cn/problems/decode-string/submissions/497938583">递归写法</a>
<ul>
<li>全局的索引<code>idx</code>，函数传参<code>string</code>和重复数量<code>cnt</code></li>
<li>如果遇到<code>[</code>，则进入递归；如果遇到<code>]</code>，则退出递归</li>
<li>递归就是顺着累加字符串，不需要reverse</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/valid-parenthesis-string/description/">678.有效的括号字符串</a>：</p>
<ul>
<li>方法一：【双栈】
<ul>
<li>括号一个栈<code>st</code>，星号一个栈<code>star_st</code>，栈内存放下标</li>
<li>括号按照传统方法出入栈，星号直接入星号栈</li>
<li>在遍历完成之后，括号栈依次出栈，
<ul>
<li>如果当前是<code>(</code>，需要保证<code>star_st.top()</code>大于<code>(</code>的下标</li>
<li>如果当前是<code>)</code>，需要保证<code>star_st.top()</code>小于<code>)</code>的下标（极其注意需要当前<code>star_st.top()</code>可能大于<code>)</code>的下标，需要while依次出栈，与上面逻辑不同）</li>
</ul>
</li>
</ul>
</li>
<li>方法二：贪心
<ul>
<li>维护未匹配的<code>(</code>的数量可能的最大值和最小值，遇到星号时，最小值减一，最大值加一
<ul>
<li>如果最大值<code>&lt;0</code>，则字符串无效</li>
</ul>
</li>
<li>遍历完成后，只有最小值=0时，字符串才可能有效</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/min-stack/description/">最小栈</a>  <a href="https://leetcode.cn/problems/min-stack/solutions/42521/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-38/">参考</a></p>
<ul>
<li>方法一：【双栈】
<ul>
<li>一个普通栈，一个最小栈（用来记录最小值）</li>
<li>如果当前元素<code>==minStack.top()</code>，也要push/pop最小栈</li>
</ul>
</li>
<li>方法二：使用一个栈，并维护当前最小值<code>minVal</code>
<ul>
<li>入栈：如果当前元素<code>&lt;=minVal</code>，则先将minVal入栈，然后再将当前元素入栈，同时更新minVal的值；否则直接入栈</li>
<li>技巧：minVal初始值设定为最大值</li>
</ul>
</li>
<li>方法三：使用一个栈
<ul>
<li>每次入栈元素为<code>当前元素-minVal -&gt; st.top()</code>，如果结果是负数，说明minVal需要更新<code>minVal=当前元素</code></li>
<li>每次出栈或top，如果栈顶元素是正数，则<code>原来的元素=minVal+st.top()</code>；如果栈顶元素是负数，则说明当前minVal经过更新变得更小，<code>原来的元素=minVal</code>，复原原来的<code>minVal=原来的元素(即旧的minVal)-st.top()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="单调队列">单调队列</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/sliding-window-maximum/">239. 滑动窗口最大值</a></p>
<ul>
<li>
<p>方法一：大根堆，维护一个大根堆，里面存放数组索引，但是比较方法是按照对应元素大小进行比较，出队列时肯定是当前最大元素，而且可以判断该元素是否在窗口范围内</p>
<ul>
<li>最坏情况如果是一个递增序列，每次push都是<code>log(i)</code>的复杂度，总的复杂度为<code>sum(log(i))=O(n log(n))</code></li>
</ul>
</li>
<li>
<p>方法二：单调队列，维护一个<strong>递减的<code>deque</code></strong>，里面存放数组索引，从后面<code>pop_back</code>可以比较当前元素与队尾元素，保持队列递增；从前面<code>pop_front</code>可以保持元素位于窗口范围内</p>
<ul>
<li>最坏情况是<code>O(n)</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">maxInWindows</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">num</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// write code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">len</span> <span class="o">||</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">num</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">deque</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">dq</span><span class="p">;</span> <span class="c1">// 滑动窗口，里面存放数组下标，对应的数组元素递减（队首元素对应数组元素最大）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">idx</span><span class="p">){</span> <span class="c1">// 注意遍历到滑动窗口大小-1的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">dq</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="p">[</span><span class="n">dq</span><span class="p">.</span><span class="n">back</span><span class="p">()]</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="n">dq</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">dq</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 每次遍历idx，对应的都是滑动窗口的末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">idx</span> <span class="o">=</span> <span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="o">++</span><span class="n">idx</span><span class="p">,</span> <span class="o">++</span><span class="n">left</span><span class="p">){</span> 
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">dq</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">dq</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">left</span><span class="p">)</span> <span class="n">dq</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span> <span class="c1">// dq前面元素不在滑窗内了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">dq</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="p">[</span><span class="n">dq</span><span class="p">.</span><span class="n">back</span><span class="p">()]</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span> <span class="n">dq</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span> <span class="c1">// dq后面新加的元素更大
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">dq</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">idx</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">dq</span><span class="p">.</span><span class="n">front</span><span class="p">()]);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="单调栈">单调栈</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/daily-temperatures/">739. 每日温度</a>：从左往右，找到第一个比当前元素大的元素</p>
</li>
<li>
<p>单调递增栈（从栈顶到栈底递增，栈顶元素为已经遍历过部分的最小值），如果当前元素nums[i]大于栈顶元素nums[top]，则从左往右nums[top]第一个比它大的元素是nums[i]</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/next-greater-element-i/">496. 下一个更大元素 I</a>：单调栈+哈希表</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/next-greater-element-ii/">503. 下一个更大元素 II</a>：朴素想法是将循环数组展开，但是可以相同的单调栈代码跑两遍（第二遍继续使用第一遍剩下的单调栈）</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/trapping-rain-water/">42. 接雨水</a>  【重要】</p>
</li>
<li>
<p>方法一：单调栈，从栈顶到栈底递增（反映到柱子上就是往下的台阶）</p>
<ul>
<li>
<p>横着接水：如果当前元素<code>height[i]</code>高于栈顶的柱子<code>H=height[st.top()]</code>，则栈顶的柱子<code>H</code>为最低高度，pop之后的栈顶为左边比H更高的位置，当前位置i为右边比H更高的位置，横着按层累加</p>
</li>
<li>
<p>时间复杂度O(n)，空间复杂度O(n)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">height</span><span class="p">[</span><span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()]</span> <span class="o">&lt;</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()];</span> <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">                <span class="n">ans</span> <span class="o">+=</span> <span class="p">(</span> <span class="n">min</span><span class="p">(</span><span class="n">height</span><span class="p">[</span><span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()],</span> <span class="n">height</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">-</span> <span class="n">mid</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>方法二：双指针</p>
<ul>
<li>
<p>竖着接水：维护左右边历史最高柱子，往中间移动的过程中：</p>
<ul>
<li>如果右边低，当前水位最高只能按照低的来，<code>ans += rightHeight - height[right--]</code></li>
<li>左边同理</li>
</ul>
</li>
<li>
<p>时间复杂度O(n)，空间复杂度O(1)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">trap</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">height</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">height</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">leftHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="n">rightHeight</span> <span class="o">=</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">leftHeight</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">leftHeight</span><span class="p">,</span> <span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="n">rightHeight</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">rightHeight</span><span class="p">,</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="p">]);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">leftHeight</span> <span class="o">&lt;=</span> <span class="n">rightHeight</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 左边低
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">ans</span> <span class="o">+=</span> <span class="n">leftHeight</span> <span class="o">-</span> <span class="n">height</span><span class="p">[</span><span class="n">left</span><span class="o">++</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">ans</span> <span class="o">+=</span> <span class="n">rightHeight</span> <span class="o">-</span> <span class="n">height</span><span class="p">[</span><span class="n">right</span><span class="o">--</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>方法三：两个数组，分别从左向右和从右向左记录当前最高水位，也是竖着接水</p>
</li>
<li>
<p>类似题目：<a href="https://www.nowcoder.com/practice/3d8d6a8e516e4633a2244d2934e5aa47?tpId=295&amp;tqId=2284579&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">盛水最多的容器</a></p>
<ul>
<li>这个题目使用双指针的方式</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84. 柱状图中最大的矩形 </a> 【重要】</p>
</li>
<li>
<p>单调栈，从栈顶到栈底递减（反应到柱子上就是往上的台阶）</p>
<ul>
<li>找每个柱子左右两边第一个低于该柱子的位置：如果当前元素<code>height[i]</code>低于栈顶的柱子<code>H=height[st.top()]</code>，有：
<ul>
<li><code>i-1</code>位置的柱子一定不低于H</li>
<li>pop之后的栈顶位置+1一定不低于H（注意与接雨水的细微区别）</li>
<li>因此可以算面积</li>
</ul>
</li>
</ul>
</li>
<li>
<p>时间复杂度O(n)，空间复杂度O(n)</p>
</li>
<li>
<p>技巧：在原来height数组开头<code>height.insert(heights.begin(), 0)</code>，在结尾<code>height.push_back(0)</code>，可以保证最后栈中无元素</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/maximal-rectangle/description/">85.最大矩形</a></p>
<ul>
<li>每行统计高度，因此每行跑一个<a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84. 柱状图中最大的矩形 </a></li>
<li>时间/空间复杂度均为O(mn)</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/remove-k-digits/">402. 移掉 K 位数字</a></p>
<ul>
<li>单调栈：从栈底到栈顶递增，同时维护栈的顺序和<code>k&gt;0</code></li>
</ul>
</li>
</ul>
<h3 id="优先队列">优先队列</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/top-k-frequent-elements/description/">347.前K个高频元素</a>：小根堆，遍历过程中逐步弹出堆顶，剩下的就是高频元素</p>
<ul>
<li>
<p>注意优先队列的写法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">cmp</span> <span class="o">=</span> <span class="p">[](</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">p1</span><span class="p">,</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">p2</span><span class="p">){</span><span class="k">return</span> <span class="n">p1</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">p2</span><span class="p">.</span><span class="n">second</span><span class="p">;};</span>
</span></span><span class="line"><span class="cl"><span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="k">decltype</span><span class="p">(</span><span class="n">cmp</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">pq</span><span class="p">(</span><span class="n">cmp</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>手写堆</p>
</li>
<li>
<p>最小的k个元素/最小的第k个元素：维护一个最大堆，堆顶是当前最大元素（k个最小的元素中最大的一个）；如果新来的数比堆顶元素小，则弹出堆顶，新元素入堆</p>
</li>
<li>
<p><a href="https://www.nowcoder.com/practice/9be0172896bd43948f8a32fb954e1be1?tpId=295&amp;tqId=23457&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">数据流中的中位数</a>：两个优先队列，前一半数组用最大堆，后一半数组用最小堆</p>
<ul>
<li>但是注意，为了保证后一半数组都大于前一半数组，新来的数需要先push到前面的最大堆中，然后再取top，放到后面的最小堆中</li>
<li>同时需要保证前面最大堆的大小&gt;=后面最小堆的大小</li>
</ul>
</li>
</ul>
<h2 id="二叉树二刷">二叉树【二刷】</h2>
<h3 id="遍历">遍历</h3>
<h4 id="dfs">DFS</h4>
<ul>
<li>
<p>递归写法：</p>
<ul>
<li>确定递归函数的参数和返回值</li>
<li>确定终止条件</li>
<li>确定单层递归的逻辑</li>
</ul>
</li>
<li>
<p>迭代写法：</p>
<ul>
<li>
<p>道理：当前arrive（或access）的节点，未必就是要add进数组的节点</p>
<ul>
<li>前序：第一次arrive的节点，就是add进数组的节点</li>
<li>中序：第二次arrive的节点，就是add进数组的节点</li>
</ul>
</li>
<li>
<p>前序：空节点不入栈</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">preorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">        <span class="n">TreeNode</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">        <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>中序：使用now指向当前arrive的节点，now指向可以为空，此时出栈一个元素，now指向其右节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">inorderTraversal</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">stack</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">*&gt;</span> <span class="n">st</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">TreeNode</span><span class="o">*</span> <span class="n">now</span> <span class="o">=</span> <span class="n">root</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">now</span> <span class="o">!=</span> <span class="k">nullptr</span> <span class="o">||</span> <span class="o">!</span><span class="n">st</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 比如中间-&gt;可能now指向空指针，此时stack不能为空
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">//         -&gt;可能stack为空，但是now指向右节点
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 最后now指向某个节点的右空树，且stack都出栈已经为空，此时就是结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span><span class="p">(</span><span class="n">now</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">){</span> 
</span></span><span class="line"><span class="cl">            <span class="n">now</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="c1">// st.top()是第二次访问，可以add进数组
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">now</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">{</span> <span class="c1">// now != nullptr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="n">st</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">v</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>后序：可以按照【根右左】的顺序遍历，然后reverse（即左右根）</p>
</li>
</ul>
</li>
</ul>
<h4 id="bfs">BFS</h4>
<p>迭代写法：注意是否要分层；如果不用分层，则不用计算每层的size，更简单一些</p>
<p>递归写法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">levelOrder</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">vv</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">vv</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">vv</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">bfs</span><span class="p">(</span><span class="n">TreeNode</span><span class="o">*</span> <span class="n">root</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;&amp;</span> <span class="n">vv</span><span class="p">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">root</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="k">return</span> <span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">vv</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">depth</span><span class="p">)</span> <span class="n">vv</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">vv</span><span class="p">[</span><span class="n">depth</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">val</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">)</span> <span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">,</span> <span class="n">vv</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">)</span> <span class="n">bfs</span><span class="p">(</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">,</span> <span class="n">vv</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/description/">199.二叉树的右视图</a>：注意递归的写法，将深度和当前数组的size比较</li>
</ul>
<h3 id="二叉树">二叉树</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/description/">222.完全二叉树的节点个数 </a> 【好题】</p>
<ul>
<li>如何判断满二叉树？向左递归深度==向右递归深度</li>
<li>完全二叉树中，某个节点左子树和右子树中，至少有一个是满二叉树，<a href="https://leetcode.cn/problems/count-complete-tree-nodes/solutions/2076036/labuladong-ru-he-ji-suan-wan-quan-er-cha-f55d/">参考</a></li>
<li>复杂度分析：
<ul>
<li>每次递归需要计算当前节点的高度，O(log n)</li>
<li>最多需要调用“树的高度”次，O(log n)</li>
<li>相乘，O(log n) * O(log n)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://www.programmercarl.com/0110.%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E9%A2%98%E5%A4%96%E8%AF%9D">110.平衡二叉树</a></p>
<ul>
<li>注意二叉树节点【深度】和【高度】的差异
<ul>
<li>高度：该节点到叶子节点的最长，求高度适合用前序遍历</li>
<li>深度：根节点到该节点的路径，求深度适合用后序遍历</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://www.programmercarl.com/0112.%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C.html#%E6%80%9D%E8%B7%AF">112.路径总和</a></p>
<ul>
<li>注意分辨递归什么时候有返回值
<ul>
<li>不用完整搜索整棵二叉树，找到其中一条路径即可，需要返回值（比如本题），比如if判断当前节点后直接返回。或者说<strong>遍历</strong>的思维</li>
<li>需要完整搜索整棵二叉树，或者说二叉树与回溯的结合
<ul>
<li>需要返回值（比如递归求深度）</li>
<li>不需要返回值</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/description/">124.二叉树中的最大路径和 </a> 【好题】，【不会】</p>
<ul>
<li><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/submissions/493249101/">递归写法</a></li>
</ul>
</li>
<li>
<p><a href="https://www.programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html">236.二叉树的最近公共祖先</a> 【好题】</p>
<ul>
<li>递归方法：
<ul>
<li>后序遍历：分别在左右子树中找p和q的最近公共祖先，然后根据找到的情况进行处理
<ul>
<li>如果子树递归返回nullptr，说明子树不包含p或者q</li>
<li>如果子树递归返回非nullptr，说明子树包含p、或q、或pq</li>
</ul>
</li>
<li>理解返回值：返回值是以root为根的子树中，p或q的最近公共祖先，如果该子树不包含p或者q，则返回nullptr
<ul>
<li>如果<code>root==p || root==q</code>，则当前root至少为一个节点祖先，另一个节点可能在这个子树上，也可能不在这个子树上，但至少返回root</li>
<li>如果当前root为根的子树，没有p或者q（左右子树都是nullptr），只能返回nullptr</li>
<li>如果当前root为根的子树，左右子树分别有p和q，则root为最近公共祖先，返回root</li>
<li>如果当前root为根的左子树或右子树其中一个，同时有p和q，则只能将其最近公共祖先向上返回</li>
</ul>
</li>
</ul>
</li>
<li>迭代方法：使用map记录子节点到父节点的映射，再使用一个map记录p到root的路径，最后q向上回到root过程中找到最近同时访问的节点</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/diameter-of-binary-tree/">543.二叉树的直径</a></p>
<ul>
<li>维护一个计算每个节点最大深度的递归函数deepest</li>
<li>在计算节点左右子树的过程中，更新树的直径</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/maximum-width-of-binary-tree/description/">662.二叉树最大宽度</a>：中间nullptr也算</p>
<ul>
<li><code>pair&lt;TreeNode*, unsigned long long&gt;</code>保存节点和其id，×2得到其左节点id，×2+1得到其右节点id，最后id相减</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/description/">116.填充每个节点的下一个右侧节点指针</a></p>
<ul>
<li>常规方法：使用队列进行迭代</li>
<li>递归方法：递归函数中传入两个节点指针</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/second-minimum-node-in-a-binary-tree/description/">671.二叉树中第二小的节点</a>：root是最小的，遍历一遍，比root大的其中最小的</p>
</li>
<li>
<p>区分<a href="https://leetcode.cn/problems/subtree-of-another-tree/">572.另一棵树的子树</a> 和 <a href="https://leetcode.cn/problems/shu-de-zi-jie-gou-lcof/description/">LCR 143.子结构判断</a>(这个题目关于空节点本身没有说清楚)</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/all-nodes-distance-k-in-binary-tree/description/">863.二叉树中所有距离为K的结点</a></p>
<ul>
<li>遍历一遍得到子节点到父节点的map，从而变树为图，然后dfs</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/xu-lie-hua-er-cha-shu-lcof/description/">297.二叉树的序列化与反序列化</a> 【好题】</p>
<ul>
<li>第一种方法：使用括号表示编码（BNF编码）进行序列化，使用递归函数进行反序列化，<a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/494473198">代码</a>
<ul>
<li>BNF编码：比如postOrder BNF编码<code>(左)(右)(根)</code></li>
<li>反序列化时，递归函数中需要使用栈，从而确定左右子树在字符串中的范围</li>
</ul>
</li>
<li>第二种方法：使用逗号表示编码按照层序遍历进行序列化，使用迭代方法进行反序列化，<a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/494466348">代码</a>
<ul>
<li>序列化方式与leetcode样例给出方式相同，不需要特殊表示换层</li>
<li>反序列化同样使用队列，字符串遍历的过程中入栈出栈</li>
</ul>
</li>
<li>第三种方法：使用逗号表示编码进行序列化，使用递归函数进行反序列化，<a href="https://leetcode.cn/problems/serialize-and-deserialize-binary-tree/submissions/494514519">代码</a>
<ul>
<li>序列化表示形式与第二种方法相同，但是好像只能使用前序遍历
<ul>
<li>如果使用中序/后序，字符串中第一个元素解码后是nullptr，在反序列化的递归函数中第一个元素就直接返回，不会处理后面的字符串了</li>
<li>如果使用前序，字符串中第一个元素肯定不为nullptr，可以递归下去</li>
</ul>
</li>
<li>反序列化过程需要维护一个全局的索引，从而在不同的递归函数之间确定当前处理的元素的位置</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/find-duplicate-subtrees/description/">652.寻找重复的子树</a></p>
<ul>
<li>使用基于后序遍历的二叉树序列化，模板类似<a href="https://leetcode.cn/problems/xu-lie-hua-er-cha-shu-lcof/description/">297.二叉树的序列化与反序列化</a>中第一种方法，但是序列化格式可以简化</li>
<li>在后序遍历进行序列化的过程中，同时维护<code>unordered_map&lt;string, pair&lt;TreeNode*, int&gt;&gt;</code>的映射</li>
</ul>
</li>
</ul>
<h3 id="二叉搜索树">二叉搜索树</h3>
<ul>
<li>
<p><a href="https://www.programmercarl.com/0098.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E9%80%92%E5%BD%92%E6%B3%95">98.验证二叉搜索树</a> <a href="https://www.programmercarl.com/0530.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE.html">530.二叉搜索树中的最小绝对差 </a> <a href="https://www.programmercarl.com/0501.%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E4%BC%97%E6%95%B0.html#%E9%80%92%E5%BD%92%E6%B3%95">501.二叉搜索树中的众数</a></p>
<ul>
<li>原理：二叉搜索树中序遍历是有序的
<ul>
<li>可以是递归写法：维护一个全局变量，记录上一个节点的指针pre</li>
<li>可以是迭代写法：中序迭代写法</li>
</ul>
</li>
<li><a href="https://www.programmercarl.com/0098.%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html#%E9%80%92%E5%BD%92%E6%B3%95">98.验证二叉搜索树</a>极易想成简单左右子树判断，但此时根节点和右子树的左孩子的关系是无法判断的，只能中序遍历判断有序</li>
</ul>
</li>
<li>
<p><a href="https://www.programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E9%80%92%E5%BD%92">450.删除二叉搜索树中的节点</a> 【好题】</p>
<ul>
<li>对比递归方法与迭代方法：都是五种情况
<ul>
<li>迭代方法：小心删除根节点时的特判</li>
<li><a href="https://www.programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E9%80%92%E5%BD%92">递归方法</a>：使用root-&gt;left或root-&gt;right接受返回值，避免记录pre节点（同时也避免了删除根节点时pre==nullptr的判断）</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/description/">LCR 174.二叉搜索树的第k大节点</a></p>
<ul>
<li>中序倒序，维护全局变量的计数器</li>
</ul>
</li>
<li>
<p><a href="https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&amp;&amp;tqId=11179&amp;qru=/ta/coding-interviews/question-ranking">426.将二叉搜索树转换为有序的双向链表</a></p>
<ul>
<li>递归函数返回有序双向链表的头</li>
</ul>
</li>
<li>
<p><a href="http://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/description/">LCR 152.验证二叉搜索树的后序遍历序列</a></p>
<ul>
<li>注意是二叉搜索树，因此可以确定根与左右子树，从而递归判断</li>
<li>第二种方法：单调栈+后序逆序，<a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/submissions/494227458/">代码</a>，<a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/solutions/150225/mian-shi-ti-33-er-cha-sou-suo-shu-de-hou-xu-bian-6/">参考</a>，不太会
<ul>
<li>比如当前是根节点（栈顶）</li>
<li>如果下一个节点大于栈顶元素，则在右侧，因此入栈</li>
<li>如果下一个节点小于栈顶元素，则出栈（该节点在其祖先节点的右边），找到其祖先节点，后序节点应该都在该祖先节点的左边</li>
<li>假设有一个极大的虚拟根节点，整棵树都在其左边</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/recover-binary-search-tree/description/">99.恢复二叉搜索树</a></p>
<ul>
<li>遍历过程中，记录这两个节点，<a href="https://leetcode.cn/problems/recover-binary-search-tree/solutions/1429782/by-richard-az-j904">参考</a></li>
</ul>
</li>
</ul>
<h3 id="综合-1">综合</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/path-sum-iii/description/">437.路径总和Ⅲ</a> 【好题】，【二叉树】+【前缀和】+【回溯】</p>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/path-sum-iii/submissions/494355245">递归方法</a>：以每个节点为root（O(n)），再计算包含root时的路径数量（O(n)），复杂度O(n^2)</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/path-sum-iii/submissions/494373044">前缀和</a>：在前序遍历的过程中，记录当前节点的前缀和，并遍历过的节点的前缀和保存到map中（value是特定前缀和的个数）</p>
<ul>
<li>根据当前前缀和和root-&gt;val，可以得到当前分支上符合要求的路径的个数</li>
<li>当当前root返回时，当前的前缀和也需要从map中复原</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="回溯">回溯</h2>
<ul>
<li>
<p>回溯</p>
<ul>
<li>
<p>思路：二叉树/多叉树的递归遍历</p>
<ul>
<li>视为二叉树的话，每个元素选择或不选，每个dfs中有两条路径</li>
<li>视为多叉树的话，在每个for循环中进行选择，注意选择之后的回溯复原就表示没有选择当前元素，然后可以选择后面的元素</li>
</ul>
</li>
<li>
<p>写法：数组直接作为全局变量，进行多叉树的遍历时使用一个<code>startIdx</code>来表示当前搜索数组的位置</p>
</li>
<li>
<p>细节问题：</p>
<ul>
<li>使用startIdx还是从0开始</li>
<li>能否对数组排序？
<ul>
<li>能，如果需要去重，维护一个全局的used数组
<ul>
<li>used数组的索引，表示nums的下标（一般是这个，比如有重复元素时，使用<code>str[i]==str[i-1 &amp;&amp; isVisit[i-1]</code>来判断），还是nums元素的值</li>
</ul>
</li>
<li>不能，如果需要去重，则每一层应该维护一个局部的set</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>组合问题：从N个数中选k个数，有几种选法</p>
<ul>
<li><a href="https://leetcode.cn/problems/combinations/description/">77.组合</a>：模板题</li>
<li><a href="https://leetcode.cn/problems/combination-sum-iii/">216.组合总数Ⅲ</a>：直接在for循环中进行剪枝</li>
<li><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a>：使用字符串数组（或者二维数组）来进行数字到字符串的对应</li>
<li><a href="https://leetcode.cn/problems/combination-sum/">39.组合总和</a>：</li>
<li><a href="https://leetcode.cn/problems/combination-sum-ii/description/">40.组合总和Ⅱ</a>：使用<code>used</code>数组进行去重，初始化used=false：
<ul>
<li>当数组中相邻两个元素相等且used=true时，表示这两个元素在同一个树枝上（在一个分支上），此时不用去重（即组合内部使用了相同的元素）</li>
<li>当数组中相邻两个元素相等且user=false时，表示这两个元素在递归的同一层（同一树层上），此时表示后面会有相同的组合出现，因此需要去重（continue）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>切割问题：一个字符串不同切割方式，有几种方式</p>
<ul>
<li><a href="https://leetcode.cn/problems/palindrome-partitioning/description/">131.分割回文串</a>：逐个分割每个元素进行判断，同样是递归的树形结构</li>
<li><a href="https://leetcode.cn/problems/restore-ip-addresses/description/">93.复原IP地址</a>：感觉写成三叉树的递归方式，而非是for循环的递归方式更直观和易于理解
<ul>
<li>三叉树方式：从当前位置开始的子串，分别作为一个字符、两个字符、三个字符进行匹配</li>
</ul>
</li>
</ul>
</li>
<li>
<p>子集问题：N个数中相关子集的个数</p>
<ul>
<li><a href="https://leetcode.cn/problems/subsets/description/">78.子集</a>：递归的树形结构的所有节点</li>
<li><a href="https://leetcode.cn/problems/subsets-ii/">90.子集Ⅱ</a>：理解“树枝去重”与“树层去重”的逻辑，对于相同的数字，前面的可以选或不选，后面的必须不能选</li>
<li><a href="https://leetcode.cn/problems/non-decreasing-subsequences/description/">491.递增子序列</a>：同样需要去重，但不能使用全局的used数组来去重
<ul>
<li>90.子集Ⅱ中数组是有序的，可以保证相同的数字都是挨着的，</li>
<li>491.递增子序列中数组无序，如果按上面的方式，只能保证相同的连着的数字是去重的，相同的不挨着的数字会重复，因此只能每一层维护一个局部的used数组，动态判断该数字之前是否出现过</li>
</ul>
</li>
</ul>
</li>
<li>
<p>排列问题：N个数的不同排列方式</p>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/permutations/description/">46.全排列</a>：</p>
<ul>
<li>方法一：使用used数组记录该数字是否使用过，仔细考虑for循环和回溯（回退）的过程</li>
<li>方法二：使用swap和startIdx，每次减小排列的规模</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/permutations-ii/">47.全排列Ⅱ</a>：对比491.递增子序列</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/reconstruct-itinerary/description/">332.重新安排行程</a>：</p>
<ul>
<li>错误理解和写法：每个机场只到一次（因此使用一个数组记录该节点是否到过）</li>
<li>正确理解：所有路径都走且只走一次（可能比如北京到上海有好几张票，都要使用，因此使用<code>unordered_map&lt;string, map&lt;string, int&gt;&gt;</code>来进行建图，然后dfs,回溯更新int的值）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>棋盘问题：</p>
<ul>
<li><a href="https://leetcode.cn/problems/n-queens/description/">51.N皇后</a>：画出搜索的树形结构，dfs中逐层放置皇后</li>
<li><a href="https://leetcode.cn/problems/sudoku-solver/description/">37.解数独</a>：
<ul>
<li>二维的递归，注意最外层for循环的是数组/棋盘，而不是各种可能性或组合（即选或不选）</li>
<li>判断合法性时，只是判断当前元素是否行、列、方格重复</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="贪心">贪心</h2>
<h3 id="区间贪心">区间贪心</h3>
<ul>
<li><a href="https://leetcode.cn/problems/jump-game/">55. 跳跃游戏</a>：维护一个当前可以跳跃到的最右边界</li>
<li><a href="https://leetcode.cn/problems/jump-game-ii/">45.跳跃游戏Ⅱ</a></li>
<li><a href="https://leetcode.cn/problems/non-overlapping-intervals/">435.无重叠区域</a>
<ul>
<li>当有重叠区域时，更新右端点<code>right = min(right, v[1]);</code>的含义：如果重叠，使得右端点最小
<ul>
<li>如果旧的right更小，则移除掉新来的区间</li>
<li>如果新来的区间<code>v[1]</code>更小，则移除原来的区间</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/description/">452.用最少数量的箭引爆气球 </a> 对比<a href="https://leetcode.cn/problems/non-overlapping-intervals/">435.无重叠区域</a>
<ul>
<li>按照每个点的start进行排序，当前重叠范围为<code>[start, right]</code>，start递增，维护逐渐缩小的重叠区间<code>right = min(right, points[i][1])</code></li>
</ul>
</li>
<li><a href="https://www.nowcoder.com/practice/4edf6e6d01554870a12f218c94e8a299?tpId=295&amp;tqId=1267319&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj">主持人调度（二）</a>：排序+最小堆
<ul>
<li>按开始时间、结束时间先排序区间</li>
<li>使用最小堆保存当前正在进行的所有活动的结束时间，堆顶是最早的结束时间
<ul>
<li>因此，如果新来的某次活动，开始时间小于堆顶的最早结束时间，则这个活动可以连起来</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="两个维度贪心">两个维度贪心</h3>
<ul>
<li><a href="https://leetcode.cn/problems/queue-reconstruction-by-height/description/">406.根据身高重建队列</a>：先从高到低排队，再插队，复杂度O(n^2)</li>
</ul>
<h3 id="上下坡">上下坡</h3>
<ul>
<li><a href="https://leetcode.cn/problems/wiggle-subsequence/description/">376.摆动序列</a>
<ul>
<li>方法一：<a href="https://leetcode.cn/problems/wiggle-subsequence/submissions/498171028">贪心</a>，也就是统计一共有几次变化</li>
<li>方法二：<a href="https://leetcode.cn/problems/wiggle-subsequence/submissions/498176392">带空间优化的动规</a>，<code>up[i], down[i]</code>为以<code>nums[i]</code>为结尾（最后一个是上升或下降）的摆动序列长度</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/candy/description/">135.分发糖果</a>：正着统计上坡，反着统计上坡</li>
<li><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/description/">122.买卖股票的最佳时机Ⅱ</a>：直接累加上坡的差值</li>
<li><a href="https://leetcode.cn/problems/gas-station/description/">134.加油站</a>：找剩余油量的前缀和中最小的位置</li>
</ul>
<h2 id="动态规划">动态规划</h2>
<h3 id="总结">总结</h3>
<p>动规五部曲：</p>
<ul>
<li>确定dp数组的含义和下标的含义</li>
<li>确定递推公式</li>
<li>确定dp数组的初始化</li>
<li>确定遍历顺序</li>
<li>举个例子</li>
</ul>
<h3 id="单纯动规">单纯动规</h3>
<h4 id="直接寻找使用最优子结构">直接寻找/使用最优子结构</h4>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/interleaving-string/description/?show=1">97.交错字符串</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/decode-ways/description/?show=1">91.解码方法</a></p>
<ul>
<li>最优子结构好找（相当于递推），只是中间判断有点多</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/word-break/description/">139.单词拆分</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/coin-change/description/">322.零钱兑换</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/integer-break/description/">343.整数拆分</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/maximal-square/description/">221.最大正方形</a></p>
<ul>
<li>子结构需要从三个方向考虑</li>
<li>使用滚动数组优化，注意有斜向上的依赖，需要使用一个变量记录</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/out-of-boundary-paths/description/?show=1">576.出界的路径数</a>：题目一般，就像递推</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/minimum-falling-path-sum/description/">931.下降路径最小和</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/triangle/description/">120.三角形最小路径和</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/li-wu-de-zui-da-jie-zhi-lcof/?show=1">剑指 Offer 47. 礼物的最大价值 </a>同 <a href="https://leetcode.cn/problems/minimum-path-sum/description/">64.最小路径和</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/JEj789/description/?show=1">剑指Ⅱ 091.粉刷房子</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/dungeon-game/description/">174.地下城游戏</a></p>
<ul>
<li>从右下到左上的动规</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/binary-trees-with-factors/description/">823.带因子的二叉树</a></p>
</li>
<li></li>
</ul>
<h4 id="01背包">01背包</h4>
<ul>
<li><a href="https://leetcode.cn/problems/target-sum/description/">494.目标和</a>：要装满背包，有几种方法
<ul>
<li>注意，0可以特殊处理，也可以不用特殊处理</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/partition-equal-subset-sum/description/">416.分割等和子集</a>： 给定背包容量，能不能装满这个背包
<ul>
<li>方法一：dp[j]就表示背包容量为j时，能否将背包装满</li>
<li>方法二：视为标准01背包，物品价值和重量相等，最后看容量为j的背包里最大价值
<ul>
<li><a href="https://leetcode.cn/problems/last-stone-weight-ii/description/">1049.最后一块石头的重量Ⅱ</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/last-stone-weight-ii/description/">1049.最后一块石头的重量Ⅱ</a>：
<ul>
<li>首先转换成标准01背包：分成两堆石头，一堆小，一堆大，让小的那堆尽量接近一半</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/ones-and-zeroes/description/">474.一和零</a>：给定背包容量，装满背包最多有多少个物品
<ul>
<li>注意背包是二维的（长对应0的数量，宽对应1的数量）</li>
</ul>
</li>
</ul>
<h4 id="排列数与组合数">排列数与组合数</h4>
<ul>
<li><a href="https://leetcode.cn/problems/combination-sum-iv/">377.组合总和Ⅳ</a>：算组合数</li>
<li><a href="https://leetcode.cn/problems/climbing-stairs/">22.爬楼梯</a>：进阶版爬楼梯（每次可以爬[1 - m]个台阶）其实是一个完全背包下计算组合数的问题
<ul>
<li><a href="https://www.programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.html#%E6%80%9D%E8%B7%AF">参考</a></li>
</ul>
</li>
</ul>
<h4 id="打家劫舍系列">打家劫舍系列</h4>
<ul>
<li><a href="https://leetcode.cn/problems/house-robber/description/">198.打家劫舍</a>：
<ul>
<li>不要硬套01背包，01背包只是动规中很套路的一个模板；除了直接题目可以直接套模板，剩下的还是要具体分析出来递推公式</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/house-robber-ii/">213.打家劫舍Ⅱ</a>
<ul>
<li>拆环为链，拆分成两种情况，各跑一遍</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/house-robber-iii/">337.打家劫舍Ⅲ</a>：<a href="https://www.programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html#%E6%80%9D%E8%B7%AF">树形DP</a>
<ul>
<li>每个节点有一个状态数组</li>
<li>在后序遍历中，得到左右子树的状态，更新当前节点的状态</li>
</ul>
</li>
</ul>
<h4 id="买卖股票的最佳时机系列">买卖股票的最佳时机系列</h4>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/">121.买卖股票的最佳时机</a></p>
<ul>
<li>dp数组表示持有/不持有股票，第0天持有即买入</li>
<li><strong>划分状态</strong>
<ul>
<li>首先为什么标准01背包不需要针对每个背包的容量分成两种状态的数组？
<ul>
<li>动规原理是最优子结构，标准01背包中物品之间是相互独立的，不存在某件放入a物品后必须放入b物品这样的关联</li>
</ul>
</li>
<li>其次为什么打家劫舍问题也不需要针对每一间房屋分成两种状态的数组？
<ul>
<li>首先可以分，而且公式写出来也很清晰，在比如树形DP中还必须要分</li>
<li>但是打家劫舍中，只是相邻两个房屋之间有关联，公式中可以直接将关联表示出来</li>
</ul>
</li>
<li>买卖股票中为什么必须要分成两种状态的数组？
<ul>
<li>因为买卖股票的两天之间的关联不是固定的</li>
<li>买卖股票中还需要注意两种状态的定义：是持有/不持有，而非买入/卖出</li>
</ul>
</li>
<li>什么是状态？
<ul>
<li>第i天进行第j笔交易，是持有还是不持有</li>
</ul>
</li>
</ul>
</li>
<li>注意如何保证只买入一次？区别<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122.买卖股票的最佳时机Ⅱ</a></li>
<li>加上手续费相同<a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/">714.买卖股票的最佳时机含手续费</a></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122.买卖股票的最佳时机Ⅱ</a></p>
</li>
<li>
<p><a href="https://www.programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.html#%E6%80%9D%E8%B7%AF">123.买卖股票的最佳时机Ⅲ</a></p>
<ul>
<li>
<p>每天有多种状态：第i天进行第j笔交易，是持有还是不持有</p>
</li>
<li>
<p>有一个技巧可以将空间复杂度降到O(1)，<a href="https://www.programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII.html#%E6%8B%93%E5%B1%95">参考</a></p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-09-07-15:54:21.png" alt="QQ图片20230907155407" style="zoom:80%;" />
</li>
<li>
<p><a href="https://www.programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html#%E6%80%9D%E8%B7%AF">188.买卖股票的最佳时机Ⅳ</a> 同理</p>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown/">309.最佳买卖股票时机含冷冻期</a></p>
<ul>
<li>细化状态（比如不持有股票可以细分为今天卖出还是维持原来不持有的状态）</li>
<li>画出状态转移图</li>
</ul>
</li>
</ul>
<h4 id="序列问题">序列问题</h4>
<h5 id="递增序列数组">递增序列/数组</h5>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300.最长递增子序列  </a>LIS</p>
<ul>
<li>
<p>更像是记忆化搜索或者递推，而非动规</p>
</li>
<li>
<p>对比<a href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence/">674.最长连续递增序列</a>（或者可称为最长递增数组？），是否连续决定是否内部要使用一个for循环找到比当前元素小的位置</p>
</li>
<li>
<p>可以使用贪心+二分实现更低的复杂度</p>
<ul>
<li>
<p>贪心：d[len]表示长度为len的LIS，末尾元素的最小值，最小值越小越好</p>
</li>
<li>
<p>二分：d[]数组单调递增</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="c1">// d[len]:长度为len的LIS，末尾元素的最小值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">[</span><span class="n">len</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">    <span class="n">d</span><span class="p">[</span><span class="o">++</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 二分查找：find max l, nums[i] &gt; d[l]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 因此d[l+1]找到一个更小的末尾元素nums[i]：d[l+1]&gt;nums[i]&gt;d[l]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">d</span><span class="p">[</span><span class="n">l</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">return</span> <span class="n">len</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://leetcode.cn/problems/longest-increasing-subsequence/solutions/147667/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">参考</a></p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/number-of-longest-increasing-subsequence/description/">673.最长递增子序列的个数</a></p>
<ul>
<li>使用贪心+树状数组实现O(nlogn)的复杂度，<a href="https://leetcode.cn/problems/number-of-longest-increasing-subsequence/solutions/1007341/gong-shui-san-xie-lis-de-fang-an-shu-wen-obuz/">参考</a></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/russian-doll-envelopes/description/">354.俄罗斯套娃信封问题</a></p>
<ul>
<li>先排序，w正排，h倒排（保证相同w时，大h不能包含小h）</li>
<li>通过排序将二维LIS转换为一维的LIS</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/largest-divisible-subset/description/">368.最大整除子集</a></p>
<ul>
<li>与LIS方法差不多</li>
</ul>
</li>
</ul>
<h5 id="重复数组公共序列子数组序列问题">重复数组、公共序列、子数组/序列问题</h5>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">718.最长重复子数组</a></p>
<ul>
<li>使用滚动数组进行优化：<a href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray/">代码</a>
<ul>
<li>内层逆序：之所以逆序，一是因为不将物品重复放入，二是因为可能依赖是斜向上的，逆序可以直接访问未更新之前的数值</li>
<li>也可以使用顺序，不过要将原来未更新之间的数值记录下来</li>
</ul>
</li>
<li>其实是这个题目对遍历顺序没有要求，因为if中dp依赖左上旧值，else中dp直接是0
<ul>
<li>其他题目中，else中可能需要用到刚才更新过的值，因此只能从前向后遍历</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/longest-common-subsequence/description/">1143.最长公共子序列 </a> 和 <a href="https://leetcode.cn/problems/uncrossed-lines/description/">1035.不相交的线</a></p>
<ul>
<li>使用滚动数组进行优化：使用两个数组来回调替，或者直接记录依赖的旧值</li>
<li>极其注意如果使用一维数组优化，同时使用pre来记录斜上角的值时，此时<code>tmp=dp[j]</code>还是<code>tmp=dp[j+1]</code>，tmp保存的是当前dp要被覆盖的值</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/maximum-subarray/description/">53.最大子数组和</a></p>
<ul>
<li>遇到数组和第一直觉总是前缀和，但是这个题目使用动规很简单</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/is-subsequence/description/">392.判断子序列</a></p>
<ul>
<li>可以使用双指针</li>
<li>使用动规：状态转移方程很类似
<ul>
<li>dp可以表示相同序列的长度</li>
<li>dp也可以是bool数组，表示s[0, i]是否为t[0, j]的子序列
<ul>
<li>使用滚动数组优化二维数组时，注意将初始化方式从原来的二维情况下转换到一维情况下，比如当i=0时容易记起初始化，但是i=1,2,3&hellip;之后，dp[0]或者dp数组开头几个数字就容易忘记初始化，<a href="https://leetcode.cn/problems/is-subsequence/submissions/464079888/">代码</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/distinct-subsequences/description/">115.不同的子序列</a></p>
<ul>
<li>代码模板是<a href="https://leetcode.cn/problems/is-subsequence/description/">392.判断子序列</a>，只是递推公式需要多考虑一下</li>
</ul>
</li>
</ul>
<h5 id="字符串操作">字符串操作</h5>
<ul>
<li><a href="https://leetcode.cn/problems/delete-operation-for-two-strings/description/">583.两个字符串的删除操作</a>
<ul>
<li>动规方式1：先求出最长公共子序列，再相减</li>
<li>动规方式2：dp直接表示删除的最小步数，逻辑相同
<ul>
<li>注意原来使用二维数组时，有一定初始化方式；使用一维数组进行优化时，dp[0]很容易忘记初始化，<a href="https://leetcode.cn/problems/delete-operation-for-two-strings/submissions/">代码</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/minimum-ascii-delete-sum-for-two-strings/description/">712.两个字符串的最小ASCII删除和</a></li>
<li><a href="https://leetcode.cn/problems/edit-distance/">72.编辑距离</a>
<ul>
<li>当word1[i]与word2[j]不相同时，如果进行插入和删除，只需要考虑将word1[i]当前字符插入或删除</li>
</ul>
</li>
<li><a href="https://www.nowcoder.com/practice/05fed41805ae4394ab6607d0d745c8e4?tpId=117&amp;tags=&amp;title=&amp;diffculty=0&amp;judgeStatus=0&amp;rp=1&amp;tab=answerKey">牛客NC35 编辑距离二</a>
<ul>
<li>有O(nlogn)的算法吗？？？</li>
</ul>
</li>
</ul>
<h5 id="回文相关">回文相关</h5>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/palindromic-substrings/">647.回文子串</a>：【好题】，<a href="https://www.programmercarl.com/0647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html#%E6%9A%B4%E5%8A%9B%E8%A7%A3%E6%B3%95">分析</a></p>
<ul>
<li>i倒着遍历，j顺着遍历</li>
<li>有<strong>时dp数组的含义并不是直接求什么，定义什么</strong>
<ul>
<li>如果$dp[i][j]$表示$s[i:j]$内的回文子串的数量，当s[i]==s[j]时，此时无法判断$s[i+1:j-1]$是否为回文串，由此无法确定递推公式中是否要+1，<a href="https://leetcode.cn/problems/palindromic-substrings/submissions/465238949/">错误代码</a></li>
<li>$dp[i][j]$表示$s[i:j]$是否为回文串，在递推公式之后根据true or false进行累加，<a href="https://leetcode.cn/problems/palindromic-substrings/submissions/443143742/">正确代码</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/longest-palindromic-substring/description/">5.最长回文子串</a></p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/longest-palindromic-subsequence/">516.最长回文子序列</a></p>
<ul>
<li><strong>注意看是子序列（不必连续）还是子串（必须连续）</strong></li>
<li>这个回文动规中，dp的含义，就是求什么定义什么</li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/description/">1312.让字符串成为回文串的最少插入次数</a></p>
</li>
</ul>
<h4 id="其他">其他</h4>
<ul>
<li><a href="https://leetcode.cn/problems/maximum-product-subarray/description/">152.乘积最大子数组</a>：【好题】，也是分状态，但是其中另一个状态隐含在题目中，需要分析，很巧</li>
</ul>
<h4 id="第一次几乎完全不会">第一次几乎完全不会</h4>
<ul>
<li><a href="https://leetcode.cn/problems/longest-valid-parentheses/description/">32.最长有效括号</a></li>
</ul>
<h3 id="动规单调队列">动规+单调队列</h3>
<ul>
<li><a href="https://leetcode.cn/problems/jump-game-vi/description/">1696.跳跃游戏</a>： 模板题</li>
<li><a href="https://leetcode.cn/problems/constrained-subsequence-sum/description/">14253带限制的子序列和</a>：【好题】
<ul>
<li>比1696在动规上多了一点</li>
</ul>
</li>
</ul>
<h2 id="图论">图论</h2>
<h3 id="dfs与bfs">DFS与BFS</h3>
<ul>
<li>
<p><a href="https://leetcode.cn/problems/all-paths-from-source-to-target/description/">797.所有可能的路径</a>：DFS+回溯</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/number-of-islands/description/">200.岛屿数量</a>：DFS，BFS模板题</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/number-of-enclaves/">1020.飞地的数量</a>：第一阶段原地修改原来的二维数组标记，第二阶段再次遍历</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/surrounded-regions/description/">130.被围绕的区域</a>：原地修改二维数组标记</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/making-a-large-island/description/">827.最大人工岛</a>：保存中间计算结果（岛屿面积），避免重复计算</p>
<ul>
<li>首先遍历，每个岛屿进行编号，同时使用map记录id到岛屿面积的映射</li>
<li>对于水块，上下左右累加岛屿面积</li>
</ul>
</li>
<li>
<p><a href="">127.单词接龙</a>：</p>
<blockquote>
<p>单词个数n，单词长度m</p>
</blockquote>
<ul>
<li>方法一：BFS内部，对单词进行遍历，找到相邻的单词，最坏情况复杂度O(nnm)</li>
<li>方法二：BSF内部，对当前单词逐字母进行替换，判断替换后的单词是否在词表中，复杂度O(26*n)</li>
</ul>
</li>
<li>
<p><a href="https://www.nowcoder.com/practice/7a71a88cdf294ce6bdf54c899be967a2?tpId=295&amp;tqId=1076860&amp;ru=/exam/oj&amp;qru=/ta/format-top101/question-ranking&amp;sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3D%25E7%25AE%2597%25E6%25B3%2595%25E7%25AF%2587%26topicId%3D295">BM61 矩阵最长递增路径 </a>  DFS+动规</p>
<ul>
<li>
<p>DFS的模板，动规的公式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 从(x,y)到(xx,yy)递增
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">if</span><span class="p">(</span><span class="n">inBound</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span><span class="n">yy</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">mat</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">mat</span><span class="p">[</span><span class="n">xx</span><span class="p">][</span><span class="n">yy</span><span class="p">]){</span>
</span></span><span class="line"><span class="cl">    <span class="n">dfs</span><span class="p">(</span><span class="n">mat</span><span class="p">,</span> <span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">);</span> <span class="c1">// DFS计算dp[xx][yy]的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">dp</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">max</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">xx</span><span class="p">][</span><span class="n">yy</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="并查集">并查集</h3>
<ul>
<li>
<p>并查集：一个用数组表示的森林</p>
<ul>
<li>当存在u-&gt;v的有向边时，添加到并查集：<code>father[v] = u; // v的father是u</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/find-if-path-exists-in-graph/">1971.寻找图中是否存在路径</a>：模板题</p>
</li>
<li></li>
</ul>
<h2 id="数学">数学</h2>
<h3 id="模拟-1">模拟</h3>
<ul>
<li><a href="https://leetcode.cn/problems/palindrome-number/description/">9.回文数</a>：
<ul>
<li>空间复杂度<code>O(1)</code>的方法：原来数字取模除十的过程中，与反转后的数组比较大小</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/factorial-trailing-zeroes/description/">172.阶乘后的零</a>：实际上就是找因子5的个数</li>
</ul>
<h3 id="位运算">位运算</h3>
<ul>
<li>
<p>常用技巧：对于<code>int n</code></p>
<ul>
<li>获取n的最低位的1：<code>n &amp; (-n)</code></li>
<li>将n的最低位1变为0：<code>n &amp; (n-1)</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/number-of-1-bits/description/">191.位1的个数</a>：</p>
<ul>
<li>循环检查二进制位：<code>if(n &amp; (1 &lt;&lt; i)) ++cnt</code></li>
<li>lsb翻转：<code>n &amp; (n-1)</code>结果为将n的二进制lsb变为0，因此：<code>while(n) {n &amp;= (n-1); ++cnt;}</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/single-number/description/">136.只出现一次的数字</a>：数组异或，原理是异或具有交换律</p>
</li>
<li>
<p><a href="https://leetcode.cn/problems/single-number-ii/description/">137.只出现一次的数字Ⅱ</a>：</p>
<ul>
<li>对于32位int，统计每一个bit中1的个数cnt，如果cnt无法整除3，则只出现一次的数字在当前bit为1，<code>ans |= (1 &lt;&lt; i)</code></li>
</ul>
</li>
<li>
<p><a href="https://leetcode.cn/problems/single-number-iii/description/">260.只出现一次的数字Ⅲ</a>：分组异或</p>
<ul>
<li>
<p><code>xorsum</code>一定不为0，否则所有数字都出现两次，假设两个出现一次的数字为a和b</p>
</li>
<li>
<p><code>xorsum</code>的最低有效位lsb，则一定是a的lsb=1，b的lsb=0（或反过来）</p>
<ul>
<li>为什么要取最低有效位？为了实现分组，a和b在最低有效位不同，</li>
</ul>
</li>
<li>
<p>出现两次的数字，其lsb一定相同；因此根据这个lsb可以将所有数字分成两类，分别进行异或</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">FindNumsAppearOnce</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// write code here
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="n">xorsum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">n</span><span class="p">:</span> <span class="n">nums</span><span class="p">)</span> <span class="n">xorsum</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">lsb</span> <span class="o">=</span> <span class="n">xorsum</span> <span class="o">==</span> <span class="n">INT_MIN</span> <span class="o">?</span> <span class="nl">xorsum</span> <span class="p">:</span> <span class="n">xorsum</span> <span class="o">&amp;</span> <span class="p">(</span><span class="o">-</span><span class="n">xorsum</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="nl">n</span><span class="p">:</span> <span class="n">nums</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="n">lsb</span><span class="p">)</span> <span class="n">a</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span> <span class="n">b</span> <span class="o">^=</span> <span class="n">n</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="n">min</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">),</span> <span class="n">max</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h3 id="其他-1">其他</h3>
<ul>
<li>快速幂</li>
<li><a href="https://leetcode.cn/problems/implement-rand10-using-rand7/description/">470.用Rand7()实现Rand10()</a>：拒绝采样
<ul>
<li>注意不能直接使用<code>rand7() * rand7()</code>，因为其中元素概率不完全相同，比如14的概率是2/49，1的概率是1/49，6的概率是4/49</li>
<li>视为行列索引：<code>row=rand7(); col=rand7(); c = (row-1)*7 + col;</code>，这样每个元素等概率</li>
</ul>
</li>
</ul>
<h2 id="设计">设计</h2>
<ul>
<li><a href="https://leetcode.cn/problems/design-hashset/description/">705.设计哈希集合</a>：基于<code>vector&lt;list&lt;int&gt;&gt;</code>的链地址法</li>
<li><a href="https://leetcode.cn/problems/design-hashmap/description/">706.设计哈希映射</a>：基于<code>vector&lt;list&lt;pair&lt;int,int&gt;&gt;&gt;</code>的链地址法</li>
<li><a href="https://leetcode.cn/problems/insert-delete-getrandom-o1/description/">380.O(1)时间插入、删除和获取随机元素</a>：
<ul>
<li>一个<code>vector</code>用来获取随机元素</li>
<li>一个<code>unordered_map&lt;int, int&gt;</code>用来记录val到idx的映射</li>
</ul>
</li>
<li><a href="https://leetcode.cn/problems/implement-trie-prefix-tree/description/">208.实现Trie（前缀树）</a>
<ul>
<li>类似二叉树，<code>Trie</code>本身就是一个node，里面有<code>vector&lt;Trie*&gt; children(26, nullptr)</code>表示26叉树</li>
<li><code>Trie</code>节点中包含一个属性<code>isEnd</code>，如果当前节点表示字符串的最后一个字符，则当前节点的下一个节点的<code>isEnd=true</code></li>
<li>包含一个辅助函数<code>Trie* searchPrefix(string prefix)</code>，返回prefix字符串结尾的下一个节点</li>
</ul>
</li>
</ul>
<h2 id="继续刷">继续刷</h2>
<p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142.环形链表Ⅱ</a></p>
<p><a href="https://leetcode.cn/problems/binary-tree-maximum-path-sum/description/">124.二叉树中的最大路径和 </a></p>
<p><a href="https://leetcode.cn/problems/path-sum-iii/description/">437.路径总和Ⅲ</a></p>
<p><a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/solutions/6098/4-xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-shu/">4.寻找两个正序数组的中位数</a></p>
<p><a href="https://leetcode.cn/problems/maximal-rectangle/description/">85.最大矩形</a></p>
<p><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/">28.找出字符串中第一个匹配项的下标</a>：KMP模板</p>
<h2 id="附录一acm输入输出模板">附录一：ACM输入输出模板</h2>
<ul>
<li>
<p><a href="https://kamacoder.com/problempage.php?pid=1000">A+B问题</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&#34;%d %d&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// while(cin &gt;&gt; a &gt;&gt; b) {} // 或者cin输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意<code>scanf</code>输入中的换行，对于输入int不影响，但是对于输入char会影响，比如可能会将换行吃掉</p>
</li>
<li>
<p><a href="https://kamacoder.com/problempage.php?pid=1006">平均绩点</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">s</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// 接受一整行字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="附录二刷题列表">附录二：刷题列表</h2>
<p><a href="https://www.nowcoder.com/exam/oj?page=1&amp;tab=%E7%AE%97%E6%B3%95%E7%AF%87&amp;topicId=295">牛客面试笔刷TOP101</a></p>
<ul>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
<li></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>计算机架构科普和梳理</title>
      <link>https://qinganzhang.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%B6%E6%9E%84%E7%A7%91%E6%99%AE%E5%92%8C%E6%A2%B3%E7%90%86/</link>
      <pubDate>Thu, 29 Feb 2024 14:52:29 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%9E%B6%E6%9E%84%E7%A7%91%E6%99%AE%E5%92%8C%E6%A2%B3%E7%90%86/</guid>
      <description>指令集架构 指令集 说明了操作种类、指令格式（操作码和地址码，地址码个数，操作码定长与拓展）、寻址方式、地址空间大小和寄存器个数等。简单可以理解</description>
      <content:encoded><![CDATA[<h2 id="指令集架构">指令集架构</h2>
<h3 id="指令集">指令集</h3>
<p>说明了操作种类、指令格式（操作码和地址码，地址码个数，操作码定长与拓展）、寻址方式、地址空间大小和寄存器个数等。简单可以理解为汇编指令用01表示。</p>
<blockquote>
<p>CPU位数=CPU中寄存器的位数=数据总线宽度</p>
</blockquote>
<ul>
<li>
<p>硬件厂商开发某种指令集的CPU，需要该指令集专利持有者进行授权</p>
<ul>
<li>
<p>比如ARM公司自己的研发指令集叫ARM指令集，对外授权（同时ARM公司还进行微架构的授权）</p>
</li>
<li>
<p>一些大型公司都获得ARM公司针对ARM指令集的授权，开发兼容ARM指令集的不同的微架构</p>
<ul>
<li>比如Intel授权AMD可以生产兼容x86指令集的CPU</li>
</ul>
</li>
</ul>
</li>
<li>
<p>编译：高级语言翻译成特定ISA的机器码</p>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/19893066">关于CPU、指令集、架构、芯片的一些科普</a></li>
</ul>
</li>
</ul>
<h3 id="复杂指令集cisc">复杂指令集CISC</h3>
<ul>
<li>
<p>x86：在1978年的Intel 8086 CPU（16位）指令集基础上，发展而来的一些列指令集的泛称</p>
<ul>
<li>桌面级CPU一般都是x86的，兼容8086指令集</li>
</ul>
</li>
<li>
<p>IA-32(x86,i386)：Intel将16位的x86拓展为32位的IA-32，但是由于IA-32的统治地位，x86也一般指IA-32的CPU</p>
<ul>
<li>Intel 80386是第一款i386 CPU（第一款IA-32架构的CPU）
<ul>
<li>i386，i486：即Intel 80386， Intel 80486</li>
<li>Pentium（i586）：Intel 80586</li>
<li>Pentium Pro（Pentium Ⅱ，i686）：Intel 80686</li>
</ul>
</li>
<li>此后，x86成为一些列架构的泛称，不限于16位，32位，64位</li>
</ul>
</li>
<li>
<p>IA-64：1994年Intel推出的与x86完全无关的新架构（也不兼容之），基于显式并行指令运算（EPIC）的64位指令集架构</p>
<ul>
<li>2001年发布第一款基于IA-64的CPU，叫Itanium安腾，IA-64也称为Intel Itanium</li>
<li>但是由于软件环境的缺乏和AMD的竞争，导致市场不好</li>
</ul>
</li>
<li>
<p>x86-64(x64)：1999年，AMD推出x86-64架构（简称x64），是对IA-32(x86)的兼容和拓展</p>
<ul>
<li>
<p>2003年AMD发布的一款基于x86-64的CPU，x86-64也称为AMD64</p>
</li>
<li>
<p>后来Intel也用AMD64架构，称为IA-32e(IA-32 extension)，后来又叫Intel64</p>
</li>
<li>
<p>x86-64, x64, AMD64, Intel64, IA-32e(IA-32 extension)基本是一个东西</p>
<ul>
<li>
<p>苹果公司和 <code>RPM</code> 包管理员以 <code>x86-64</code> 或 <code>x86_64</code> 称呼此 <code>64</code> 位架构。甲骨文公司及 <code>Microsoft</code> 称之为<code>x64</code>。<code>BSD</code> 家族及其他 <code>Linux</code> 发行版则使用 <code>amd64</code>，<code>32</code> 位版本则称为<code>i386</code>（或 <code>i486/586/686</code>），<code>Arch Linux</code> 用<code>x86_64</code> 称呼此 <code>64</code> 位架构。</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/113157931#:~:text=CPU%20%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E7%9B%AE%E5%89%8D%E4%B8%BB%E8%A6%81%E6%98%AF%E4%B8%A4%E5%A4%A7%E7%B1%BB%E3%80%82%20%E5%A4%8D%E6%9D%82%E6%8C%87%E4%BB%A4%E9%9B%86%E6%98%AF%20x86%20%E3%80%81%20x64%20%28%E4%B9%9F%E5%8F%AB%20x86-64%2C,%E4%B8%80%E7%A7%8D%E6%9E%B6%E6%9E%84%EF%BC%8C%E4%B8%93%E5%88%A9%E5%9C%A8%20ARM%20%E5%85%AC%E5%8F%B8%E6%89%8B%E9%87%8C%EF%BC%8C%E8%AF%A5%E6%9E%B6%E6%9E%84%20CPU%20%E4%B8%BB%E8%A6%81%E6%9C%89%E9%AB%98%E9%80%9A%E3%80%81%E4%B8%89%E6%98%9F%E3%80%81%E8%8B%B9%E6%9E%9C%E3%80%81%E5%8D%8E%E4%B8%BA%E6%B5%B7%E6%80%9D%E3%80%81%E8%81%94%E5%8F%91%E7%A7%91%E7%AD%89%E5%85%AC%E5%8F%B8%E3%80%82%20%E8%BF%99%E7%A7%8D%20CPU%20%E5%B8%B8%E7%94%A8%E5%9C%A8%E6%89%8B%E6%9C%BA%E4%B8%8A%EF%BC%8C%E5%8C%85%E6%8B%AC%E5%AE%89%E5%8D%93%E5%92%8C%E8%8B%B9%E6%9E%9C%E3%80%82">x86,x64,x86-64,amd64,arm指令集架构之间的关系</a>中x86 架构发展</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://www.jianshu.com/p/70872b91ab46">i386、i486、i586、 i686、 x86、x86_64、x64、amd_64详解【写的很好】</a></li>
</ul>
</li>
</ul>
<h3 id="精简指令集risc">精简指令集RISC</h3>
<ul>
<li>ARM
<ul>
<li>ARMv3~ARMv7都是32位</li>
<li>ARMv8：向前兼容32位指令，同时
<ul>
<li>AArch64：64位执行状态，使用全新的ARM 64位指令集</li>
<li>AArch32：32位执行状态</li>
</ul>
</li>
</ul>
</li>
<li>RISC-V：伯克利发明的一种基于RISC的开源指令集架构
<ul>
<li><a href="https://www.sohu.com/a/225906734_132567">一文看懂RISC-V</a></li>
</ul>
</li>
<li>MIPS</li>
<li>PowerPC</li>
</ul>
<h2 id="微架构">微架构</h2>
<ul>
<li>微架构：硬件电路（或CPU单个核心core）的结构和实现</li>
<li>CPU研发能力一般指的是独立的微架构研发能力，是否使用自行研发的指令集关系不大
<ul>
<li>研发兼容的指令集可以没有获得授权，指令集的研发不是很难，但是之后获得授权后才能合法销售</li>
<li>微架构的设计细节是保密且复杂的</li>
<li>SoC（System on Chip）封装相对简单</li>
</ul>
</li>
<li>商业模式
<ul>
<li>之前在PC时代，CPU研发厂商自己的微架构只有自己用</li>
<li>后来在智能设备时代，ARM公司将自己的微架构出售，其他厂商可以拿来组装，比如Cortex系列核心</li>
<li>由于ARM公司的成功，ARM公司针对PC领域发布了ARM v8 64位指令集
<ul>
<li>以前ARM适合低功耗的场景，随着技术进步，指令集对微架构的影响越来越小</li>
</ul>
</li>
</ul>
</li>
<li>指令集的选择：倾向于选择软件生态良好的指令集
<ul>
<li>以前获得指令集的授权很困难，主要通过技术交换的形式（指令集多授权一家，就多一个对手）</li>
<li>后来ARM对指令集授权略微放松</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://www.jianshu.com/p/c80850ccfb27">指令集、微架构、手机芯片(Soc)及ARM的介绍(偏硬件科普)</a></li>
</ul>
</li>
</ul>
<h2 id="计算机架构">计算机架构</h2>
<ul>
<li>冯.诺伊曼架构：程序和指令存储在一起</li>
<li>哈佛架构：程序和指令分开存储
<ul>
<li>比如单片机（51单片机，STM32单片机），Cortex-M系列</li>
</ul>
</li>
<li>现代处理器架构一般指令和数据共享存储，但是CPU内部缓存分开</li>
</ul>
<h2 id="特别介绍arm">特别介绍：ARM</h2>
<h3 id="arm商业发展">ARM商业发展</h3>
<ul>
<li>
<p>由于商业需要，1985年，Acorn公司基于RISC，自研CPU（包括指令集和微架构），称为ARM（Acorn RISC Machine），型号命名为ARM1（对标80286）</p>
</li>
<li>
<p>后来，Acorn公司和苹果公司联合成立了一家叫ARM（Advanced RISC Machines）的公司，开启新的产品策略：授权</p>
<blockquote>
<p>传统商业模式：</p>
<ul>
<li>IDM(Integrated Design and Manufacture)：从设计，到制造、封装测试以及投向消费市场一条龙全包，比如Intel</li>
<li>无工厂模式Fabless：自己设计，制造交给代工厂，比如AMD，NVIDIA</li>
<li>Foundry：只做代工</li>
</ul>
</blockquote>
<ul>
<li>使用层级授权（处理器授权）：只能买来已经封装好的CPU，不能更改原来设计，可以配置的地方不多</li>
<li>内核层级授权（POP授权）：以一个内核（或IP核）为基础然后在加上自己的外设</li>
<li>架构层级授权：授权使用ARM指令集，可以修改指令集，但是比较贵
<ul>
<li>比如华为基于ARMv8，自研达芬奇架构</li>
</ul>
</li>
</ul>
</li>
<li>
<p>后来ARM公司越来越成功，苹果公司逐渐卖掉其股份，开发ipod（基于ARM指令集）。</p>
<ul>
<li>2007年，苹果公司发布iphone，基于ARM指令集</li>
<li>2008年，谷歌发布Android系统，也是基于ARM指令集</li>
</ul>
</li>
<li>
<p>2016年，ARM公司被软银集团收购</p>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://www.zhihu.com/question/296178433/answer/692275926">如何看待观点「华为没有核心技术，因为芯片用的是ARM（安谋）架构，一旦被停止授权，就会做不出芯片」？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/266092621">【推荐】到底什么是Cortex、ARMv8、arm架构、ARM指令集、soc？一文帮你梳理基础概念【科普】</a></li>
</ul>
</li>
</ul>
<h3 id="arm处理器">ARM处理器</h3>
<blockquote>
<p>一般处理器就是指CPU</p>
<p>但是ARM处理器指的是单个核（或IP核，或内核），因为厂商可以在IP核上进一步封装，最终CPU不尽相同</p>
<blockquote>
<p>IP核，全称知识产权核（英语：intellectual property core），是在集成电路的可重用设计方法学中，指某一方提供的、形式为逻辑单元、芯片设计的可重用模组。IP核通常已经通过了设计验证，设计人员以IP核为基础进行设计，可以缩短设计所需的周期。</p>
</blockquote>
<p>参考：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/362648496">armv7-A系列0 - arm 处理器架构发展史</a>中的处理器到底指的是什么</li>
<li><a href="https://zhuanlan.zhihu.com/p/266092621">到底什么是Cortex、ARMv8、arm架构、ARM指令集、soc？一文帮你梳理基础概念【科普】</a>中的ARM内核与架构</li>
<li><a href="https://www.jianshu.com/p/c80850ccfb27">指令集、微架构、手机芯片(Soc)及ARM的介绍(偏硬件科普)</a></li>
</ul>
</blockquote>
<ul>
<li>
<p>指令集架构：</p>
<ul>
<li>ARMv1~ARMv9（可以有一定的变种比如ARMv8-A）</li>
<li>ARMv8是首款64位的ARM指令集</li>
</ul>
</li>
<li>
<p>处理器架构</p>
<ul>
<li>ARMv3~ARMv6：
<ul>
<li>ARM6, ARM7, ARM9, ARM11系列</li>
</ul>
</li>
<li>ARMv7及以后
<ul>
<li>Cortex-A：大型嵌入式系统（手机）</li>
<li>Cortex-R：实时处理器</li>
<li>Cortex-M：单片机</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考：</p>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/494924815#:~:text=ARM%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%20%7C%20ARM%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%201%201.%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%20%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E5%91%BD%E5%90%8D%E6%A0%BC%E5%BC%8F%3A%20Armv%EF%BC%9A%E5%9B%BA%E5%AE%9A%E5%AD%97%E7%AC%A6%2C%20%E5%8D%B3ARM,x%EF%BC%9A%E5%A4%84%E7%90%86%E5%99%A8%E7%B3%BB%E5%88%97%2C%20%E6%9C%896%2C%207%2C%209%20%2C%2011%E7%AD%89%E5%A4%9A%E4%B8%AA%E7%B3%BB%E5%88%97%20y%EF%BC%9A%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%2F%E4%BF%9D%E6%8A%A4%E5%8D%95%E5%85%83%20">ARM基础教程 | ARM命名规则</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/25681832">ARM 命名规则——指令架构、CPU的历史回顾</a></p>
</li>
</ul>
</li>
</ul>
<p>参考：</p>
<p><a href="https://dongka.github.io/2018/11/17/cpu/arm%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E7%9A%84%E5%8F%91%E5%B1%95/">ARM体系架构概述</a></p>
<h3 id="android">Android</h3>
<h4 id="简介">简介</h4>
<ul>
<li>
<p>Android是一个开源的，基于Linux的移动设备操作系统，主要使用于移动设备</p>
</li>
<li>
<p>谷歌在2007年发布了第一个测试版本的 Android 软件开发工具包（SDK），第一个商业版本的 Android 1.0，则发布于2008年9月。</p>
</li>
<li>
<p>Android 应用程序一般使用 Android 软件开发工具包，采用 Java 语言来开发。</p>
</li>
</ul>
<h4 id="版本">版本</h4>
<ul>
<li>
<p><a href="https://developer.android.com/about/versions?hl=zh-cn">Android版本</a>（版本代号）</p>
<ul>
<li>每个Android 版本对应一个Android SDK，可以类比JDK</li>
</ul>
</li>
<li>
<p>Android API版本：有利于设置和解决兼容性问题</p>
<p><a href="https://developer.android.com/about/versions/13/get?hl=zh-cn">Android API级别官方说明</a></p>
<p><a href="https://apilevels.com/">Android版本和 Android API level的对应关系</a></p>
</li>
<li>
<p>Android NKD</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2023-09-04-15:56:07.png" alt="image-20230710173808296" style="zoom:80%;" />
</li>
</ul>
<h2 id="工具链">工具链</h2>
<p>背景：</p>
<ul>
<li>使用GCC编译，很多时候需要手动链接（只有标准库才默认链接）</li>
<li>当需要链接的文件很多时，一来每次在命令行中写一遍繁琐容易出错，二来无法使用增量编译</li>
</ul>
<h3 id="makefile">Makefile</h3>
<ul>
<li>
<p>背景：make命令根据编译规则进行编译，而且可以进行增量编译，makefile用于写编译规则</p>
</li>
<li>
<p>简要语法：</p>
<ul>
<li><a href="http://ruanyifeng.com/blog/2015/02/make.html">阮一峰make教程</a></li>
<li><a href="https://blog.csdn.net/Nire_Yeyu/article/details/106373974">简明make教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/376493209">GNU make/Makefile 简明实用教程</a></li>
</ul>
</li>
<li>
<p>语法笔记</p>
<ul>
<li>
<p>make：即制作出某个指定的文件（默认makefile中第一个文件）</p>
<ul>
<li>越是接近目标文件的命令，就越是要写在前面。因为程序是按照递归的方式进行依赖文件查找的，看到第一行有一个没见过的依赖文件，就往下一行进行查找，以此类推。</li>
</ul>
</li>
<li>
<p>核心概念：目标target，前置条件prerequisite，命令command</p>
</li>
<li>
<p>伪目标的使用</p>
<ul>
<li>
<p>伪目标是一个命令，且没有前置条件：比如clean，显式使用内置目标名指定为伪目标，主要用于执行命令</p>
</li>
<li>
<p>伪目标是一个文件，但是前置条件有多个，且没有命令：比如生成多个文件</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="cmake">CMake</h3>
<ul>
<li>背景：
<ul>
<li>当工程很大的时候，手写Makefile也不简单</li>
<li>Makefile与平台相关，无法实现跨平台</li>
</ul>
</li>
<li>cmake：跨平台的项目管理工具，自动生成makefile文件，然后make构建
<ul>
<li>手写CMakeLists.txt文件，cmake生成Makefile，然后再make构建</li>
</ul>
</li>
<li>cmake简要语法
<ul>
<li>
<p>指令大小写无关，变量大小写相关</p>
</li>
<li>
<p>可以使用双引号将文件名或目录名包含其中</p>
</li>
<li>
<p><code>add_executable</code>：将源文件编译成可执行文件</p>
</li>
<li>
<p><code>add_library</code>：将源文件编译为库文件</p>
<ul>
<li>在构建时，静态库和动态库重名会导致后面的构建失败，<a href="https://blog.csdn.net/qq_34796146/article/details/108877159">参考</a></li>
<li><code>SET_TARGET_PROPERTIES</code>：同时构建同名的静态库和动态库</li>
</ul>
</li>
<li>
<p><code>aux_source_directory(&lt;dir&gt; &lt;variable&gt;)</code>：将dir目录下所有源文件的文件名存放到variable变量中</p>
</li>
<li>
<p><code>add_subdirectory</code>：包含一个子目录，该子目录中也有一个CMakeLists.txt文件和代码文件，它们也会被处理，同时可以指定编译输出（包含编译中间结果）的路径</p>
</li>
<li>
<p><code>link_directories</code>：添加共享库搜索目录</p>
<ul>
<li><code>CMAKE_LIBRARY_PATH</code>：设置库文件搜索目录，这不是cmake变量（需要在bash中设置），通过<code>FIND_LIBRARY</code>找到相应库文件</li>
</ul>
</li>
<li>
<p><code>target_link_libraries(&lt;target&gt; &lt;items&gt;)</code>：为库或可执行文件加入库链接</p>
</li>
<li>
<p><code>include_directories</code>：添加头文件搜索目录</p>
<ul>
<li><code>CMAKE_INCLUDE_PATH</code>：设置头文件搜索目录，这不是cmake变量（需要在bash中设置），通过<code>find_path</code>找到相应头文件</li>
</ul>
</li>
<li>
<p><code>target_include_directories</code>：在编译目标文件时指定头文件</p>
</li>
<li>
<p><code>find_</code>系列</p>
<ul>
<li><code>find_package</code>：加载外部库到项目中</li>
</ul>
</li>
<li>
<p><code>configure_file</code>：默认定义了一些编译选项的值</p>
</li>
<li>
<p><code>option</code>：添加编译选项（更准确是代码中的宏定义）</p>
</li>
<li>
<p>变量</p>
<ul>
<li>创建变量：<code>set()</code>，获取变量的值：<code>${variable}</code>，调用环境变量：<code>$ENV{}</code></li>
<li>追加变量的值：<code>set(SRC_LIST ${SRC_LIST} test.cpp)</code></li>
<li><code>PROJECT_NAME</code></li>
<li><code>PROJECT_BINARY_DIR、CMAKE_BINARY_DIR</code>：编译路径，当前工程的二进制路径（即编译产物会存放到该路径，一般为build所在路径）</li>
<li><code>PROJECT_SOURCE_DIR、CMAKE_SOURCE_DIR</code>：工程根目录，即顶层CMakeLists.txt文件的路径</li>
<li><code>EXECUTABLE_OUTPUT_PATH</code>：编译生成的可执行文件的路径</li>
<li><code>LIBRARY_OUTPUT_PATH</code>：编译生成的共享库文件的路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="最佳实践">最佳实践</h3>
<h4 id="项目配置">项目配置</h4>
<ul>
<li>在源文件同级目录下建立目录build，在build中
<ul>
<li><code>cmake ..</code>：将cmake得到的中间文件保存在build文件夹中，需要重新构建直接删除文件夹</li>
<li><code>make</code>：构建，可以使用<code>make clean</code>清除中间文件，重新构建</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo&#43;Github Pages搭建个人博客</title>
      <link>https://qinganzhang.github.io/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 29 Feb 2024 14:50:20 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/hugo&#43;github_pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>本地搭建博客 本地环境：windows10 使用主题：PaperModX 安装过程 安装Go并配置环境 下载prebuilt版本的hugo 注意hugo</description>
      <content:encoded><![CDATA[<h1 id="本地搭建博客">本地搭建博客</h1>
<blockquote>
<p>本地环境：windows10</p>
<p>使用主题：PaperModX</p>
</blockquote>
<h2 id="安装过程">安装过程</h2>
<ul>
<li>
<p>安装Go并配置环境</p>
</li>
<li>
<p>下载prebuilt版本的hugo</p>
<ul>
<li>注意hugo有普通版本和extended版本，最好使用extended版本，因为在使用PaperModX主题时，需要使用到extended版本（但是PaperMod主题使用普通版本就可以）</li>
</ul>
</li>
<li>
<p>新建站点：<code>hugo new site myblog</code></p>
</li>
<li>
<p>下载主题：在<code>myblog/themes/</code>下<code>git clone git@github.com:reorx/hugo-PaperModX.git</code></p>
<ul>
<li>也可以使用<code>git submodule</code>的方式添加主题，此时方便进行版本控制和管理</li>
</ul>
</li>
</ul>
<h2 id="本地配置">本地配置</h2>
<p><code>myblog/</code>下的配置文件参考<a href="https://www.sulvblog.cn/posts/blog/build_hugo/#4%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">sulvblog&rsquo;s config.yaml</a>和<a href="https://github.com/reorx/hugo-PaperModX/blob/master/exampleSite/config.default.yml">PaperModX example&rsquo;s config.yaml</a>进行配置，自己慢慢调吧（papermodx在papermod的基础上添加了一些特性，比如侧边目录）</p>
<p>个人主要进行的修改有：</p>
<ul>
<li>在<code>archetypes/posts.md</code>中设定默认的meta内容</li>
<li>修改为posts、archive、search、tags、categories、about六个menu，其中posts、categories、tags在<code>content</code>下为目录，archive、search、about在<code>content</code>下为md文件
<ul>
<li>在文件夹下创建<code>_index.md</code>文件可以在里面添加Front Matter，用来设置当前文件夹下的meta信息</li>
<li>在配置时留意是posts还是post，是archive还是archives</li>
</ul>
</li>
<li><a href="https://blog.csdn.net/WongSSH/article/details/126962069">加入数学公式的支持</a>
<ul>
<li>但是当使用带有<code>/begin{} /end{}</code>的多行公式，或者多行公式中含有若干下划线时，此时可能无法正确渲染，我的解决办法是将没有正确渲染的多行数学公式放在<code>&lt;span&gt;&lt;/span&gt;</code>标签对中，这样在网页博客和本地typora中都可以正常显示。考虑到平时不怎么写复杂的多行数学公式，因此手动修改也不多。</li>
<li>在<a href="https://du33169.tech/posts/notes/hugomath/">Hugo中优雅地使用数学公式</a>中，博主的方法三自己编译一份加入了goldmark数学插件的hugo版本，但是注意编译过程中gcc版本不宜过高（我的gcc原来是8.1.0，编译不过，后来改到5.1.0，编译通过）。但是最终使用好像针对原生latex的多行公式支持不足（？不确定，可能是自己后面配置不正确？），最后没有使用这个方案</li>
</ul>
</li>
<li>调整了主页中Welcome部分的高度，在<code>themes/hugo-PaperModX/assets/css/common/main.css</code>的<code>.first-entry</code>中<code>min-height</code>修改为80px</li>
<li>调整了页面中内容的宽度（原来侧边留空感觉有点多，可以适当减小），<code>themes/hugo-PaperModX/assets/css/common/main.css</code>的<code>.main.post</code>中添加<code>right: 60px;</code></li>
<li>在<code>themes/hugo-PaperModX/assets/css/common/post-single.css</code>中调整h1~h6标题的高度</li>
</ul>
<h2 id="内容管理">内容管理</h2>
<ul>
<li>
<p>写文章：<code>hugo new posts/文章名称.md</code>，注意写对md文件的路径</p>
</li>
<li>
<p>本地预览：<code>hugo server -D</code>在<code>localhost:1313</code>上进行预览</p>
<ul>
<li><code>-D</code>表示<code>draft: true</code>的内容在预览时展示</li>
<li>有时将draft改为false，使用<code>hugo server</code>进行预览时，对应文章没有出现，此时关掉PowerShell重开一个，重新运行一下命令</li>
</ul>
</li>
<li>
<p>构建：<code>hugo</code>会将构建的网站内容保存到public文件夹中，默认只会向public中添加内容，而不会删除外部不存在但是public中还存在的文件</p>
<ul>
<li><code>hugo -F --cleanDestinationDir</code>表示每次生成的public都是全新的，会覆盖原来的</li>
<li><code>--theme</code>指定主题，<code>--baseURL=&quot;xxx&quot;</code>指定url</li>
</ul>
</li>
</ul>
<h2 id="将内容发布到github-pages上">将内容发布到GitHub Pages上</h2>
<ul>
<li>
<p>将public文件夹转换为git库：</p>
<ul>
<li>进入到public文件夹，<code>git init -b main</code> 生成的默认主分支名字为main</li>
</ul>
</li>
<li>
<p>将git库关联到远程库：</p>
<ul>
<li><code>git remote add origin git@github.com:QinganZhang/QinganZhang.github.io.git</code></li>
<li>检查是否关联成功：<code>cat .git/config </code>
<ul>
<li>如果<code>[remote &quot;origin&quot;]</code>信息正常显示，说明本地git库已经成功关联到远程库</li>
</ul>
</li>
</ul>
</li>
<li>
<p>将修改commit到本地库</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">git status # 查看当前修改状态
</span></span><span class="line"><span class="cl">git add . # 添加所有修改过的文件，也可以只添加某个文件
</span></span><span class="line"><span class="cl">git commit -m &#34;add a new post&#34; # 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>将修改push到远程库</p>
<ul>
<li><code>git push -u origin main --force</code></li>
<li>报错： <code>error: src refspec main does not match any</code>
<ul>
<li>本地的branch为master，但是远程库默认branch是main，先将本地branch的名字修改为main</li>
<li><code>git branch -m master main </code></li>
</ul>
</li>
<li>报错：<code> ! [rejected]        main -&gt; main (fetch first)</code>
<ul>
<li>提交冲突，远程库和本地库不一致。通常出现在初始化仓库有readme而本地没有等情况。<a href="https://cloud.tencent.com/developer/article/2145265">参考</a></li>
<li><code>git pull --rebase origin main</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>查看是否部署成功</p>
<ul>
<li>
<p>网页样式（css）丢失，但是内容还在，浏览器F12控制台报错：<code>Failed to find a vlid digest in the 'integrity' attribute for source 'xxx.css' with computed SHA-256 integrity '***'. The resource has been blocked. </code>（关键词：”integrity“）</p>
<ul>
<li>
<p>尝试方法一：<a href="https://smc.im/post/resolve-integrity-error-in-hugo/">解决 hugo 中关于 integrity 的错误</a>，仍然出现原来的错误</p>
</li>
<li>
<p>尝试方法二：<a href="https://qing.shuncs.com/post/tech/hugo/">解决Hugo无法加载css文件</a>，仍然出现原来的错误，而且第一遍文章会覆盖在h1标题Posts上，</p>
</li>
<li>
<p>最终方法：在<code>themes/hugo-PaperModX/layouts/partial/head.html</code>中，将</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-html" data-lang="html"><span class="line"><span class="cl">{{- if not site.Params.assets.disableFingerprinting }}
</span></span><span class="line"><span class="cl">{{- $stylesheet := $stylesheet | fingerprint }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.RelPermalink }}&#34;</span> <span class="na">integrity</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.Data.Integrity }}&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload stylesheet&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;style&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- else }}
</span></span><span class="line"><span class="cl"><span class="p">&lt;</span><span class="nt">link</span> <span class="na">crossorigin</span><span class="o">=</span><span class="s">&#34;anonymous&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;{{ $stylesheet.RelPermalink }}&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;preload stylesheet&#34;</span> <span class="na">as</span><span class="o">=</span><span class="s">&#34;style&#34;</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">{{- end }}
</span></span></code></pre></td></tr></table>
</div>
</div><p>注释掉，只保留<code>&lt;link crossorigin=&quot;anonymous&quot; href=&quot;{{ $stylesheet.RelPermalink }}&quot; rel=&quot;preload stylesheet&quot; as=&quot;style&quot;&gt;</code>这一行。猜想可能是与使用的主题相关，但是暂时没有找到使用相同主题类似错误的信息。</p>
</li>
<li>
<p>更多参考：<a href="https://stackoverflow.com/questions/65040931/hugo-failed-to-find-a-valid-digest-in-the-integrity-attribute-for-resource">Hugo - Failed to find a valid digest in the &lsquo;integrity&rsquo; attribute for resource - The resource has been blocked - Host on Github</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="使用github-actions自动构建博客">使用GitHub Actions自动构建博客</h1>
<p>使用上面的方式（手动构建），在本地写好博客之后，然后使用hugo在本地构建好静态博客，生成public目录，最终是将public目录push到GitHub仓库，构建静态博客。</p>
<p>还有一种方式，看起来更加高级，那就是基于GitHub Action自动构建博客。大致流程为：在本地写好博客之后，直接push到远程GitHub仓库，在远端而非本地构建博客。这个方式只是节省了自己使用hugo手动进行构建的这一步，但是如果当自己手工进行操作的步骤比较繁琐且固定时，使用GitHub Action自动化就很方便了。</p>
<p>在实际配置过程中，这里使用了两个仓库。一个是private的myblog仓库，本地写好博客后就push到这个myblog仓库；另一个仓库是public的、作为GitHub Pages的仓库，myblog仓库使用GitHub Action自动进行构建，将最终得到的public文件就放到这个仓库中。下面简要介绍基于Github Action自动构建博客的过程，着重介绍与上面手动构架不同的地方。</p>
<img src="https://cdn.jsdelivr.net/gh/QinganZhang/ImageHosting/img/2024-02-29-14:30:09.png" alt="image-20240229143009260" style="zoom: 60%;" />
<p>具体过程：</p>
<ul>
<li>
<p>在Github远程新建一个仓库，比如命名为myblog</p>
</li>
<li>
<p>在本地使用hugo新建站点时（比如<code>hugo new site myblog</code>），在本地<code>myblog</code>目录下<code>git init -b main</code>，并且使用<code>git remote add</code>将本地的<code>myblog</code>目录关联到远程<code>myblog</code>仓库</p>
<ul>
<li>注意之前手动构建的方式中，是在public目录下<code>git init</code>，并关联到远程仓库的，而且该远程仓库即为Github Pages</li>
</ul>
</li>
<li>
<p>在下载主题时，可以直接git clone源码，也可以使用<code>git submodule</code>的方式将主题作为子项目添加进来</p>
<ul>
<li>注意<code>git submodule</code>的子模块和原来的主模块是两个单独的项目，所以进入到子模块和主模块中进行git操作，是针对不同仓库的。<a href="https://cloud.tencent.com/developer/article/2136829">Git Submodules介绍</a></li>
<li>但是这里想将主题添加进来，自己进行一些修改，因此使用了另一种方法将主题添加进来：<code>git subtree</code>，这样可以直接将子项目作为主仓库的一个目录添加进来
<ul>
<li><a href="https://daief.tech/post/git-subtree/"><code>git subtree</code>的使用</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>在myblog根目录下，创建<code>.github/workflows/deploy.yaml</code>，个人的<code>deploy.yaml</code>配置文件为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">deploy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">on</span><span class="p">:</span><span class="w"> </span><span class="c"># 表示GitHub Action的触发条件（即push）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">push</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">branches</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">main</span><span class="w"> </span><span class="c"># 设定触发的分支为main</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">workflow_dispatch</span><span class="p">:</span><span class="w"> </span><span class="c"># 可以在Github项目仓库的Action工具栏手动调用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">permissions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">contents</span><span class="p">:</span><span class="w"> </span><span class="l">read</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pages</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">id-token</span><span class="p">:</span><span class="w"> </span><span class="l">write</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">jobs</span><span class="p">:</span><span class="w"> </span><span class="c"># 表示GitHub Action的任务，这里定义了一个build的任务</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runs-on</span><span class="p">:</span><span class="w"> </span><span class="l">ubuntu-latest</span><span class="w"> </span><span class="c"># 指定GitHub Action的运行环境</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">env</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">HUGO_VERSION</span><span class="p">:</span><span class="w"> </span><span class="m">0.122.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">steps</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 其中run表示执行的命令，uses时GitHub Action中的一个插件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Checkout</span><span class="w"> </span><span class="c"># 使用actions/checkout插件检出GitHub仓库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/checkout@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># with:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># submodules: false # 同时检出子模块</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># fetch-depth: 0 # 完整检出所有历史记录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Setup Hugo</span><span class="w"> </span><span class="c"># 使用peaceiris/actions-hugo插件来安装Hugo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-hugo@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.122.0&#34;</span><span class="w"> </span><span class="c"># 0.122.0 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">extended</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Build Web</span><span class="w"> </span><span class="c"># 运行hugo命令生成博客的静态文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">env</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENVIRONMENT</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">HUGO_ENV</span><span class="p">:</span><span class="w"> </span><span class="l">production</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">hugo --gc --minify </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># --baseURL &#34;${{ steps.pages.outputs.base_url }}/&#34; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Upload artifact</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">actions/upload-pages-artifact@v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Deploy Web</span><span class="w"> </span><span class="c"># 使用peaceiris/actions-gh-pages插件将静态网页部署到GitHub Pages上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">uses</span><span class="p">:</span><span class="w"> </span><span class="l">peaceiris/actions-gh-pages@v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">with</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PERSONAL_TOKEN</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.PERSONAL_BLOG_TOKEN }}</span><span class="w"> </span><span class="c"># 个人访问令牌</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">EXTERNAL_REPOSITORY</span><span class="p">:</span><span class="w"> </span><span class="l">QinganZhang/QinganZhang.github.io</span><span class="w"> </span><span class="c"># 部署到的GitHub Pages仓库</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PUBLISH_BRANCH</span><span class="p">:</span><span class="w"> </span><span class="l">main</span><span class="w"> </span><span class="c"># Github Pages分支</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">PUBLISH_DIR</span><span class="p">:</span><span class="w"> </span><span class="l">./public</span><span class="w"> </span><span class="c"># hugo静态文件的目录</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">commit_message</span><span class="p">:</span><span class="w"> </span><span class="l">${{ github.event.head_commit.message }}</span><span class="w"> </span><span class="c"># 提交更改时使用的提交消息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># cname: ${{ secrets.DOMAIN }} # 自定义域名，默认使用github pages域名</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference1: https://blog.csdn.net/m0_51993913/article/details/132657065   </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference2: https://blog.csdn.net/freeking101/article/details/135515958使用Github Actions自动化部署部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># reference3: https://github.com/reorx/hugo-PaperModX/blob/master/.github/workflows/gh-pages.yml</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>然后生成Token，<a href="https://blog.csdn.net/m0_51993913/article/details/132657065">参考</a></p>
<ul>
<li>因为需要从myblog仓库推送public目录到Github Pages仓库，所以需要向myblog仓库添加身份验证凭据</li>
</ul>
</li>
<li>
<p>最后将本地博客push到myblog远程仓库，然后myblog远程仓库下使用GitHub Actions将public目录推送到Github Pages仓库中</p>
</li>
</ul>
<p>其他问题：</p>
<ul>
<li>如何将obsidian双链转换为HTML的<code>&lt;a&gt;&lt;/a&gt;</code>标签对？
<ul>
<li>目前发现的一个方案是<a href="https://github.com/manunamz/jekyll-wikilinks#header-level-wikilinks">jekyll-wililinks</a>，但是这个方案需要使用jeklly搭建静态博客</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch08 微调</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch08-%E5%BE%AE%E8%B0%83/</link>
      <pubDate>Thu, 01 Feb 2024 21:56:31 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch08-%E5%BE%AE%E8%B0%83/</guid>
      <description>41：针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递 一般C++传参方式有三种： 对左值引用和右值引用分别重载，需要实</description>
      <content:encoded><![CDATA[<h1 id="41针对可复制的形参在移动成本低并且一定会被复制的前提下考虑将其按值传递">41：针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递</h1>
<ul>
<li>一般C++传参方式有三种：
<ul>
<li>对左值引用和右值引用分别重载，需要实现两个版本</li>
<li>使用万能引用，使用时可能会实例化出多个版本，传参报错可读性差</li>
<li>传值：</li>
</ul>
</li>
<li>可以考虑参数使用按值传递的情况：
<ul>
<li>构造（拷贝构造或移动构造）：对于可拷贝的，移动开销低的，并且总是会被拷贝的形参而言，按值传递和按引用传递的效率很接近，而且按值传递更容易实现，还可能会生成更少的目标代码，只是略微引入了一点性能开销
<ul>
<li>按值传递的前提是移动操作的成本足够低廉，因为按值传递比按引用传递多一次移动操作</li>
<li>只有当形参一定会被拷贝时，才考虑按值传递；比如有时函数开始先进行if检查，即使没有满足if条件而跳出函数，也会产生形参传值构造和析构的开销</li>
</ul>
</li>
<li>赋值（拷贝赋值或移动赋值）
<ul>
<li>有时移动操作可能比直接拷贝开销更大：因为移动操作会涉及到原来对象的析构、新对象的构造，如果新对象比原来对象小，拷贝可以直接在原对象的位置上进行（具体见参考中的密码例子，如果新密码的长度比旧密码短，则新密码直接拷贝到旧密码的位置）</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/127054642">https://blog.csdn.net/Dong_HFUT/article/details/127054642</a></li>
</ul>
</li>
</ul>
<h1 id="42考虑置入而非插入">42：考虑置入而非插入</h1>
<ul>
<li>
<p>push_back可能会创建中间临时对象，但是emplace_back使用完美转发（直接将参数匹配到构造函数），不会创建临时对象</p>
</li>
<li>
<p>多数场景下使用emplace_back比push_back高效</p>
<ul>
<li>要插入的值是通过构造函数插入容器，而非赋值
<ul>
<li>赋值：比如emplace到容器begin，此时需要构造临时对象，然后将其移动到begin，此时emplace没有优势</li>
</ul>
</li>
<li>传入参数的类型和容器元素的类型不同
<ul>
<li>如果传参类型和容器元素类型相同，也就不需要产生临时对象，emplace与push相同</li>
</ul>
</li>
<li>如果某个元素值添加重复，会使用新创建的元素值替换为原来旧的元素值</li>
</ul>
</li>
<li>
<p>使用注意：</p>
<ul>
<li>资源管理
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;&gt;</span> <span class="n">ptrs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">ptrs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">Widget</span><span class="p">,</span> <span class="n">myDeleter</span><span class="p">));</span> <span class="c1">// ok，不会发生内存泄露
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">ptrs</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="k">new</span> <span class="n">Widget</span><span class="p">,</span> <span class="n">myDeleter</span><span class="p">);</span> <span class="c1">// 如果emplace_back内部、调用构造函数之前发生异常，则会发生内存泄露
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>原因是延迟了资源管理对象的创建</li>
<li>因此要么使用<code>make_shared</code>创建智能指针，要么先创建一个临时对象然后move到emplace中</li>
</ul>
</li>
<li>与显式构造函数的交互</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/127073175">https://blog.csdn.net/Dong_HFUT/article/details/127073175</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch07 并发API</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch07-%E5%B9%B6%E5%8F%91api/</link>
      <pubDate>Thu, 01 Feb 2024 21:56:20 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch07-%E5%B9%B6%E5%8F%91api/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Effective Cpp Reading Notes</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/effective-cpp-reading-notes/</link>
      <pubDate>Thu, 01 Feb 2024 21:54:24 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/effective-cpp-reading-notes/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>Effective Modern Cpp Reading Notes</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/effective-modern-cpp-reading-notes/</link>
      <pubDate>Thu, 01 Feb 2024 21:53:53 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/effective-modern-cpp-reading-notes/</guid>
      <description></description>
      <content:encoded><![CDATA[]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch06 Lambda表达式</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch06-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Thu, 01 Feb 2024 21:48:40 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch06-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>31：避免默认捕获模式 闭包：lambda所创建的运行期对象 默认捕获可能导致引用悬挂 默认传引用可能导致引用悬挂 显式传引用也可能导致引用悬挂，但</description>
      <content:encoded><![CDATA[<h1 id="31避免默认捕获模式">31：避免默认捕获模式</h1>
<ul>
<li>闭包：lambda所创建的运行期对象</li>
<li>默认捕获可能导致引用悬挂
<ul>
<li>默认传引用可能导致引用悬挂
<ul>
<li>显式传引用也可能导致引用悬挂，但是可以更容易发现此处可能有引用悬挂</li>
</ul>
</li>
<li>默认传值捕获也可能导致引用悬挂</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="n">filters</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"><span class="c1">//    void addFilter() const{
</span></span></span><span class="line"><span class="cl"><span class="c1">//        filters.emplace_back(
</span></span></span><span class="line"><span class="cl"><span class="c1">//            [=](int value) {return value % divisor == 0;} 
</span></span></span><span class="line"><span class="cl"><span class="c1">//        ); // 看似是传值捕获，不会有引用悬挂；但是lambda只能捕获作用域中的非静态局部变量，此处的divisor其实是this-&gt;divisor，容易产生引用悬挂
</span></span></span><span class="line"><span class="cl"><span class="c1">//    }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 解决方法：使用一个局部变量复制成员变量，然后使用显式的值捕获
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">addFilter</span><span class="p">()</span> <span class="k">const</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">int</span> <span class="n">divisorCopy</span> <span class="o">=</span> <span class="n">divisor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">filters</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="n">divisorCopy</span><span class="p">]</span> <span class="p">(</span><span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">value</span> <span class="o">%</span> <span class="n">divisorCopy</span> <span class="o">==</span> <span class="mi">0</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">divisor</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>lambda只能捕获作用域中的非静态局部变量，无法捕获静态或全局变量
<ul>
<li>捕获表示将值拷贝到闭包类中，而lambda中使用静态或全局变量，相当于是对外部的引用，因此此时lambda不是独立的</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/125037605">https://blog.csdn.net/Dong_HFUT/article/details/125037605</a></li>
</ul>
</li>
</ul>
<h1 id="32使用初始化捕获将对象移入闭包">32：使用初始化捕获将对象移入闭包</h1>
<ul>
<li>C++14使用<strong>初始化捕获模式</strong>（也称广义lambda捕获）来实现移动捕获</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="nf">isValid</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">func</span> <span class="o">=</span> <span class="p">[</span><span class="n">pw</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">()]</span> <span class="c1">// 左边是lambda闭包内成员名称，右边是初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">{</span><span class="k">return</span> <span class="n">pw</span><span class="o">-&gt;</span><span class="n">isValid</span><span class="p">();}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>C++11使用<code>std::bind</code>间接实现移动捕获</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="nf">isValid</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">func</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="p">[]</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;&amp;</span> <span class="n">pw</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="n">pw</span><span class="o">-&gt;</span><span class="n">isValid</span><span class="p">();},</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/125111586">https://blog.csdn.net/Dong_HFUT/article/details/125111586</a></li>
</ul>
</li>
</ul>
<h1 id="33泛型lambda的完美转发版本">33：泛型lambda的完美转发版本</h1>
<blockquote>
<p>对<code>auto&amp;&amp;</code>类型的形参使用<code>decltype</code>，以<code>std::forward</code>之</p>
</blockquote>
<ul>
<li>泛型lambda（C++14）：可以使用auto声明形参（即闭包类中的<code>operator()</code>可以使用模板实现）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">(</span><span class="k">auto</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 闭包类中的operator()的大致实现：auto形参实际上是模板类型推导
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">SomeCompilerGeneratedClassName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="n">T</span> <span class="n">x</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="nf">func</span><span class="p">(</span><span class="n">x</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>泛型lambda的完美转发版本：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nf">func</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="p">);}</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// 闭包类中的operator()的大致实现
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">SomeCompilerGeneratedClassName</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">func</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">)</span> <span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">fs</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">params</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nf">func</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">params</span><span class="p">)...</span> <span class="p">);}</span> <span class="c1">// 变长参数版本
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/125116613">https://blog.csdn.net/Dong_HFUT/article/details/125116613</a></li>
</ul>
</li>
</ul>
<h1 id="34优先选用lambda表达式而非stdbind">34：优先选用lambda表达式，而非<code>std::bind</code></h1>
<blockquote>
<p>对于C++11，除了个别边缘case，lambda比<code>std::bind</code>更有优势；C++14，lambda完全可以替代<code>std::bind</code></p>
</blockquote>
<ul>
<li>lambda可读性更强，更容易理解
<ul>
<li>使用<code>std::bind</code>需要保持参数位置，同时需要了解其实现机制
<ul>
<li><code>std::bind</code>需要保持参数位置，因此使用时需要查看原来函数的声明，才能知道占位符对应的参数类型和参数含义；但是lambda形参列表很明确</li>
<li><code>std::bind</code>默认将参数拷贝到绑定对象内部（可以使用<code>std::ref</code>指定传引用），但是lambda可以明确指出值捕获还是引用捕获</li>
<li><code>std::bind</code>绑定对象的函数调用使用了完美转发机制，但是lambda可以从形参列表中清晰看出传值还是传引用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">Widget</span> <span class="n">w</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="n">Logger</span> <span class="n">logger</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">logger</span><span class="p">]</span> <span class="p">(</span><span class="n">CompressLevel</span> <span class="n">level</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">compress</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">logger</span><span class="p">);</span> <span class="p">}</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// 捕获对象：w值捕获，logger引用捕获；形参：level传值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">compress</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">logger</span><span class="p">));</span> <span class="c1">// 需要对应参数顺序
</span></span></span><span class="line"><span class="cl"><span class="c1">// 绑定对象：w值绑定（复制），logger引用绑定；形参：level使用完美转发机制
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><code>std::bind</code>参数绑定和对象调用不是一个时间，因此可能出现逻辑错误（见参考）</li>
</ul>
</li>
<li>lambda灵活性更强
<ul>
<li>如果<code>std::bind</code>绑定的函数存在重载版本，则编译器无法确定使用哪个版本的重载函数
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nf">func</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">funcType</span> <span class="o">=</span> <span class="kt">void</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">bnd</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">funcType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">func</span><span class="p">),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>lambda可以内联
<ul>
<li>因为<code>std::bind</code>中绑定的是函数指针，需要在运行时才能确定；但是lambda中包含函数体，可以进行内联</li>
</ul>
</li>
<li>使用<code>std::bind</code>的两个场景：在C++11中
<ul>
<li>使用<code>std::bind</code>间接实现移动捕获（[[ch06-lambda表达式#32：使用初始化捕获将对象移入闭包|C++14支持移动捕获]]）</li>
<li>使用<code>std::bind</code>绑定参数的完美转发机制，间接多态函数对象（[[ch06-lambda表达式#33：泛型lambda的完美转发版本|C++14支持泛型lambda]]）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">callableObject</span><span class="p">]</span> <span class="p">(</span><span class="k">const</span> <span class="k">auto</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">)</span> <span class="p">{</span> <span class="n">callableObject</span><span class="p">(</span><span class="n">param</span><span class="p">);</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">CallableObject</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="k">operator</span><span class="p">()</span> <span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">CallableObject</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">_1</span><span class="p">);</span> <span class="c1">// 将占位符参数完美转发到可调用对象的调用运算符中
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/125130410">https://blog.csdn.net/Dong_HFUT/article/details/125130410</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch05 右值引用、移动语句和完美转发</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch05-%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E7%A7%BB%E5%8A%A8%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</link>
      <pubDate>Thu, 01 Feb 2024 21:48:16 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch05-%E5%8F%B3%E5%80%BC%E5%BC%95%E7%94%A8%E7%A7%BB%E5%8A%A8%E8%AF%AD%E5%8F%A5%E5%92%8C%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/</guid>
      <description>23：理解std::move和std::forward std::move：返回变量的右值引用 对const对象的移动操作会被转换为拷贝操作 因为</description>
      <content:encoded><![CDATA[<h1 id="23理解stdmove和stdforward">23：理解<code>std::move</code>和<code>std::forward</code></h1>
<ul>
<li><code>std::move</code>：返回变量的右值引用
<ul>
<li>对const对象的移动操作会被转换为拷贝操作
<ul>
<li>因为const对象经过<code>std::move</code>会返回一个const右值引用，而一般函数重载的移动版本形参都是非const的右值引用，无法匹配</li>
</ul>
</li>
<li><code>std::move</code>不移动对象，而且也不保证对象一定被移动，仅仅返回对象的右值引用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>             <span class="c1">// C++14
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">decltype</span><span class="p">(</span><span class="k">auto</span><span class="p">)</span> <span class="n">move</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">)</span>   
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">using</span> <span class="n">ReturnType</span> <span class="o">=</span> <span class="n">remove_reference_t</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;&amp;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">ReturnType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><code>std::forward</code>：实现完美转发（保持对象的左值性或右值性）
<ul>
<li>通常情况下，形参总是左值，即使其类型是右值引用</li>
</ul>
</li>
<li><code>std::move</code>和<code>std::forward</code>只是进行类型转换，在运行时不做任何事</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123765869">https://blog.csdn.net/Dong_HFUT/article/details/123765869</a></li>
</ul>
</li>
</ul>
<h1 id="24区分万能引用和右值引用">24：区分万能引用和右值引用</h1>
<blockquote>
<p>万能引用和右值引用只是形式上类似，但这是两个概念</p>
</blockquote>
<ul>
<li>万能引用：形式为<code>T&amp;&amp;</code>或<code>auto&amp;&amp;</code>，并且存在类型推导
<ul>
<li>函数模板参数：<code>template &lt;typename T&gt; void func(T&amp;&amp; param);</code></li>
<li>auto类型推导：<code>auto&amp;&amp; val = myVal;</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">myFunc</span> <span class="o">=</span> <span class="p">[]</span> <span class="p">(</span><span class="k">auto</span><span class="o">&amp;&amp;</span> <span class="n">func</span><span class="p">,</span> <span class="k">auto</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">params</span><span class="p">)</span> <span class="p">{</span><span class="cm">/* do something */</span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>右值引用
<ul>
<li>带const（不是纯粹的<code>T&amp;&amp;</code>形式）：<code>template &lt;typename T&gt; void func(const T&amp;&amp; param);</code></li>
<li>形式是<code>T&amp;&amp;</code>，但是不存在类型推导：比如vector的<code>push_back</code>，但是<code>emplace_back</code>中参数是万能引用
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Allocator</span> <span class="o">=</span> <span class="n">allocator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">vector</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="n">push_back</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">x</span><span class="p">);</span> <span class="c1">// 调用push_back时，类型T已知
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">Args</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="n">emplace_back</span><span class="p">(</span><span class="n">Args</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">args</span><span class="p">);</span> <span class="c1">// 参数包args的类型Args独立于T，存在类型推导，这里是万能引用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123773321">https://blog.csdn.net/Dong_HFUT/article/details/123773321</a></li>
</ul>
</li>
</ul>
<h1 id="25针对右值引用实施stdmove针对万能引用实施stdforward">25：针对右值引用实施<code>std::move</code>，针对万能引用实施<code>std::forward</code></h1>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span> <span class="c1">// 以例子来说明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">)</span><span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">name</span><span class="p">)),</span> <span class="n">sp</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">sp</span><span class="p">))</span> <span class="p">{}</span> <span class="c1">// 形参为右值引用，将形参（左值）进行移动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">setName</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">newName</span><span class="p">){</span> <span class="c1">// 形参为万能引用，保持形参的左值性或右值性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;set new name:&#34;</span><span class="o">&lt;&lt;</span><span class="n">newName</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">        <span class="n">name</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">newName</span><span class="p">);</span> <span class="c1">// 在函数中使用move或forward时，使用的位置应该是该参数最后一次使用的时候
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span> <span class="k">operator</span><span class="o">+</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">lhs</span><span class="p">.</span><span class="n">name</span> <span class="o">+=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">lhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="n">doNothing</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">);</span> <span class="p">}</span>    
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">sp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>重载<code>setName</code>不是一个好的设计
<ul>
<li>可能效率低：如果传入字面量，即使匹配到右值版本的函数，形参仍然会作为临时对象</li>
<li>如果有多个参数，需要重载$2^N$种，如果使用参数包，则无法实现</li>
</ul>
</li>
<li>在函数中使用move或forward时，使用的位置应该是该参数最后一次使用的时候</li>
<li>如果函数中将形参进行处理，然后返回
<ul>
<li>传值返回：如果形参是右值引用（比如<code>Widget operator+</code>成员函数），使用move返回；如果形参是万能引用（比如<code>doNothing</code>成员函数），使用forward返回</li>
<li>如果返回值是函数中的局部变量，则编译器有特定的优化：<a href="https://blog.csdn.net/Dong_HFUT/article/details/123911978">RVO</a></li>
</ul>
</li>
<li>返回值优化RVO（Return Value Optimization）：减少函数返回时产生临时对象，进而消除部分拷贝或移动操作
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 原来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Widget</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// 有一次默认构造，一次拷贝构造
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w</span> <span class="o">=</span> <span class="n">func</span><span class="p">();</span> <span class="c1">// 再加上一次拷贝构造
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用RVO优化，上面过程相当于：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span> <span class="n">w</span><span class="p">.</span><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// Widget w在外面分配空间，直接传入func中进行构造，因此只需要一次（默认）构造
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// NRVO(Named Return Value Optimization)原理类似
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="nf">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span> <span class="n">w</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">w</span><span class="p">;</span> <span class="c1">// 返回对象已经具名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用前提：局部对象的类型和返回值类型相同，而且局部对象就是返回值</li>
<li>限制场景：
<ul>
<li>返回<code>std::move()</code>：默认构造+移动构造</li>
<li>进行赋值而非初始化<code>Widget w; w = func();</code>：默认构造+func中的默认构造和拷贝构造</li>
<li>不同的分支条件下，返回不同的局部对象</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123946594">https://blog.csdn.net/Dong_HFUT/article/details/123946594</a></li>
</ul>
</li>
</ul>
<h1 id="26避免依万能引用类型进行重载">26：避免依万能引用类型进行重载</h1>
<ul>
<li>原因：函数匹配规则
<ul>
<li>如果模板实例化出的函数和普通重载函数都精确匹配，则优先选择普通重载函数，其次选择模板函数实例化出来的精确版本</li>
</ul>
</li>
<li>例子</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>        
</span></span><span class="line"><span class="cl">        <span class="k">explicit</span> <span class="n">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">nameFromIdx</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span> <span class="p">{}</span> 
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="c1">// 对Person(int)的重载
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">explicit</span> <span class="n">Person</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">short</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Person</span> <span class="nf">p1</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> <span class="c1">// 会调用模板实例化的版本，而非进行类型转换调用普通版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="n">Person</span> <span class="nf">p2</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 这个情况极其容易混淆，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Person</span> <span class="nf">q2</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span> <span class="c1">// 会调用生成的拷贝构造函数（因为其实参为const Person&amp;）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Person</span> <span class="nf">q1</span><span class="p">(</span><span class="n">p1</span><span class="p">);</span> <span class="c1">// 会调用模板实例化的版本，而非调用生成的拷贝构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 尤其当Person作为基类，派生类在构造函数中初始化基类部分时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">SpecialPerson</span><span class="o">:</span> <span class="k">public</span> <span class="n">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpecialPerson</span><span class="p">(</span><span class="k">const</span> <span class="n">SpecialPerson</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span><span class="o">:</span> <span class="n">Person</span><span class="p">(</span><span class="n">rhs</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="n">SpecialPerson</span><span class="p">(</span><span class="n">SpecialPerson</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">)</span><span class="o">:</span> <span class="n">Person</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">rhs</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 这两个构造函数均使用基类Person构造函数的完美转发版本，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 对万能引用参数的函数进行重载，不是一个好的设计
</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="27熟悉依万能引用类型进行重载的替代方案">27：熟悉依万能引用类型进行重载的替代方案</h1>
<ul>
<li>
<p>放弃重载，使用不同的函数名</p>
<ul>
<li>但是对于构造函数就无能为力</li>
</ul>
</li>
<li>
<p>普通函数形参为<code>const type&amp;</code>类型</p>
<ul>
<li>因此传入const实参，会优先使用原来的普通版本，而非重载的万能引用版本</li>
</ul>
</li>
<li>
<p>将形参从引用类型换成值类型：当知道肯定要复制形参时，考虑按值传递</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">explicit</span> <span class="n">Person</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="k">explicit</span> <span class="nf">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">)</span><span class="o">:</span> <span class="n">name</span><span class="p">(</span><span class="n">nameFromIdx</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用Tag分发：使用Tag对参数进行区分，进而分发到不同的函数实现</p>
<ul>
<li>背景：如果想使用完美转发，就必须要使用万能引用</li>
<li>例子：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 两个函数实现的版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">logAndAddImpl</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">false_type</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">logAndAddImpl</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">true_type</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用Tag对参数进行区分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">logAndAdd</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">logAndAddImpl</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">name</span><span class="p">),</span> 
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">is_integral</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&gt;</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">);</span> <span class="c1">// 或者C++14：std::is_integral&lt;typename std::remove_reference_t&lt;T&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果传入true or false，到运行时才能决定</li>
<li>在编译阶段进行模板匹配，<code>std::is_integral</code>在编译阶段就可以判断类型是否为整型</li>
</ul>
</li>
</ul>
</li>
<li>
<p>约束接受万能引用的模板：<code>std::enable_if</code>判断</p>
<ul>
<li>背景：构造函数无法使用Tag分发</li>
<li>例子：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;type_traits&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">explicit</span> <span class="n">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">idx</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">nameFromIdx</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="k">typename</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_if_t</span><span class="o">&lt;</span>
</span></span><span class="line"><span class="cl">                <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_base_of_v</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">decay_t</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> 
</span></span><span class="line"><span class="cl">                <span class="o">&amp;&amp;</span>
</span></span><span class="line"><span class="cl">                <span class="o">!</span><span class="n">std</span><span class="o">::</span><span class="n">is_integral_v</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">remove_reference_t</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span>                    
</span></span><span class="line"><span class="cl">            <span class="o">&gt;</span>            
</span></span><span class="line"><span class="cl">    <span class="o">&gt;</span> <span class="c1">// 当类型T不为Person或者其派生类，抑或T不为int型时，才会选择这个的重载版本，使用万能引用进行重载并实现完美转发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">explicit</span> <span class="n">Person</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">name</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">static_assert</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="n">std</span><span class="o">::</span><span class="n">is_constructible</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span><span class="o">::</span><span class="n">value</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">            <span class="s">&#34;Parameter name can&#39;t be used to construct a std::string&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">);</span> <span class="c1">// 验证类型为std::string的对象能否被类型为T的对象构造
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>std::enable_if&lt;condition&gt;::type</code>：只有满足条件的模板才会使用（C++14<code>std::enable_if_t</code>）</li>
<li><code>std::is_same&lt;T1, T2&gt;::value</code>（C++17<code>std::is_same_v</code>）</li>
<li><code>std::is_base_of&lt;T1, T2&gt;::value</code>：如果T2继承于T1，则为true；且<code>std::is_base_of&lt;T, T&gt;::value==true</code>（C++17<code>std::is_base_of_v</code>）</li>
<li><code>std::decay&lt;T&gt;::type</code>的类型与T的类型相同，忽略了引用、const、volatile（C++14<code>std::decay_t</code>）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>权衡</p>
<ul>
<li>前三种方案都需要对需要调用的函数形参逐一指定其类型，后两种方案使用万能引用实现了完美转发</li>
<li>虽然完美转发效率更高（避免创建临时对象），但是某些对象无法实现完美转发，并且使用完美转发并编译报错时，报错信息的可读性很差
<ul>
<li><code>std::is_constructible</code>可以在编译期测试一个类型的对象能否被另一个不同类型的对象（或者多个不同类型的多个对象）构造，因此可以用来验证转发函数的万能引用参数是否合法</li>
</ul>
</li>
</ul>
</li>
<li>
<p>参考</p>
<ul>
<li>SFINAE技术</li>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/124227488">https://blog.csdn.net/Dong_HFUT/article/details/124227488</a></li>
</ul>
</li>
</ul>
<h1 id="28理解引用折叠">28：理解引用折叠</h1>
<ul>
<li>几种引用折叠的应用场景：
<ul>
<li>万能引用的实例化：在模板类型推导时，可能出现“引用的引用”的情况，此时需要用到引用折叠</li>
<li><code>std::forward</code>完美转发：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">forward</span><span class="p">(</span><span class="k">typename</span> <span class="n">remove_reference</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;&amp;&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>auto类型推导，decltype类型推导</li>
<li>typedef类型别名</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/124517043">https://blog.csdn.net/Dong_HFUT/article/details/124517043</a></li>
</ul>
</li>
</ul>
<h1 id="29假定移动操作不存在成本高未使用">29：假定移动操作不存在、成本高、未使用</h1>
<ul>
<li>几种移动语义不可用、不高效的情况：
<ul>
<li>没有移动操作：编译器只有在没有用户自定义拷贝操作和析构函数时，才自动生成移动操作</li>
<li>移动未能更快：
<ul>
<li><code>std:array</code>
<ul>
<li>一般STL中容器的对象都分配在堆上，对象中有指向堆上内存的指针，因此移动操作只需要进行指针的更新、源对象的指针置空即可</li>
<li>但是<code>std::array</code>中内容分配在栈上（栈上的数组），移动操作等于复制操作</li>
</ul>
</li>
<li><code>std::string</code>
<ul>
<li><code>std::string</code>针对小对象有一个优化SSO（Small String Optimization），小对象直接存储在栈上而非堆上，省去动态内存分配</li>
</ul>
</li>
</ul>
</li>
<li>移动不可用：移动操作没有标记为<code>noexcept</code>
<ul>
<li>如果移动操作没有标记为<code>noexcept</code>，即使是适合使用移动操作的场景，编译器也会使用复制操作替代</li>
</ul>
</li>
<li>源对象是左值：只有右值可以作为移动操作的源（左值可以用，但是很容易造成空悬问题）</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/124577258">https://blog.csdn.net/Dong_HFUT/article/details/124577258</a></li>
</ul>
</li>
</ul>
<h1 id="30熟悉完美转发的失败情形">30：熟悉完美转发的失败情形</h1>
<ul>
<li>完美转发的含义：不仅转发对象，而且转发其特征（左值、右值、const、volatile）</li>
<li>完美转发的失败情形
<ul>
<li>列表初始化
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">fwd</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">});</span> <span class="c1">// ok
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fwd</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">});</span> <span class="c1">// 编译报错：无法推断出T的类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">il</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">fwd</span><span class="p">(</span><span class="n">il</span><span class="p">);</span> <span class="c1">// T=initializer_list&lt;int&gt;
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>0或NULL作为空指针
<ul>
<li>0或NULL会被推导为int型而非空指针类型，因此完美转发后得到的类型是int，但是形参是指针类型</li>
</ul>
</li>
<li>仅仅声明整型的静态常量数据成员
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="n">cosnt</span> <span class="kt">int</span> <span class="n">cnst</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span> <span class="c1">// 声明而非定义，不会分配实际的存储空间，而是常量传播（直接将用到cnst的地方替换为12）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">fwd</span><span class="p">(</span><span class="n">Widget</span><span class="o">::</span><span class="n">cnst</span><span class="p">);</span> <span class="c1">// 编译报错：找不到cnst的定义
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>只声明不会分配空间，因此无法取地址，也无法使用引用，不能使用完美转发</li>
<li>解决方法：在类外或是对应.cpp文件中添加定义：<code>const int cnst = 12;</code></li>
</ul>
</li>
<li>函数重载和函数模板
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">f</span><span class="p">(</span><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">pf</span><span class="p">)(</span><span class="kt">int</span><span class="p">));</span> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">func</span><span class="p">);</span> <span class="c1">// ok
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">fwd</span><span class="p">(</span><span class="n">func</span><span class="p">);</span> <span class="c1">// 模板类型推导失败：无法确定是哪个重载版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 解决方法：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">using</span> <span class="n">FuncType</span> <span class="o">=</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">int</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">fwd</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">FuncType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">func</span><span class="p">));</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 但是万能引用和完美转发一般是针对任意类型的，这里限定了类型，语义与实现矛盾
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>位域：位域只是int类型的一部分，没有一个确切地址，也就无法引用</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/124787082">https://blog.csdn.net/Dong_HFUT/article/details/124787082</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch04 智能指针</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch04-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:58 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch04-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>18：使用std::unique_ptr管理具备专属所有权的资源 std::unique_ptr表示独占所有权，因此无法拷贝（拷贝构造、拷贝赋</description>
      <content:encoded><![CDATA[<h1 id="18使用stdunique_ptr管理具备专属所有权的资源">18：使用<code>std::unique_ptr</code>管理具备专属所有权的资源</h1>
<ul>
<li><code>std::unique_ptr</code>表示独占所有权，因此无法拷贝（拷贝构造、拷贝赋值是delete的），只能进行移动操作从而转移资源控制权
<ul>
<li>例外：可以从函数返回一个<code>std::unique_ptr</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">delInt</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="kt">int</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;My deleter&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="k">delete</span> <span class="n">p</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="k">decltype</span><span class="p">(</span><span class="n">delInt</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">pInt</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">delInt</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pInt</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>删除器是<code>std::unique_ptr</code>类型的一部分
<ul>
<li>在不定义删除器的情况下，<code>std::unique_ptr</code>内存占用和原始指针相同</li>
<li>如果自定义删除器，则<code>std::unique_ptr</code>内存占用会变大</li>
</ul>
</li>
<li><code>std::unique_ptr</code>可以指向数组，默认删除器为<code>delete[]</code>：<code>std::unique_ptr&lt;int[]&gt; p(new int[5]{1,2,3,4,5});</code>
<ul>
<li>但是数组形式用到的场合很少，尽量使用STL</li>
</ul>
</li>
<li><code>std::unique_ptr</code>可以直接隐式转换为<code>std::shared_ptr</code></li>
<li>典型应用：针对继承体系，作为工厂函数的返回值类型
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Animal</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Dog</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Cat</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">Ts</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">makeAnimal</span><span class="p">(</span><span class="n">AnimalType</span> <span class="n">type</span><span class="p">,</span> <span class="n">Ts</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">AnimalInfo</span><span class="p">){</span> <span class="c1">// C++14中函数返回值可以写为auto，因此unique_ptr的删除器可以放在函数内部，否则显式写出返回类型时需要知道删除器类型，因此删除器只能写在函数外部
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">auto</span> <span class="n">delAnimal</span> <span class="o">=</span> <span class="p">[](</span><span class="n">AnimalType</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span> <span class="p">{</span> <span class="n">makeMyLog</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span> <span class="k">delete</span> <span class="n">ptr</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="p">,</span> <span class="k">decltype</span><span class="p">(</span><span class="n">delAnimal</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">up</span><span class="p">(</span><span class="k">nullptr</span><span class="p">,</span> <span class="n">delAnimal</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">Dog</span><span class="p">)</span> <span class="n">up</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">Dog</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">AnimalInfo</span><span class="p">)...));</span> <span class="c1">// 参数是万能引用，这里进行完美转发
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">type</span> <span class="o">==</span> <span class="n">Cat</span><span class="p">)</span> <span class="n">up</span><span class="p">.</span><span class="n">reset</span><span class="p">(</span><span class="k">new</span> <span class="n">Cat</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">AnimalInfo</span><span class="p">)...));</span> <span class="c1">// 使用reset使得指针独占资源的所有权，不能直接将原始指针赋值给智能指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">up</span><span class="p">;</span> <span class="c1">// 返回unique_ptr
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123465058">https://blog.csdn.net/Dong_HFUT/article/details/123465058</a></li>
</ul>
</li>
</ul>
<h1 id="19使用stdshared_ptr管理具备共享所有权的资源">19：使用<code>std::shared_ptr</code>管理具备共享所有权的资源</h1>
<ul>
<li><code>std::shared_ptr</code>可以拷贝，通过引用计数来管理资源的生命周期</li>
<li><code>std::shared_ptr</code>内存模型
<ul>
<li>一个<code>std::shared_ptr</code>大小通常为普通指针的两倍：一个指针指向资源，另一个指针指向控制块</li>
<li>控制块中通过原子操作维护引用计数，保存deleter（因此deleter不属于<code>std::shared_ptr</code>类型的一部分），保存弱计数等</li>
</ul>
</li>
<li><code>std::shared_ptr</code>的使用：
<ul>
<li>使用<code>std::make_shared</code>、<code>std::unique_ptr</code>、原始指针创建<code>std::shared_ptr</code>，会为资源创建一个控制块
<ul>
<li>如果资源有多个控制块，就会被多次析构，因此尽量避免使用原始指针构造<code>std::shared_ptr</code></li>
</ul>
</li>
<li>使用<code>std::shared_ptr</code>或<code>std::weak_ptr</code>创建一个<code>std::shared_ptr</code>，不会创建一个新的控制块</li>
<li><code>this</code>的陷阱：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;&gt;</span> <span class="n">eatList</span><span class="p">;</span> <span class="c1">// 追踪哪些Animal调用了eat方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">Animal</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">eat</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">eatList</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="c1">// eatList.push_back(shared_ptr&lt;Animal&gt;(this));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Cat</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Dog</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animai</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">myCat</span><span class="p">(</span><span class="k">new</span> <span class="n">Cat</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">myCat</span><span class="o">-&gt;</span><span class="n">eat</span><span class="p">();</span> <span class="c1">// 针对同一个对象创建了两个控制块
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>解决方法一：使类继承自<code>std::enable_shared_from_this</code>，类内部使用<code>shared_from_this</code>方法，搜索当前对象的控制块，如果有就不用创建控制块了，如果没有则抛出异常，因此适合于当前对象已经创建过控制块的情况
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;&gt;</span> <span class="n">eatList</span><span class="p">;</span> <span class="c1">// 追踪哪些Animal调用了eat方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">Animal</span><span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_shared_from_this</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">eat</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">        <span class="n">eatList</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">shared_from_this</span><span class="p">());</span> <span class="c1">// eatList.push_back(shared_ptr&lt;Animal&gt;(shared_from_this()));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Cat</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Dog</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animai</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">myCat</span><span class="p">(</span><span class="k">new</span> <span class="n">Cat</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">myCat</span><span class="o">-&gt;</span><span class="n">eat</span><span class="p">();</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>解决方法二：见127页，代码是自己实现的，有误
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;&gt;</span> <span class="n">eatList</span><span class="p">;</span> <span class="c1">// 追踪哪些Animal调用了eat方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">struct</span> <span class="nc">Animal</span><span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_shared_from_this</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span><span class="p">...</span> <span class="n">Ts</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="k">static</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span> <span class="n">create</span><span class="p">(</span><span class="n">Ts</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Animal</span><span class="o">&gt;</span><span class="p">(</span><span class="n">Animal</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">foward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">params</span><span class="p">)...));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">virtual</span> <span class="kt">void</span> <span class="nf">eat</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">            <span class="n">eatList</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">shared_from_this</span><span class="p">());</span> <span class="c1">// eatList.push_back(shared_ptr&lt;Animal&gt;(shared_from_this()));
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">Animal</span><span class="p">()</span> <span class="p">{}</span> <span class="c1">// 构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Cat</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animal</span><span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Dog</span><span class="o">:</span> <span class="k">public</span> <span class="n">Animai</span><span class="p">{};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123599599">https://blog.csdn.net/Dong_HFUT/article/details/123599599</a></li>
</ul>
</li>
</ul>
<h1 id="20对于类似stdshared_ptr但是可能空悬的指针使用stdweak_ptr">20：对于类似<code>std::shared_ptr</code>但是可能空悬的指针使用<code>std::weak_ptr</code></h1>
<ul>
<li><code>std::weak_ptr</code>通常视为<code>std::shared_ptr</code>的辅助工具，通过<code>std::shared_ptr</code>构造<code>std::weak_ptr</code>
<ul>
<li><code>std::weak_ptr</code>不会影响对象的引用计数</li>
<li>但是<code>std::weak_ptr</code>没有解引用操作，必须调用<code>lock</code>转换为<code>std::shared_ptr</code>来访问对象
<ul>
<li>例子：<code>if(shared_ptr&lt;int&gt; p = wp.lock()&gt; cout&lt;&lt;*p&lt;&lt;endl;</code></li>
</ul>
</li>
</ul>
</li>
<li>典型应用：
<ul>
<li>避免<code>shared_ptr</code>循环引用：将其中一个<code>shared_ptr</code>改为<code>weak_ptr</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">A</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span> <span class="n">pb</span><span class="p">;</span> <span class="c1">// std::weak_ptr&lt;B&gt; pb;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">B</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">pa</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span> <span class="n">pa</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span> <span class="n">pb</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="n">pa</span><span class="o">-&gt;</span><span class="n">pb</span> <span class="o">=</span> <span class="n">pb</span><span class="p">;</span> <span class="c1">// pb和pa-&gt;pb同时指向同一个对象B，引用计数为2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">pb</span><span class="o">-&gt;</span><span class="n">pa</span> <span class="o">=</span> <span class="n">pa</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>带缓存的工厂方法
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&gt;</span> <span class="n">fastLoadWidget</span><span class="p">(</span><span class="n">WidgetID</span> <span class="n">id</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">WidgetID</span><span class="p">,</span> <span class="n">weak_ptr</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&gt;&gt;</span>  <span class="n">cache</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&gt;</span> <span class="n">widgetPtr</span> <span class="o">=</span> <span class="n">cache</span><span class="p">[</span><span class="n">id</span><span class="p">].</span><span class="n">lock</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">widgetPtr</span><span class="p">){</span> <span class="c1">// 缓存中没有
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">widgetPtr</span> <span class="o">=</span> <span class="n">loadWidget</span><span class="p">(</span><span class="n">id</span><span class="p">);</span> <span class="c1">// 调用原始工厂方法创建，并加入到缓存中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">cache</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">widgetPtr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">widgetPtr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>观察者设计模式：多个观察者（observer）对象同时监听一个主题（subject）对象，主题对象会在其发生状态改变时发出通知。主题对象不会控制其观察者的生存期，但需要确认当一个观察者对象被析构后，主题对象不会再访问它。一种合理的设计就是让每个主题对象持有指向其观察者对象的<code>std::weak_ptr</code>，以便在使用之前确认它是否空悬。</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123612236">https://blog.csdn.net/Dong_HFUT/article/details/123612236</a></li>
</ul>
</li>
</ul>
<h1 id="21优先选用stdmake_unqiue和stdmake_shared而非直接使用new">21：优先选用<code>std::make_unqiue</code>和<code>std::make_shared</code>，而非直接使用new</h1>
<ul>
<li>make函数可以传入任意集合的参数，然后完美转发给构造函数，并动态创建一个对象，返回智能指针
<ul>
<li>支持auto</li>
<li>避免异常：将[[ch03-资源管理#17：以独立语句将new的对象置入智能指针| effective C++ item17：以独立语句将new的对象置入智能指针]]改进为使用make函数
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span> <span class="n">sp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">priority</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">Widget</span><span class="p">),</span> <span class="n">priority</span><span class="p">);</span> <span class="c1">// 可能由于异常导致内存泄露
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">(),</span> <span class="n">priority</span><span class="p">);</span> <span class="c1">// 不会由于异常导致内存泄露
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 如果需要自定义删除器，并且又可以避免异常
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span> <span class="n">sp</span><span class="p">(</span><span class="k">new</span> <span class="n">Widget</span><span class="p">,</span> <span class="n">myDeleter</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">sp</span><span class="p">),</span> <span class="n">priority</span><span class="p">);</span> <span class="c1">// 直接传递一个右值，避免了修改引用计数
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>效率更高：make函数只需要申请一次内存（同时存储对象和控制块），但是使用<code>shared_ptr&lt;Widget&gt;(new Widget)</code>需要申请两次内存（一次对象，一次控制块）</li>
<li>make函数的缺点：
<ul>
<li>无法自定义deleter</li>
<li>语义歧义：比如使用<code>()</code>和<code>{}</code>初始化vector代表不同的方式，make函数可以完美转发<code>()</code>，不支持完美转发<code>{}</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">sp1</span> <span class="o">=</span> <span class="n">make_shared</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> <span class="c1">// {3,3};
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">sp2</span><span class="p">(</span><span class="k">new</span> <span class="n">vector</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">});</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">initList</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">sp3</span> <span class="o">=</span> <span class="n">make_shared</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">initList</span><span class="p">);</span> <span class="c1">// 不支持：make_shared&lt;vector&lt;int&gt;&gt;({1,2,3,4,5});
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>不建议对自定义内存管理方式的类使用 make 函数：通常情况下，类自定义的<code>operator new</code>和<code>operator delete</code>被设计成用来分配和释放能精确容纳该类大小的内存块，但<code>std::allocate_shared</code>所要求的内存大小并不等于动态分配对象的大小，而是在其基础上加上控制块的大小。</li>
<li>若存在非常大的对象和比相应的<code>std::shared_ptr</code>生存期更久的<code>std::weak_ptr</code>，不建议使用 make 函数，会导致对象的析构和内存的释放之间产生延迟
<ul>
<li>如果只申请一块内存（make函数），如果后来<code>shared_ptr</code>的引用计数为0，但是<code>weak_ptr</code>的引用计数不为0时，对象销毁会被延长，只有当<code>weak_ptr</code>的引用计数为0时，控制块才被释放</li>
<li>如果使用new的话，可以立即销毁对象</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123622543">https://blog.csdn.net/Dong_HFUT/article/details/123622543</a></li>
</ul>
</li>
</ul>
<h1 id="22使用pimpl习惯用法时将特殊成员函数的定义放到实现文件中">22：使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中</h1>
<ul>
<li>PImpl技术（Pointer to Implementation，编译防火墙）：将类的实现放在另一个单独的类中，并通过不透明的指针进行访问。因此可以有效减少编译依赖。
<ul>
<li>原理：一个只声明但是不定义的类型是不完整类型，声明指向它的指针是可以通过编译的</li>
</ul>
</li>
<li>常见错误：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// in &#34;widget.h&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">Widget</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">Widget</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">struct</span> <span class="nc">Impl</span><span class="p">;</span>                 
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span> <span class="n">pImpl</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//==================================================================================//
</span></span></span><span class="line"><span class="cl"><span class="c1">// in &#34;widget.cpp&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;widget.h&#34;</span><span class="cp">  
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">struct</span> <span class="nc">Widget</span><span class="o">::</span><span class="n">Impl</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">()</span><span class="o">:</span> <span class="n">pImpl</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span><span class="p">()){}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//==================================================================================//
</span></span></span><span class="line"><span class="cl"><span class="c1">// in &#34;main.cpp&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;widget.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span> <span class="n">w</span><span class="p">;</span> <span class="c1">// 报错：/usr/include/c++/9/bits/unique_ptr.h:79:16: error: invalid application of ‘sizeof’ to incomplete type ‘Widget::Impl’
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>报错原因：在析构<code>Widget w</code>时，此时看到的<code>Impl</code>是不完整类型
<ul>
<li>在编译<code>widget.cpp</code>时没有问题：<code>g++ -c widget.cpp -o widget.o</code></li>
<li>在编译<code>main.cpp</code>时出问题：<code>g++ -c main.cpp -o main.o</code>
<ul>
<li>没有定义<code>Widget</code>的析构函数，因此使用自动生成的析构函数（默认是<code>inline</code>的）</li>
<li>本来如果声明了<code>Widget</code>的析构函数，编译时无法进行处理，后面链接时链接到定义，运行时才能析构<code>pImpl</code>（因为经过链接，此时也知道<code>Impl</code>是完整类型）</li>
<li>但是正因为自动生成的析构函数是<code>inline</code>的，编译时就可以展开，此时析构<code>pImpl</code>当然看到的<code>Impl</code>是不完整类型（还没有链接到<code>widget.o</code>）</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>使用说明
<ul>
<li>考虑到如上报错和[[ch03-转向现代C++#17：理解特殊成员函数的生成机制|item17：理解特殊成员函数的生成机制]]，因此最好将拷贝控制成员和析构函数自定义，且声明与实现分离（防止进行内联）</li>
<li>为了实现PImpl技术，使用<code>unique_ptr</code>是最合适的，因为<code>pImpl</code>指针独享<code>Impl</code>的所有权，如果使用<code>shared_ptr</code>则上述报错不会出现（因为删除器不属于类型的一部分，属于控制块，不会包含删除器的代码）</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123704824">https://blog.csdn.net/Dong_HFUT/article/details/123704824</a></li>
<li><a href="https://github.com/liuzengh/CppIdioms/blob/main/code/pimpl/person.cpp">https://github.com/liuzengh/CppIdioms/blob/main/code/pimpl/person.cpp</a></li>
</ul>
</li>
<li>实例
<ul>
<li><code>widget.h</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">Widget</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// std::string _name;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">struct</span> <span class="nc">Impl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span> <span class="n">pImpl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><code>widget.cpp</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;widget.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Widget</span><span class="o">::</span><span class="n">Impl</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">Impl</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_name</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">_name</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">)</span><span class="o">:</span> <span class="n">pImpl</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">::~</span><span class="n">Widget</span><span class="p">()</span> <span class="p">{}</span> 
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span><span class="o">:</span> <span class="n">pImpl</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_unique</span><span class="o">&lt;</span><span class="n">Impl</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pImpl</span><span class="p">))</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="o">*</span><span class="n">pImpl</span> <span class="o">=</span> <span class="o">*</span><span class="n">rhs</span><span class="p">.</span><span class="n">pImpl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">::</span><span class="n">Widget</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="o">=</span><span class="k">default</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">Widget</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="o">=</span><span class="k">default</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">Widget</span><span class="o">::</span><span class="n">getName</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">getName</span><span class="p">();}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><code>main.cpp</code>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;widget.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;iostream&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span> <span class="n">w</span><span class="p">(</span><span class="s">&#34;zhang&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">w</span><span class="p">.</span><span class="n">getName</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch03 转向现代C&#43;&#43;</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch03-%E8%BD%AC%E5%90%91%E7%8E%B0%E4%BB%A3c&#43;&#43;/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:37 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch03-%E8%BD%AC%E5%90%91%E7%8E%B0%E4%BB%A3c&#43;&#43;/</guid>
      <description>07：在创建对象时注意区分()和{} 初始化方式 1 2 3 4 int x1(1); int x2 = 2; int x3{3}; // 统一初始化（列表初始化） int x4 = {4}; // 和第三种方式相同 ()和=初始化的限</description>
      <content:encoded><![CDATA[<h1 id="07在创建对象时注意区分和">07：在创建对象时注意区分<code>()</code>和<code>{}</code></h1>
<ul>
<li>初始化方式
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">x1</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x2</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x3</span><span class="p">{</span><span class="mi">3</span><span class="p">};</span> <span class="c1">// 统一初始化（列表初始化）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">int</span> <span class="n">x4</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">};</span> <span class="c1">// 和第三种方式相同
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><code>()</code>和<code>=</code>初始化的限制
<ul>
<li><code>()</code>不能用于non-static成员的初始化</li>
<li>不能拷贝的对象不能使用<code>()</code>初始化</li>
</ul>
</li>
<li><code>{}</code>初始化的优点
<ul>
<li>禁止基本类型之间的隐式窄化类型转换：比如不能使用double初始化int型变量</li>
<li>避免了C++复杂的语法分析：<a href="https://blog.csdn.net/Dong_HFUT/article/details/126435993">C++&rsquo;s most vexing parse</a>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">Widget</span> <span class="nf">w1</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// 传入一个实参，构造出一个对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="nf">w2</span><span class="p">();</span> <span class="c1">// 本来想调用无形参的构造函数构造一个对象，但是实际上声明了一个函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w3</span><span class="p">{};</span> <span class="c1">// 调用无形参的构造函数，构造出一个对象
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li><code>{}</code>的缺陷
<ul>
<li>auto类型推导中使用<code>{}</code>进行初始化，则auto被推断为<code>initializer_list&lt;T&gt;</code></li>
<li>会优先使用形参为<code>initializer_list&lt;T&gt;</code>的构造函数，即使其他的构造函数更加匹配
<ul>
<li>只有当<code>{}</code>中参数无法转换为<code>initializer_list</code>中类型时，编译器才匹配普通函数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">()</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;0&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;1&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">d</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;2&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">il</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;2&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="k">const</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;copy ctor&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Widget</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;&amp;</span> <span class="n">w</span><span class="p">)</span> <span class="p">{</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;move copy ctor&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="k">operator</span> <span class="nf">int</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;convert to int&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Widget</span> <span class="n">w1</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="nb">true</span><span class="p">};</span> <span class="c1">// 调用Widget(initializer_list&lt;int&gt; il)，即使Widget(int i, bool d)更加匹配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w2</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">};</span> <span class="c1">// 编译报错，本来调用Widget(initializer_list&lt;int&gt; il)，但是使用{}初始化禁止窄化类型转换（存在从double到int的转换）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w3</span><span class="p">{</span><span class="n">w1</span><span class="p">};</span> <span class="c1">// 调用Widget(initializer_list&lt;int&gt; il)（中间先将w1转为int），即使Widget(const Widget&amp; w)更加匹配（如果w1无法转换为int，则调用该构造函数）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w4</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">w1</span><span class="p">)};</span> <span class="c1">// 调用Widget(initializer_list&lt;int&gt; il)，即使Widget(Widget&amp;&amp; w)更加匹配
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 特殊情况：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w4</span><span class="p">{};</span> <span class="c1">// 调用Widget()，而非调用Widget(initializer_list&lt;int&gt; il)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="n">w5</span><span class="p">{{}};</span> <span class="c1">// 调用Widget(initializer_list&lt;int&gt; il)，而非调用Widget()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">Widget</span> <span class="nf">w6</span><span class="p">({});</span> <span class="c1">// 调用Widget(initializer_list&lt;int&gt; il)，而非调用Widget()
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>使用模板创建对象时，仔细考虑使用<code>()</code>还是<code>{}</code>进行初始化
<ul>
<li>标准库函数<code>std::make_unique</code>和<code>std::make_shared</code>也面临着这个问题，它们的解决方案是在内部使用小括号，并将这个决定写进文档中，作为其接口的组成部分。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span><span class="p">...</span> <span class="n">Ts</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">Ts</span><span class="o">&amp;&amp;</span><span class="p">...</span> <span class="n">params</span><span class="p">){</span> <span class="c1">// 使用可变参数模板
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">T</span> <span class="nf">localVector1</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">params</span><span class="p">)...);</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="n">localVector2</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Ts</span><span class="o">&gt;</span><span class="p">(</span><span class="n">params</span><span class="p">)...};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// 推断出T=vector&lt;int&gt;, Ts=int
</span></span></span><span class="line"><span class="cl"><span class="c1">// localVector1: 4,4,4
</span></span></span><span class="line"><span class="cl"><span class="c1">// localVector2: 3,4
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122811753">https://blog.csdn.net/Dong_HFUT/article/details/122811753</a></li>
</ul>
</li>
</ul>
<h1 id="08优先选用nullptr而非0或null">08：优先选用nullptr，而非0或NULL</h1>
<ul>
<li>字面量0是一个int，NULL的实现为0L，可以转换为int，bool，<code>void*</code></li>
<li><code>nullptr</code>可以理解为任意类型的空指针
<ul>
<li>使得重载函数的调用明确</li>
<li>提高代码的清晰度</li>
<li>使用类型推导时，<code>nullptr</code>可以隐式转换为任意类型指针</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122891898">https://blog.csdn.net/Dong_HFUT/article/details/122891898</a></li>
</ul>
</li>
</ul>
<h1 id="09优先选用别名声明而非typedef">09：优先选用别名声明，而非typedef</h1>
<ul>
<li><code>using</code>别名的优点：
<ul>
<li>清晰，比<code>typedef</code>更容易理解</li>
<li>可以直接对模板起别名
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="n">MyAllocList</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">MyAlloc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如果非要使用typedef，需要包装一层
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">MyAllocList</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">MyAlloc</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="n">type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyAllocList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list1</span><span class="p">;</span> <span class="c1">// list1=std::list&lt;T, MyAlloc&lt;T&gt;&gt;,此时MyAllocList一定是一个别名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">typename</span> <span class="n">MyAllocList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">list2</span><span class="p">;</span> <span class="c1">// list2=MyAllocList&lt;T&gt;中的std::list&lt;T, MyAlloc&lt;T&gt;&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 需要使用typename显式说明MyAllocList&lt;T&gt;::type是一个类型，而非数据成员
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>应用：标准库的<code>&lt;type_traits&gt;</code>中提供了一整套用于类型转换的类模板
<ul>
<li>虽然C++11中仍然是使用<code>typedef</code>实现的，但是C++14中是使用<code>using</code>声明实现的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">remove_const</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">type</span> <span class="c1">// C++11中, 是一个内部包裹typedef的类模板，将T中的const属性移除
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">std</span><span class="o">::</span><span class="n">remove_const_t</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span>     <span class="c1">// C++14中, 是一个类模板中typedef别名的别名，将T中的const属性移除
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122847510">https://blog.csdn.net/Dong_HFUT/article/details/122847510</a></li>
</ul>
</li>
</ul>
<h1 id="10优先选用限定作用域的枚举类型而非不限作用域的枚举类型">10：优先选用限定作用域的枚举类型，而非不限作用域的枚举类型</h1>
<ul>
<li>无作用域限制的枚举（unscoped enums，C++98）
<ul>
<li>有时使用可能简便一点
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">using</span> <span class="n">UserInfo</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tuple</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span> <span class="c1">//name, email,age
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">enum</span> <span class="nc">UserInfoFields</span> <span class="p">{</span><span class="n">uiName</span><span class="p">,</span> <span class="n">uiEmail</span><span class="p">,</span> <span class="n">uiAge</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">UserInfo</span> <span class="n">uInfo</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">email</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">uInfo</span><span class="p">);</span> <span class="c1">// 位置1为email
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">auto</span> <span class="n">email</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">uiEmail</span><span class="o">&gt;</span><span class="p">(</span><span class="n">uInfo</span><span class="p">);</span> <span class="c1">// 发生隐式类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">auto</span> <span class="n">email</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">UserInfoFields</span><span class="o">::</span><span class="n">uiEmail</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">uInfo</span><span class="p">);</span> <span class="c1">// 冗余
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// C++14下的辅助类:既想使用有作用限制的枚举，又不想过于啰嗦
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">E</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="k">auto</span> <span class="n">toUType</span><span class="p">(</span><span class="n">E</span> <span class="n">enumerator</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">underlying_type_t</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">enumerator</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">email</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">toUType</span><span class="p">(</span><span class="n">UserInfoFields</span><span class="o">::</span><span class="n">uiEmail</span><span class="p">)</span><span class="o">&gt;</span><span class="p">(</span><span class="n">uInfo</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>有作用域限制的枚举（scoped enums，C++11）
<ul>
<li>减少名称污染
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">enum</span> <span class="nc">unscopedColor</span><span class="p">{</span><span class="n">black</span><span class="p">,</span> <span class="n">white</span><span class="p">};</span> 
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">black</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// 无作用域限制的枚举，因此枚举类型暴露在{}之外
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="k">class</span> <span class="nc">scopedColor</span> <span class="p">{</span><span class="n">red</span><span class="p">,</span> <span class="n">blue</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">red</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span> <span class="c1">// 有作用域限制的枚举，枚举类型限制在{}之内，因此减少名称污染
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>有强类型
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">enum</span> <span class="nc">unscopedColor</span><span class="p">{</span><span class="n">black</span><span class="p">,</span> <span class="n">white</span><span class="p">};</span> 
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">black</span><span class="p">;</span> <span class="c1">// 无作用域限制的枚举，可以发生隐式类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">enum</span> <span class="k">class</span> <span class="nc">scopedColor</span> <span class="p">{</span><span class="n">red</span><span class="p">,</span> <span class="n">blue</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="kt">double</span> <span class="n">d2</span> <span class="o">=</span>  <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">scopedColor</span><span class="o">::</span><span class="n">red</span><span class="p">);</span> <span class="c1">// 有作用域限制的枚举，不会发生隐式类型转换，类型转换需要显式说明
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>可以前向声明：只有在指定底层类型后，才能进行前向声明
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">enum</span> <span class="nc">unscopedColor</span><span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="kt">uint8_t</span><span class="p">;</span> <span class="c1">// 没有提供默认底层类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">enum</span> <span class="k">class</span><span class="err">; //默认底层类型为</span><span class="nc">int</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122914289">https://blog.csdn.net/Dong_HFUT/article/details/122914289</a></li>
</ul>
</li>
</ul>
<h1 id="11优先选用删除函数而非private未定义函数">11：优先选用删除函数，而非private未定义函数</h1>
<ul>
<li>背景：编译期会自动生成某些函数，但是有时不需要这些函数；</li>
<li>C++98的做法：声明为private的，且只声明不定义（effective C++中item6）
<ul>
<li>在private中声明但是不定义，使之在链接阶段因为没有定义而报错</li>
<li>在基类中声明为private的，会因为无法拷贝控制派生类中的基类部分，将报错从链接期提前到编译期</li>
</ul>
</li>
<li>C++11的做法：在声明中标记为<code>=delete</code>
<ul>
<li>将删除的函数声明为public的，原因是编译器先检查访问权限，再检查delete状态。如果将删除的函数声明为private的，调用删除的函数时，可能报错原因提示是private的；但是更期望的更明确的含义是这些函数是删除的</li>
<li><code>=delete</code>可以在任意函数中进行标记，不仅仅局限于成员函数</li>
</ul>
</li>
<li>应用：
<ul>
<li>比如可以阻止某些形参的隐式类型转换
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="kt">double</span><span class="p">)</span> <span class="o">=</span><span class="k">delete</span><span class="p">;</span> <span class="c1">// 因此禁止double和float两种参数的调用（C++总是倾向于将 float 转换为 double）
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>阻止某些模板类型的实例化
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">func</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;&gt;</span> <span class="kt">void</span> <span class="n">func</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span> <span class="o">=</span><span class="k">delete</span><span class="p">;</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">ptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;&gt;</span> <span class="kt">void</span> <span class="n">Widget</span><span class="o">::</span><span class="n">g</span><span class="o">&lt;</span><span class="kt">void</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">ptr</span><span class="p">)</span> <span class="o">=</span> <span class="k">delete</span><span class="p">;</span> <span class="c1">// 成员模板函数在类外阻止某些类型的实例化
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123005509">https://blog.csdn.net/Dong_HFUT/article/details/123005509</a></li>
</ul>
</li>
</ul>
<h1 id="12给意在改写的函数添加override声明">12：给意在改写的函数添加override声明</h1>
<ul>
<li>重写override需要满足的条件
<ul>
<li>基类的重写函数必须是虚函数</li>
<li>基类和派生类的重写函数
<ul>
<li>函数名（析构函数除外）、形参类型、函数常量性完全相同</li>
<li>函数引用限定符完全相同（C++11，函数引用限定符：该成员函数可以被左值对象还是右值对象调用）</li>
<li>返回值类型、异常规格说明兼容</li>
</ul>
</li>
</ul>
</li>
<li>将重写的函数标记为<code>override</code>，如果不满足重写条件则报错</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123008755">https://blog.csdn.net/Dong_HFUT/article/details/123008755</a></li>
</ul>
</li>
</ul>
<h1 id="13优先选用const_iterator而非iterator">13：优先选用<code>const_iterator</code>，而非<code>iterator</code></h1>
<ul>
<li>C++98在容器的成员函数中对<code>const_iterator</code>支持有限</li>
<li>C++11在容器的成员函数中支持<code>const_iterator</code>，但是只提供了非成员的begin和end
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="o">&gt;</span> <span class="c1">// C++11实现cbegin的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">auto</span> <span class="n">cbegin</span><span class="p">(</span><span class="k">const</span> <span class="n">Container</span><span class="o">&amp;</span> <span class="n">container</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">decltype</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">container</span><span class="p">)){</span> <span class="c1">// auto=const Container::iterator&amp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">container</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>C++14提供了非成员的cbegin和cend</li>
<li>尽量使用非成员的cbegin和cend，因为某些数据结构（比如数组）没有成员函数cbegin和cend，非成员的cbegin和cend更加通用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">C</span><span class="p">,</span> <span class="k">typename</span> <span class="n">V</span><span class="o">&gt;</span>  
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">findAndInsert</span><span class="p">(</span><span class="n">C</span><span class="o">&amp;</span> <span class="n">container</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span><span class="o">&amp;</span> <span class="n">targetVal</span><span class="p">,</span> <span class="k">const</span> <span class="n">V</span><span class="o">&amp;</span> <span class="n">insertVal</span><span class="p">)</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cbegin</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cend</span><span class="p">;</span>  
</span></span><span class="line"><span class="cl">    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find</span><span class="p">(</span><span class="n">cbegin</span><span class="p">(</span><span class="n">container</span><span class="p">),</span> <span class="n">cend</span><span class="p">(</span><span class="n">container</span><span class="p">),</span> <span class="n">targetVal</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl">    <span class="n">container</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">insertVal</span><span class="p">);</span>  
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123030976">https://blog.csdn.net/Dong_HFUT/article/details/123030976</a></li>
</ul>
</li>
</ul>
<h1 id="14只要函数不会抛出异常就为其加上noexcept声明">14：只要函数不会抛出异常，就为其加上<code>noexcept</code>声明</h1>
<blockquote>
<ul>
<li>noexcept 是函数接口的一部分，并且调用者可能会依赖这个接口。</li>
<li>相较于 non-noexcept 函数，noexcept 函数有被更好优化的机会。</li>
<li>noexcept 对于 move 操作、swap、内存释放函数和析构函数是非常有价值的。</li>
<li>大部分函数是异常中立的而不是 noexcept。</li>
</ul>
</blockquote>
<ul>
<li>背景：
<ul>
<li>C++98中异常规范的局限性：接口的实现一旦被修改，其异常规范可能也变化</li>
<li>因此C++11只需要指明接口是否可能抛出异常</li>
</ul>
</li>
<li>优点：一个<code>noexcept</code>函数有更多编译优化的机会
<ul>
<li>不需要保持运行栈为解开的状态</li>
<li>不需要保证对象以构造顺序的逆序完成析构</li>
</ul>
</li>
<li>应用：如果知道一个函数不会抛出异常，一定要加上<code>noexcept</code>
<ul>
<li><code>noexcept</code>属性对于移动操作、swap、内存释放函数和析构函数最有价值。C++11 STL 中的大部分函数遵循 “能移动则移动，必须复制才复制” 策略</li>
<li>默认<code>noexcept</code>函数：C++11内存释放函数和所有的析构函数都默认隐式地具备<code>noexcept</code>属性
<ul>
<li>析构函数未隐式地具备<code>noexcept</code>属性的唯一情况，就是所有类中有数据成员（包含递归的成员）的类型显式地将其析构函数声明为<code>noexcept(false)</code></li>
<li>如果标准库使用了某个对象，其析构函数抛出了异常，则该行为是未定义的。</li>
</ul>
</li>
</ul>
</li>
<li>条件<code>noexcept</code>：一个函数是否为<code>noexcept</code>，取决于<code>noexcept</code>中的表达式是否为<code>noexcept</code>
<ul>
<li>只有被调用的低层次的函数是<code>noexcept</code>，高层次的调用方才是<code>noexcept</code>的</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T1</span><span class="p">,</span> <span class="k">typename</span> <span class="n">T2</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">myPair</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">myPair</span><span class="o">&amp;</span> <span class="n">p</span><span class="p">)</span> <span class="k">noexcept</span><span class="p">(</span> <span class="k">noexcept</span><span class="p">(</span><span class="n">swap</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="k">noexcept</span><span class="p">(</span><span class="n">swap</span><span class="p">(</span><span class="n">second</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">))</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>异常中立函数：本身不抛出异常，但是调用的函数可能抛出异常，因此不适合标记为<code>noexcept</code>
<ul>
<li>但是允许<code>noexcept</code>函数中调用没有<code>noexcept</code>保证的函数</li>
</ul>
</li>
<li>通常只为宽松规约提供<code>noexcept</code>声明
<ul>
<li>宽松规约（wide contract，宽接口）：不带前提条件，被调用时不需要关注程序的状态，传入的参数方面没有限制，宽接口的函数永远不会出现未定义的行为</li>
<li>狭隘规约（narrow contract，窄接口）：带前提条件，如果违反前提条件，则结果是未定义的
<ul>
<li>调用者来保证调用时满足前提条件</li>
<li>如果调用时违反前提条件，则抛出异常；如果定义为<code>noexcept</code>的，违反前提条件结果是未定义的；相较而言，找出抛出异常的原因相对简单一些</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123163671">https://blog.csdn.net/Dong_HFUT/article/details/123163671</a></li>
</ul>
</li>
</ul>
<h1 id="15只要有可能使用constexpr就使用它">15：只要有可能使用<code>constexpr</code>，就使用它</h1>
<ul>
<li><code>constexpr</code>对象：具备const属性，并且在编译期（和链接期）可以确定其值
<ul>
<li>const对象不能保证在编译期确定其值</li>
</ul>
</li>
<li><code>constexpr</code>函数
<ul>
<li>含义：
<ul>
<li>如果所有传入 constexpr 函数的参数都能在编译时知道，则结果将在编译时计算出来。</li>
<li>如果传入 constexpr 函数的参数有任何一个不能在编译期知道，则结果在运行时计算出来</li>
</ul>
</li>
<li>使用
<ul>
<li>C++11中，<code>constexpr</code>函数有且只能有一条return语句；C++14无此限制</li>
<li>constexpr 函数被限制只能接受和返回 literal 类型（字面量，非指针和引用，自定义类型也可能是字面量类型的）</li>
<li>C++11中，如果成员函数修改了操作的对象，或者成员函数的返回值是void的，则该成员函数无法成为<code>constexpr</code>的；C++14无此限制</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Point</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">constexpr</span> <span class="n">Point</span><span class="p">(</span><span class="kt">double</span> <span class="n">xVal</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="kt">double</span> <span class="n">yVal</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="k">noexcept</span><span class="o">:</span> <span class="n">x</span><span class="p">(</span><span class="n">xVal</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">yVal</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="k">constexpr</span> <span class="kt">double</span> <span class="nf">getX</span><span class="p">()</span> <span class="k">const</span> <span class="k">noexcept</span> <span class="p">{</span><span class="k">return</span> <span class="n">x</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">        <span class="k">constexpr</span> <span class="kt">double</span> <span class="nf">getY</span><span class="p">()</span> <span class="k">const</span> <span class="k">noexcept</span> <span class="p">{</span><span class="k">return</span> <span class="n">y</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">        <span class="k">constexpr</span> <span class="kt">void</span> <span class="nf">setX</span><span class="p">(</span><span class="kt">double</span> <span class="n">newX</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span> <span class="n">x</span> <span class="o">=</span> <span class="n">newX</span><span class="p">;}</span> <span class="c1">// C++14中，移除了两条限制，因此可以设置为constexpr的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">constexpr</span> <span class="kt">void</span> <span class="nf">setY</span><span class="p">(</span><span class="kt">double</span> <span class="n">newY</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span> <span class="n">y</span> <span class="o">=</span> <span class="n">newY</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">double</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">constexprt</span> <span class="n">Point</span> <span class="nf">p1</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123172189">https://blog.csdn.net/Dong_HFUT/article/details/123172189</a></li>
</ul>
</li>
</ul>
<h1 id="16保证const成员函数的线程安全性">16：保证const成员函数的线程安全性</h1>
<ul>
<li>const成员的好处：不会修改成员变量，而且可以区分重载（const对象和非const对象调用）</li>
<li>保证const成员函数的线程安全性
<ul>
<li>使用<code>std::mutex</code>，进入临界区锁对象获取互斥量，出临界区析构锁（释放互斥量）</li>
<li>使用<code>std::atomic</code>，但是只能同步单一变量或者内存单元</li>
<li><code>std::mutex</code>和<code>std::atomic</code>都是move-only的</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123316263">https://blog.csdn.net/Dong_HFUT/article/details/123316263</a></li>
</ul>
</li>
</ul>
<h1 id="17理解特殊成员函数的生成机制">17：理解特殊成员函数的生成机制</h1>
<ul>
<li>特殊成员函数（special member function）：
<ul>
<li>一般是public、inline和novirtual的
<ul>
<li>例外：如果基类中的析构函数是virtual的，派生类中的析构函数也是virtual的</li>
</ul>
</li>
<li>拷贝构造和拷贝赋值是两个独立的操作</li>
<li>移动构造和移动赋值不是独立的操作，如果声明了其中一个，编译器会阻止生成另外一个</li>
<li>如果显式申明一个拷贝操作，则两个移动操作不会自动生成</li>
</ul>
</li>
<li>三法则（The Rule of Three）：如果声明了{拷贝构造函数、拷贝赋值操作、析构函数}中任意一个，则应该声明所有这三个函数，因为往往意味着类要管理某些资源
<ul>
<li>因此，如果只声明了一个析构函数，编译器应该不会自动生成拷贝操作</li>
<li>但实际上编译器还是可能自动生成拷贝操作（历史遗留原因，以及C++11为了兼容历史代码）</li>
<li>因此，只有当类中没有声明析构函数、拷贝操作、移动操作，而且需要时，编译器才会生成移动操作</li>
</ul>
</li>
<li>如果想让编译器自动生成相关函数（即使违背了这些限制），添加<code>=default</code>进行标记</li>
<li>C++11中对特殊成员函数的生成规则：
<ul>
<li>默认构造函数：同C++98</li>
<li>析构函数：本质同C++98，只是默认声明为<code>noexcept</code></li>
<li>拷贝构造函数：运行期行为同C++98（memberwise 拷贝构造 non-static 成员变量）
<ul>
<li>如果类中声明了一个移动操作，则拷贝构造函数和拷贝赋值运算符被标记为<code>=delete</code>的</li>
<li>如果类中自定义拷贝赋值运算符或析构函数，可以生成拷贝构造函数，但是已经成为被废弃的方法</li>
</ul>
</li>
<li>拷贝赋值运算符：规则同拷贝构造函数</li>
<li>移动构造函数和移动赋值运算符：仅当类中不包含用户声明的拷贝操作、移动操作和析构函数时才生成</li>
</ul>
</li>
<li>特殊情况：成员模板函数不会抑制特殊成员函数的自动生成
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">Widget</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">    <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl"><span class="p">};</span> <span class="c1">// 编译器仍然会生成copy和move操作，即使可以实例化得到
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/123433559">https://blog.csdn.net/Dong_HFUT/article/details/123433559</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch02 Auto</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch02-auto/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:20 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch02-auto/</guid>
      <description>05：优先选用auto，而非显式类型推断 优点一：避免变量未初始化 使用auto声明的变量未初始化，直接导致编译报错 优点二：简化变量声明（避免写</description>
      <content:encoded><![CDATA[<h1 id="05优先选用auto而非显式类型推断">05：优先选用auto，而非显式类型推断</h1>
<ul>
<li>优点一：避免变量未初始化
<ul>
<li>使用auto声明的变量未初始化，直接导致编译报错</li>
</ul>
</li>
<li>优点二：简化变量声明（避免写一长串类型名）</li>
<li>优点三：声明闭包类型（lambda表达式）
<ul>
<li>C++11中lambda式返回值可以使用auto，C++14中lambda式形参也可以使用auto</li>
<li><code>std::function</code>通常比起<code>auto</code>更大更慢，还可能导致内存消耗异常，因此实际使用时更推荐<code>auto</code>。
<ul>
<li>使用<code>auto</code>声明的、存储着一个闭包的变量和该闭包是同一类型，从而它要求的内存量也和该闭包相同</li>
<li>使用<code>std::function</code>声明的、存储着一个闭包的变量是<code>std::function</code>的一个实例，不管给定的签名如何，它都占有固定大小的内存，而这个大小对于其存储的闭包而言并不一定够用，如果是这样，那么<code>std::function</code>的构造函数就会分配堆上的内存来存储该闭包。</li>
</ul>
</li>
</ul>
</li>
<li>优点四：避免类型截断</li>
<li>优点五：避免类型不匹配
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">unordered_map</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">mp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span><span class="p">(</span><span class="k">auto</span><span class="o">&amp;</span> <span class="nl">item</span><span class="p">:</span> <span class="n">mp</span><span class="p">)</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// auto=std::pair&lt;const std::string,int&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 但是如果显式定义类型，很容易定义为std::pair&lt;std::string, int&gt;&amp;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="06当auto推导的类型不符合要求时使用带显式类型的初始化习惯用法">06：当auto推导的类型不符合要求时，使用带显式类型的初始化习惯用法</h1>
<blockquote>
<ul>
<li>隐式的代理类型可能导致auto类型推导结果不符合预期，因此应该显式声明类型</li>
</ul>
</blockquote>
<ul>
<li>代理类：模拟和拓展某些其他类型的行为，比如智能指针，比如<code>std::vector&lt;bool&gt;::reference</code>
<ul>
<li><code>std::vector&lt;bool&gt;</code>进行了特化，与一般<code>std::vector</code>不同：
<ul>
<li>一般对于<code>vector&lt;T&gt;</code>的<code>operator []</code>操作，返回类型为<code>T&amp;</code>；但是对于<code>vector&lt;bool&gt;</code>的<code>operator []</code>操作，返回类型为<code>vector&lt;bool&gt;::reference</code>（因此可能发生到<code>bool</code>的隐式类型转换），这是因为标准库无法返回对bit的引用</li>
<li><code>vector&lt;bool&gt;::reference</code>的实现中，可能有一个指向word的指针和一个对应的offset，很可能出现难以预料的错误
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">flg</span> <span class="o">=</span> <span class="n">func</span><span class="p">()[</span><span class="mi">0</span><span class="p">];</span> <span class="c1">// func()返回一个临时的右值对象，flg是vector&lt;bool&gt;::reference类型，然后临时的右值对象被析构
</span></span></span><span class="line"><span class="cl"><span class="c1">// 因为vector&lt;bool&gt;::reference类型中可能有一个指针，再使用flg可能出现未定义的行为
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>表达式模板中，计算结果可能被解析为一棵语法解析树，而非直接返回计算结果，因此实际得到的结果类型（语法解析树）可能并非期望的类型
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/441617539"># C++元编程之表达式模板优化数组计算</a></li>
</ul>
</li>
</ul>
</li>
<li>总之，对(隐形)代理类的auto类型推导往往得到的不是预期的类型，因此要么显式声明类型，要么使用<code>static_cast</code>强转然后进行auto类型推导</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Modern Cpp Notes] Ch01 类型推导</title>
      <link>https://qinganzhang.github.io/posts/effective-modern-cpp/ch01-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Thu, 01 Feb 2024 21:47:04 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-modern-cpp/ch01-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E5%AF%BC/</guid>
      <description>01：理解模板类型推导 在模板类型推导中，引用类型参数将被视为非引用类型处理，也就是说其引用性被忽略。 - 在万能引用参数类型推导时，左值参数被特</description>
      <content:encoded><![CDATA[<h1 id="01理解模板类型推导">01：理解模板类型推导</h1>
<blockquote>
<ul>
<li>在模板类型推导中，引用类型参数将被视为非引用类型处理，也就是说其引用性被忽略。
- 在万能引用参数类型推导时，左值参数被特殊处理。
- 值传递形参的类型推导时，其 <em>const</em> 和 <em>volatile</em> 被忽略。
- 在模板类型推导时，数组或者函数类型被转换为指针类型，除非它们用来初始化引用。</li>
</ul>
</blockquote>
<ul>
<li>背景：有时模板类型推导无法一下看出来T是什么类型
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">ParamType</span> <span class="n">param</span><span class="p">);</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">expr</span><span class="p">);</span> <span class="c1">// 比如实参可能是int, const int, const int&amp;
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>类型T的推导不仅取决于expr的类型，也取决于ParamType的形式</li>
</ul>
</li>
<li>情况一：ParamType是指针或引用，但不是万能引用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">param</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>情况二：ParamType是万能引用，因此可能发生引用折叠</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;&amp;</span> <span class="n">param</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>情况三：ParamType不是指针，也不是引用，因此视为值传递（实参的const/volatile性质被忽略，因为值进行了复制，形参副本不影响原来的实参）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span> <span class="n">param</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>特殊情况一：传入的实参为数组类型
<ul>
<li>如果模板是情况一：推导出T为数组类型（包含类型和元素数量）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">char</span> <span class="n">name</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&#34;zhang&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">name</span><span class="p">);</span> <span class="c1">// 推导出T=const char[6], f(const char(&amp;param)[6])
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>应用：比如可以在编译阶段计算数组元素个数：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">N</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">constexpr</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">arraySize</span><span class="p">(</span><span class="n">T</span> <span class="p">(</span><span class="o">&amp;</span><span class="p">)[</span><span class="n">N</span><span class="p">])</span> <span class="k">noexcept</span> <span class="p">{</span><span class="k">return</span> <span class="n">N</span><span class="p">;}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果模板是情况三：将数组名视为指针，因此T是指针类型</li>
</ul>
</li>
<li>特殊情况二：传入的实参为函数类型
<ul>
<li>如果模板是情况一：推导出T为函数引用类型</li>
<li>如果模板是情况三：推导出T为函数指针类型</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122727237">https://blog.csdn.net/Dong_HFUT/article/details/122727237</a></li>
</ul>
</li>
</ul>
<h1 id="02理解auto类型推导">02：理解auto类型推导</h1>
<blockquote>
<ul>
<li>一般情况下，auto类型推导和模板类型推导完全相同；但是auto类型推导会假定使用<code>{}</code>的列表初始化表达式是一个<code>std::initializer_list</code>，但是模板类型推导不会</li>
<li>在函数返回值或lambda式形参中使用auto，意思是使用模板类型推导而非使用auto类型推导</li>
</ul>
</blockquote>
<ul>
<li>背景：将一个变量赋值给auto类型变量，auto是什么类型</li>
<li>同[[ch01-类型推导#01：理解模板类型推导|01：理解模板类型推导]]中的总体原则：将实参赋值给形参
<ul>
<li>除了一个例外：使用<code>{}</code>进行列表初始化</li>
<li>auto类型推导：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span> <span class="c1">// auto=std::initializer_list&lt;int&gt;,首先推导为std::initializer_list&lt;T&gt;，然后再推断类型T=int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">auto</span> <span class="n">y</span><span class="p">{</span><span class="mi">2</span><span class="p">};</span> <span class="c1">// auto=int
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>模板类型推导：不能直接将<code>{}</code>的列表初始化表达式推导为<code>T=std::initializer_list&lt;type&gt;</code>，
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="n">T</span> <span class="n">param</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">});</span> <span class="c1">// 报错：直接传入{}列表初始化的实参，模板类型推导失败
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">g</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">initializer_list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">initList</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">});</span> <span class="c1">// T=int
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li><a href="https://stackoverflow.com/questions/17582667/why-do-auto-and-template-type-deduction-differ-for-braced-initializers">为什么两种行为不同的一个可能解释</a>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">func</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">});</span> 
</span></span><span class="line"><span class="cl"><span class="c1">// 左边推导出T=vector&lt;int&gt;, 右边如果推导出T=initializer_list&lt;int&gt;,则左右冲突
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>auto可以作为函数返回值类型、lambda式形参类型（C++14）
<ul>
<li>但是原理是模板类型推导，而非auto类型推导</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122740091">https://blog.csdn.net/Dong_HFUT/article/details/122740091</a></li>
</ul>
</li>
</ul>
<h1 id="03理解decltype">03：理解<code>decltype</code></h1>
<blockquote>
<ul>
<li>绝大多数情况下，decltype会得到变量或表达式的类型，而不进行修改</li>
<li>对于类型为T的左值表达式，除非该表达式只有一个名字，否则decltype总是返回T&amp;</li>
<li>C++14支持<code>decltype(auto)</code>：auto 表示类型需要推导，decltype 表示使用decltype规则进行推导</li>
</ul>
</blockquote>
<ul>
<li>背景：给定一个名字或表达式，<code>decltype</code>返回其类型：原来是值/左值/右值，返回值/左值/右值</li>
<li>体会auto类型推导和decltype类型推导的区别
<ul>
<li>auto类型推导：将变量<code>rhs</code>赋值给<code>lhs</code>，推导出<code>lhs</code>的类型</li>
<li>decltype类型推导：返回变量<code>rhs</code>的类型</li>
</ul>
</li>
<li>使用场景：
<ul>
<li>声明一个函数模板，其返回值类型取决于参数类型
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Index</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">getItem</span><span class="p">(</span><span class="n">Container</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">,</span> <span class="n">Index</span> <span class="n">i</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">decltpye</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span> <span class="k">return</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="p">}</span> <span class="c1">// 返回类型是引用T&amp;
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果返回值为auto，使用auto类型推导，返回类型将不是引用
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Index</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="k">auto</span> <span class="n">getItem</span><span class="p">(</span><span class="n">Container</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">,</span> <span class="n">Index</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="p">}</span> <span class="c1">// 返回类型是T
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>可以同时使用auto和<code>deltype</code>：auto 表示类型需要推导，decltype 表示使用decltype规则进行推导
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Index</span><span class="o">&gt;</span> 
</span></span><span class="line"><span class="cl"><span class="k">decltype</span><span class="p">(</span><span class="k">auto</span><span class="p">)</span> <span class="n">getItem</span><span class="p">(</span><span class="n">Container</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">,</span> <span class="n">Index</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="p">}</span> <span class="c1">// 返回类型是引用T&amp;
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>优化与完善：为了传入右值的<code>Container</code>，使用万能引用，同时使用完美转发
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">Container</span><span class="p">,</span> <span class="k">typename</span> <span class="n">Index</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">decltype</span><span class="p">(</span><span class="k">auto</span><span class="p">)</span> <span class="n">getItem</span><span class="p">(</span><span class="n">Container</span><span class="o">&amp;&amp;</span> <span class="n">c</span><span class="p">,</span> <span class="n">Index</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">Container</span><span class="o">&gt;</span><span class="p">(</span><span class="n">c</span><span class="p">)[</span><span class="n">i</span><span class="p">];</span> <span class="p">}</span> <span class="c1">// C++14，或者C++11使用尾置返回类型
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>一般而言decltype返回的类型都比较直观，除了一种情况：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// decltype(x)=int
</span></span></span><span class="line"><span class="cl"><span class="c1">// decltype((x))=int&amp;
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://blog.csdn.net/Dong_HFUT/article/details/122745518">https://blog.csdn.net/Dong_HFUT/article/details/122745518</a></li>
<li><a href="https://zyfforlinux.blog.csdn.net/article/details/52658452">https://zyfforlinux.blog.csdn.net/article/details/52658452</a></li>
</ul>
</li>
</ul>
<h1 id="04掌握查看类型推导结果的方法">04：掌握查看类型推导结果的方法</h1>
<ul>
<li>在代码编辑阶段查看类型推导结果：IDE</li>
<li>在代码编译阶段查看类型推导结果：查看编译报错</li>
<li>在代码运行阶段查看类型推导结果：
<ul>
<li><code>typeid</code>：不同编译期实现不同，无法保证完全可靠，而且类型的引用、const、volatile等性质被忽略</li>
<li>Boost库的模板函数<code>boost::typeindex::type_id_with_cvr</code>
<ul>
<li>如果类型不包含引用、const、volatile等性质，则<code>type_id_with_cvr</code>与<code>typeid</code>返回相同</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;boost/type_index.hpp&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">f</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">param</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">typeindex</span><span class="o">::</span><span class="n">type_id_with_cvr</span><span class="p">;</span> <span class="c1">// c:const, v:volatile, r:reference
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">type_id_with_cvr</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">().</span><span class="n">pretty_name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">type_id_with_cvr</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">&gt;</span><span class="p">().</span><span class="n">pretty_name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch08 定制new和delete</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch08-%E5%AE%9A%E5%88%B6new%E5%92%8Cdelete/</link>
      <pubDate>Thu, 01 Feb 2024 21:14:41 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch08-%E5%AE%9A%E5%88%B6new%E5%92%8Cdelete/</guid>
      <description>49：了解new-handler的行为 new申请内存失败会抛出bad alloc的异常，此前会调用一个错误处理函数，此函数由std::set_</description>
      <content:encoded><![CDATA[<h1 id="49了解new-handler的行为">49：了解new-handler的行为</h1>
<ul>
<li><code>new</code>申请内存失败会抛出<code>bad alloc</code>的异常，此前会调用一个错误处理函数，此函数由<code>std::set_new_handler()</code>指定
<ul>
<li><code>set::set_new_handler()</code>
<ul>
<li>接受一个错误处理函数，返回旧的错误处理函数</li>
<li><code>throw</code>表示可能抛出的异常类型，参数为空表示不抛出任何异常</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">typedef</span> <span class="nf">void</span> <span class="p">(</span><span class="o">*</span><span class="n">new_handler</span><span class="p">)();</span> <span class="c1">// 无形参，返回值为void的函数指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">new_handler</span> <span class="nf">set_new_handler</span><span class="p">(</span><span class="n">new_handler</span> <span class="n">f</span><span class="p">)</span> <span class="k">throw</span><span class="p">();</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>当new申请不到足够的内存时，会不断调用错误处理函数f，因此错误处理函数应该进行下面的处理之一：
<ul>
<li>提供更多可用的内存</li>
<li>向<code>set_new_handler</code>中传入一个新的错误处理函数</li>
<li><code>set_new_handler</code>函数中传入一个空指针，因此内存分配失败时不进行处理，直接抛出异常</li>
<li>抛出<code>bad_alloc</code>的异常</li>
<li>不返回：调用<code>std::abort</code>或<code>std::exit</code>
<ul>
<li><code>abort</code>会设置程序非正常退出</li>
<li><code>exit</code>会设置程序正常退出，当存在未处理异常时，会调用<code>terminate</code>，内部回调<code>set::set_terminate</code>设置的回调函数，默认会调用<code>abort</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>类型相关错误处理
<ul>
<li>为不同的类分配对象时，使用不同的错误处理函数</li>
<li>重载<code>set_new_handler</code>和<code>operator new</code>，重载为static成员</li>
<li>可以写成模板
<ul>
<li>此处的模板参数<code>T</code>并没有真正被当成类型使用，而仅仅是用来区分不同的派生类，使得模板机制为每个派生类具现化出一份对应的<code>currentHandler</code></li>
<li>这个做法用到了所谓的 CRTP（curious recurring template pattern，奇异递归模板模式），也常被用于静态多态</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">NewHandlerSupport</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">set_new_handler</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">p</span><span class="p">)</span> <span class="k">noexcept</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">~</span><span class="n">NewHandlerSupport</span><span class="p">()</span> <span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">set_new_handler</span><span class="p">(</span><span class="n">currentHandler</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">NewHandlerSupport</span><span class="p">(</span><span class="k">const</span> <span class="n">NewHandlerSupport</span><span class="o">&amp;</span><span class="p">);</span> <span class="c1">// 阻止拷贝构造
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">NewHandlerSupport</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">NewHandlerSupport</span><span class="o">&amp;</span><span class="p">);</span> <span class="c1">// 阻止拷贝复制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">currentHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">NewHandlerSupport</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">currentHandler</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">NewHandlerSupport</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">set_new_handler</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">p</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">new_handler</span> <span class="n">oldHandler</span> <span class="o">=</span> <span class="n">currentHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">currentHandler</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">oldHandler</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="n">NewHandlerSupport</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">NewHandlerSupport</span> <span class="nf">h</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">set_new_handler</span><span class="p">(</span><span class="n">currentHandler</span><span class="p">));</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// 返回的函数指针初始化了一个对象h，在退出函数时，执行h的析构过程，即将原来的handle恢复
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Widget</span><span class="o">:</span> <span class="k">public</span> <span class="n">NewHandlerSupport</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&gt;</span><span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>new分配失败后，可能不会抛出异常，而是返回null，这种称为<code>nothrow new</code>
<ul>
<li>例子：<code>new (std::nothrow) int[10];</code></li>
<li><code>nothrow new</code>只能保证内存分配错误时不抛出异常，无法保证对象的构造函数不抛出异常</li>
</ul>
</li>
</ul>
<h1 id="50-了解new和delete的合理替换时机">50： 了解new和delete的合理替换时机</h1>
<ul>
<li>为什么需要自定义<code>operator new</code>
<ul>
<li>检测使用错误：检测多次delete，检测越界</li>
<li>提高效率：手动维护更适合应用场景的存储策略
<ul>
<li>比如针对特定类型，增加分配和归还的速度</li>
<li>比如将相关对象集成到簇中（即尽量分配到一个内存页上）</li>
</ul>
</li>
<li>收集使用的统计信息</li>
<li>其他原因：比如安全性（将申请到的内存初始化为0），字节对齐等</li>
</ul>
</li>
</ul>
<h1 id="51-编写new和delete时需固守常规">51： 编写new和delete时需固守常规</h1>
<ul>
<li>
<p><code>operator new</code>需要无限循环地获取资源，如果没能获取则调用&quot;new handler&quot;，不存在&quot;new handler&quot;时应该抛出异常；</p>
</li>
<li>
<p><code>operator new</code>应该处理<code>size == 0</code>的情况；</p>
</li>
<li>
<p><code>operator delete</code>应该兼容空指针；</p>
</li>
<li>
<p><code>operator new/delete</code>作为成员函数应该处理<code>size &gt; sizeof(Base)</code>的情况（因为继承的存在）。</p>
</li>
<li>
<p>外部（非成员函数的）<code>operator new</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="k">throw</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// size=0时，返回合法的指针就说明成功分配了内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">while</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// 申请失败，获得new handler，多线程需要加锁
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">new_handler</span> <span class="n">h</span> <span class="o">=</span> <span class="n">set_new_handler</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">set_new_handler</span><span class="p">(</span><span class="n">h</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// auto h = get_new_handler(); // C++11方式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span><span class="p">(</span><span class="n">h</span><span class="p">)</span> <span class="p">(</span><span class="o">*</span><span class="n">h</span><span class="p">)();</span> <span class="c1">// new-handler应该实现item49中描述的五种行为之一，否则，此处陷入死循环
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">else</span> <span class="k">throw</span> <span class="n">bad_alloc</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>成员<code>operator new</code></p>
<ul>
<li>如果<code>operator new</code>是针对基类的，也就是说<code>operator new</code>是针对大小为<code>sizeof(Base)</code>的内存进行优化的</li>
<li>一般来说派生类不应该使用基类的<code>operator new</code>，因为派生类对象大小与基类对象大小一般不同</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Base</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="n">Base</span><span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">size</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span> <span class="c1">// sizeof(Base)永远不会为0（至少为1），因为空对象至少会插入一个char
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">);</span> <span class="c1">// 使用全局的operator new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>operator new[]</code>与<code>operator new</code>有相同的参数和返回值，只需要分配一块原始内存</li>
</ul>
</li>
<li>
<p><code>delete</code></p>
<ul>
<li>delete</li>
<li>惯例：delete一个空指针是安全的</li>
</ul>
</li>
<li>
<p>外部<code>operator delete</code></p>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">rawMemory</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">rawMemory</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 释放 rawMemory 所指的内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>成员<code>operator delete</code>
<ul>
<li>如果基类的析构函数不是虚函数，则size大小为静态类型的大小；
<ul>
<li>比如<code>Base* p = new Derived; delete p;</code>中，很可能派生类大小大于基类大小，因此存在内存泄露</li>
</ul>
</li>
<li>否则size为动态类型的大小</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">Base</span><span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">rawMemory</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="k">noexcept</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">rawMemory</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">size</span> <span class="o">!=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">Base</span><span class="p">))</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">rawMemory</span><span class="p">);</span>    <span class="c1">// 转交给标准的 operator delete 进行处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 释放 rawMemory 所指的内存
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="52-写了placement-new也要写palcement-delete">52： 写了<code>placement new</code>也要写`palcement delete</h1>
<ul>
<li><code>placement new</code>：广义上指拥有额外参数的<code>operator new</code></li>
<li>背景：
<ul>
<li>在使用new创建对象时，往往进行了两个函数的调用：一个是<code>operator new</code>，进行内存分配；一个是对象的构造函数</li>
<li>如果构造失败，此时对象没有被创建，对象无法被析构，且此时还没有拿到分配内存的地址</li>
<li>因此需要运行时系统进行delete，运行时系统需要知道使用的是哪一种<code>operator new</code>，因此调用对应的<code>operator delete</code>
<ul>
<li>如果没有对应的<code>operator delete</code>函数，则运行时系统什么都不做，导致内存泄露</li>
</ul>
</li>
</ul>
</li>
<li>当定义了<code>placement new</code>时，同时也要定义对应的<code>placement delete</code>
<ul>
<li>用户直接调用<code>delete</code>时，运行时系统不会将其解释为<code>placement delete</code>，因此还需要定义一个正常的delete</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">log</span><span class="p">)</span> <span class="k">throw</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">mem</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">log</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">mem</span><span class="p">)</span> <span class="k">throw</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>名称隐藏：类中的名称会隐藏类外的名称，子类的名称会隐藏父类的名称
<ul>
<li>三种全局new
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">void</span><span class="o">*</span> <span class="nf">operator</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">)</span> <span class="k">throw</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">);</span>           <span class="c1">// normal new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span><span class="o">*</span> <span class="nf">operator</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span> <span class="k">noexcept</span><span class="p">;</span>                 <span class="c1">// placement new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">void</span><span class="o">*</span> <span class="nf">operator</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">nothrow_t</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">noexcept</span><span class="p">;</span> <span class="c1">// nothrow new
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
<li>最佳实践：
<ul>
<li>将全局版本new在一个基类中进行重载，内部调用全局new进行实现</li>
<li>然后在自定义类Widget中，public继承，并使用using声明使得三种new和三种delete对Widget可见，因此同时Widget可以定义自己版本的<code>placement new</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">StandardNewDeleteForms</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// normal new/delete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="k">throw</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pMemory</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">pMemory</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// placement new/delete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">ptr</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pMemory</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">pMemory</span><span class="p">,</span> <span class="n">ptr</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// nothrow new/delete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">nothrow_t</span><span class="o">&amp;</span> <span class="n">nt</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="n">nt</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pMemory</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">nothrow_t</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">throw</span><span class="p">()</span> <span class="p">{</span> <span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">pMemory</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="o">:</span> <span class="k">public</span> <span class="n">StandardNewDeleteForms</span> <span class="p">{</span>           
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">   <span class="k">using</span> <span class="n">StandardNewDeleteForms</span><span class="o">::</span><span class="k">operator</span> <span class="k">new</span><span class="p">;</span>         
</span></span><span class="line"><span class="cl">   <span class="k">using</span> <span class="n">StandardNewDeleteForms</span><span class="o">::</span><span class="k">operator</span> <span class="k">delete</span><span class="p">;</span>     
</span></span><span class="line"><span class="cl">   <span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="nf">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">log</span><span class="p">)</span> <span class="k">throw</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">);</span>   <span class="c1">// 自定义 placement new
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>   <span class="k">static</span> <span class="kt">void</span> <span class="k">operator</span> <span class="nf">delete</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">pMemory</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">logStream</span><span class="p">)</span> <span class="k">throw</span><span class="p">();</span>            <span class="c1">// 对应的 placement delete
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch07 模板与泛型编程</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch07-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Thu, 01 Feb 2024 21:14:25 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch07-%E6%A8%A1%E6%9D%BF%E4%B8%8E%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</guid>
      <description>41： 了解隐式接口与编译期多态 面向对象中的类设计时需要考虑显式接口和运行时多态，而模板编程中需要考虑隐式接口和编译器多态 如果函数的形参是普通</description>
      <content:encoded><![CDATA[<h1 id="41-了解隐式接口与编译期多态">41： 了解隐式接口与编译期多态</h1>
<blockquote>
<p>面向对象中的类设计时需要考虑显式接口和运行时多态，而模板编程中需要考虑隐式接口和编译器多态</p>
</blockquote>
<ul>
<li>如果函数的形参是普通类：
<ul>
<li>普通类的显式接口由函数签名（函数名、形参类型、返回值类型）表征，运行时多态由虚函数实现</li>
<li>在函数进行编译时，就可以知道该普通类有哪些接口</li>
</ul>
</li>
<li>如果函数的形参是模板类型：
<ul>
<li>模板类型的隐式接口由表达式的合法性表征（即该模板类型应该支持函数中形参调用的方法），编译器多态由模板初始化和重载函数的解析实现</li>
<li>在函数进行编译时，无法知道模板类型有哪些接口，因此视为鸭子类型（即传入对象支持函数中调用的方法即可）
<ul>
<li>在编译函数时当然无法确定模板类型，但是当传入实参后，内部如果调用了实参未定义的函数，同样会在编译期报错而非运行期</li>
</ul>
</li>
</ul>
</li>
<li>参考：
<ul>
<li><a href="https://www.zhihu.com/question/423699453">https://www.zhihu.com/question/423699453</a></li>
</ul>
</li>
</ul>
<h1 id="42-了解typename的双重意义">42： 了解<code>typename</code>的双重意义</h1>
<ul>
<li>在模板声明中，使用<code>class</code>与<code>typename</code>完全相同</li>
<li>在模板内部，<code>typename</code>还可以用来显式指明【嵌套从属类型名称】
<ul>
<li>背景：比如编译器无法在模板内部判断<code>T::mem</code>是一个static成员（默认），还是一个类型</li>
<li>嵌套从属类型名称：<code>T::mem</code>是一个依赖于模板参数<code>T</code>的类型</li>
<li>例子：模板内部<code>typename T::age myAge = 25;</code></li>
<li><code>typename</code>还可以用来显式指明【嵌套从属类型名称】，可以出现在模板内部、函数形参列表，但是不可以出现在【类派生列表】和【构造函数中成员初始化列表】中
<ul>
<li>当类型名称过于复杂时，可以使用类型别名</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://harttle.land/2015/09/09/effective-cpp-42.html">https://harttle.land/2015/09/09/effective-cpp-42.html</a></li>
</ul>
</li>
</ul>
<h1 id="43-使用模板化基类中的成员函数">43： 使用模板化基类中的成员函数</h1>
<ul>
<li>背景：如果基类是一个模板类，派生类进行继承
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Buff</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">RedBuff</span><span class="o">:</span> <span class="k">public</span> <span class="n">Buff</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">BlueBuff</span><span class="o">:</span> <span class="k">public</span> <span class="n">Buff</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>  <span class="c1">// 基类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Container</span> <span class="p">{</span> <span class="cm">/* 假设有成员函数func() */</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//template &lt;&gt; // 全特化基类
</span></span></span><span class="line"><span class="cl"><span class="c1">//class Container&lt;Buff*&gt; { /* 假设没有成员函数func() */ };
</span></span></span><span class="line"><span class="cl"><span class="c1">// template &lt;typename T=Buff*&gt; // 使用默认模板实参，同全特化基类
</span></span></span><span class="line"><span class="cl"><span class="c1">// class Container&lt;T&gt; { /* 假设没有成员函数func() */ }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PlayerContainer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="c1">// 派生类继承模板化基类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span> <span class="n">func</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// 这里编译报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>对于模板化基类，可能有特化版本，且其中可能有不同的接口</li>
<li>对于派生类而言，也无法确定类型T，因此C++规定派生类不在模板化基类中查找继承而来的接口</li>
</ul>
</li>
<li>解决方法：向编译器承诺所有的特化版本都遵循模板化基类的接口（或者说使用非特化版本的模板化基类中的接口）
<ul>
<li>使用<code>this</code>显式指出访问基类的成员函数
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PlayerContainer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="c1">// 派生类继承模板化基类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="o">-&gt;</span><span class="n">func</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// this指针可以访问所有成员函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>使用<code>using</code>声明
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PlayerContainer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="c1">// 派生类继承模板化基类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">using</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">func</span><span class="p">;</span> <span class="c1">// 告诉编译器，func在模板化基类中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="kt">void</span> <span class="nf">test</span><span class="p">()</span> <span class="p">{</span> <span class="n">func</span><span class="p">();</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>使用作用域运算符<code>::</code>明确指出，不推荐使用，因为如果func是虚函数，使用这种方法不会产生多态
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">PlayerContainer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span> <span class="c1">// 派生类继承模板化基类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="kt">void</span> <span class="n">test</span><span class="p">()</span> <span class="p">{</span> <span class="n">Container</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">func</span><span class="p">();</span> <span class="p">}</span> <span class="c1">// 明确指出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h1 id="44-将与参数无关的代码抽离模板">44： 将与参数无关的代码抽离模板</h1>
<ul>
<li>背景：代码膨胀
<ul>
<li>模板提供的是编译期多态，不同的类型参数会生成不同的模板</li>
<li>比如一个模板类接受一个类型参数T与一个非类型参数N，大部分成员都使用类型参数T，只有极少部分成员使用非类型参数N</li>
<li>如果使用相同的类型type、但是不同的非类型参数n进行实例化，生成的代码中大部分都相同，只有极少部分不同</li>
</ul>
</li>
<li>抽取公共代码：
<ul>
<li>模板中生成的冗余代码是隐式的，因为模板只有一份，生成不同实例后才可能产生冗余</li>
<li>比如可以将与参数无关的代码（成员函数，数据成员）放入基类中，然后private继承</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://harttle.land/2015/09/12/effective-cpp-44.html">https://harttle.land/2015/09/12/effective-cpp-44.html</a></li>
</ul>
</li>
</ul>
<h1 id="45-运用成员函数模板接受所有兼容类型">45： 运用成员函数模板接受所有兼容类型</h1>
<ul>
<li>背景：假如类型参数T存在继承关系，但是模板实例化后是完全不同的两个类
<ul>
<li>比如有一个继承体系，基类Base，派生类Derived</li>
<li>指向派生类的指针可以转换为指向基类的指针：<code>Base* p = new Derived();</code></li>
<li>但是指向派生类的智能指针无法转换为指向基类的智能指针： <code>shared_ptr&lt;Base*&gt; sp = make_shared&lt;Derived*&gt;(new Derived());</code></li>
</ul>
</li>
<li>重载构造函数
<ul>
<li>接受同一模板的其他实例的构造函数称为通用构造函数</li>
<li>兼容类型检查：将<code>MySmartPtr&lt;U&gt;</code>转换为<code>MySmartPtr&lt;T&gt;</code>，前提是类型U可以转换为类型T</li>
<li>如果没有声明拷贝构造函数，编译器会自己生成一个，而非使用通用构造函数去进行成员模板实例化</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MySmartPtr</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">MyShartPtr</span><span class="p">(</span><span class="n">T</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span><span class="o">:</span> <span class="n">ptr</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">        <span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="n">MySmartPtr</span><span class="p">(</span><span class="k">const</span> <span class="n">MySmartPtr</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;&amp;</span> <span class="n">other</span><span class="p">)</span><span class="o">:</span> <span class="n">ptr</span><span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">get</span><span class="p">())</span> <span class="p">{};</span> <span class="c1">// 带类型兼容检查的通用构造函数，可以实现隐式类型转换（因为不带explicit）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">T</span><span class="o">*</span> <span class="nf">get</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span><span class="k">return</span> <span class="n">ptr</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">T</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>    
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">MySmartPtr</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">*&gt;</span> <span class="n">dp</span><span class="p">(</span><span class="k">new</span> <span class="n">Derived</span><span class="p">());</span> <span class="c1">// 隐式类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MySmartPtr</span><span class="o">&lt;</span><span class="n">Base</span><span class="o">*&gt;</span> <span class="n">bp</span> <span class="o">=</span> <span class="n">MySmartPtr</span><span class="o">&lt;</span><span class="n">Derived</span><span class="o">*&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">Derived</span><span class="p">());</span> <span class="c1">// T=Base*, U=Derived*
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://harttle.land/2015/09/13/effective-cpp-45.html">https://harttle.land/2015/09/13/effective-cpp-45.html</a></li>
</ul>
</li>
</ul>
<h1 id="46需要类型转换时请将模板定义为非成员函数">46：需要类型转换时请将模板定义为非成员函数</h1>
<ul>
<li>背景：
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Rational</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Rational</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">oneHalf</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">Rational</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">oneHalf</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span> <span class="c1">// Error
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>模板函数的调用过程：
<ul>
<li>首先推导出类型T，将函数进行实例化：此时无法从2推导得出类型T</li>
<li>在调用时，有的参数可能需要隐式类型转换</li>
</ul>
</li>
<li>解决方法：将模板函数定义为类的友元，因此类模板实例化后类型T已知
<ul>
<li>如果仅仅是声明，编译器不会对友元函数进行实例化，因此需要进行定义</li>
<li>定义在类内部的函数是inline的，可以在类外部定义一个辅助函数（也是模板函数，但是不需要隐式类型转换）</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">class</span> <span class="nc">Rational</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">func</span><span class="p">(</span><span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Rational</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">friend</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="k">operator</span><span class="o">*</span><span class="p">(</span><span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">Rational</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">rhs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="n">func</span><span class="p">(</span><span class="n">lhs</span><span class="p">,</span> <span class="n">rhs</span><span class="p">);</span> <span class="c1">// 可以推导出类型T，而且不需要进行隐式类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="47-请使用traits-classes表现类型信息">47： 请使用traits classes表现类型信息</h1>
<blockquote>
<ul>
<li>使用Traits的特点：
<ul>
<li>可以同时支持自定义类型和基础类型</li>
<li>在编译期就获取信息</li>
</ul>
</li>
</ul>
</blockquote>
<p>C++中的Traits类可以在编译期提供类型信息，是通过Traits模板及其特化来实现的
C++标准库中提供了不同的Traits：<code>iterator_traits</code>,<code>char_traits</code>,<code>numeric_limits</code>等（以<code>iterator_traits</code>为例）</p>
<ul>
<li>背景：容器与算法通过迭代器联系在一起，算法中可能需要知道迭代器的类型、迭代器中元素的类型，由此有不同的处理方法
<ul>
<li>比如算法<code>advance</code>可以让一个迭代器移动n步（负数则反向移动）
<ul>
<li>迭代器有五种：其中随机访问迭代器可以直接使用<code>+=</code>操作
<ul>
<li>C++提供了五个类标识迭代器类型：<code>input_iterator_tag</code>，<code>output_iterator_tag</code>，<code>forward_iterator_tag</code>，<code>bidirectional_iterator_tag</code>，<code>random_access_iterator_tag</code></li>
</ul>
</li>
<li>传入的参数也可能是基本类型的指针</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">advance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断迭代器类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">iter</span> <span class="n">is</span> <span class="n">random</span> <span class="n">access</span> <span class="n">iterator</span><span class="p">)</span> <span class="n">iter</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> <span class="p">...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 判断迭代器中元素类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span><span class="p">(</span><span class="n">iter</span><span class="p">.</span><span class="n">value_type</span> <span class="n">is</span> <span class="n">MyVector</span><span class="p">)</span> <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;MyVector&#34;</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>分析：
<ul>
<li>如果<code>IterT</code>是类类型，因此可以在类中携带数据成员，表示迭代器类型和元素类型</li>
<li>但是<code>IterT</code>也可能是基本类型的指针类型，无法在其中携带信息</li>
</ul>
</li>
<li>Traits技法：使用Traits可以通过一个模板类间接获取<code>IterT</code>的相关信息
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">my_iterator_traits</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>Traits是C++中一种编程惯例，允许在编译期得到类型的信息
<ul>
<li>traits是一个用来携带信息的很小的类，需要实现两个部分：
<ul>
<li>traits中的类型可能是用户自定义的类型，
<ul>
<li>自定义类型中需要实现相应的迭代器，对具体的类型信息起一个通用的别名</li>
<li>traits中包装相应的信息</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyVector</span><span class="p">{</span> <span class="c1">// 自定义类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">class</span> <span class="nc">iterator</span><span class="p">{</span> <span class="c1">// 自定义类中的迭代器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="n">my_random_access_iterator_tag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// iterator_traits可以获取迭代器（或指针类型）的元素类型和迭代器类型（指针类型视为随机访问迭代器）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">iterator_traits</span><span class="p">{</span> <span class="c1">// IterT是类类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="k">typename</span> <span class="n">IterT</span><span class="o">::</span><span class="n">iterator_category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="k">typename</span> <span class="n">IterT</span><span class="o">::</span><span class="n">value_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>traits中的类型可能是基本数据类型，遵循相同的名称，包装一下相应的信息
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">*&gt;</span><span class="p">{</span> <span class="c1">// 特化版本：IterT是基本类型，IterT是基本类型的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="n">my_random_access_iterator_tag</span><span class="p">;</span> <span class="c1">// 指针可以使用+=操作，因此视为随机访问迭代器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">IterT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
<li>使用
<ul>
<li>不好的写法：使用<code>typeid</code>在运行时判断类型
<ul>
<li>但是IterT类型在编译期就可以确定，对象iter的类型需要在运行时确定</li>
<li>更严重的问题：静态类型检查（编译期必须确保所有源码都有效，即使是不会执行的源码） ^826df6
<ul>
<li>比如即使迭代器不是<code>my_random_access_iterator_tag</code>类型，编译期也会进入if语句测试该迭代器是否支持+=运算，不支持的话编译报错</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">advance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span> <span class="k">typeid</span><span class="p">(</span><span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">iterator_category</span><span class="p">)</span> <span class="o">==</span> <span class="k">typeid</span><span class="p">(</span><span class="n">my_random_access_iterator_tag</span><span class="p">)</span> <span class="p">)</span> 
</span></span><span class="line"><span class="cl">        <span class="n">iter</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>推荐实现方法：根据不同的类型创建不同的重载方法（worker），然后在一个master函数中调用，依据traits类型进行重载调用</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">advance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将IterT中迭代器类型和元素类型萃取出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">typeid</span><span class="p">(</span><span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">iterator_category</span><span class="p">).</span><span class="n">name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">typeid</span><span class="p">(</span><span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">value_type</span><span class="p">).</span><span class="n">name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 错误使用：如果iter是指针类型，则IterT为基本类型，无iterator_category属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// std::cout&lt;&lt;typeid(IterT::iterator_category).name()&lt;&lt;std::endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">doAdvance</span><span class="p">(</span><span class="n">iter</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">iterator_category</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 最后默认初始化一个iterator_category的对象，进行重载匹配，调用对应的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 随机访问迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">my_random_access_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 前向迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">my_forward_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="s">&#34;d must be not less then 0&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">d</span><span class="o">--</span><span class="p">)</span> <span class="o">++</span><span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>测试代码</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;memory&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;list&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="c1">// using namespace std;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">my_random_access_iterator_tag</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// my_random_access_iterator_tag() { std::cout&lt;&lt;&#34;my_random_access_iterator_tag ctor&#34;&lt;&lt;std::endl; }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">my_forward_iterator_tag</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// my_forward_iterator_tag() {std::cout&lt;&lt;&#34;my_forward_iterator_tag&#34;&lt;&lt;std::endl;}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyVector</span><span class="p">{</span> <span class="c1">// 自定义类
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">class</span> <span class="nc">iterator</span><span class="p">{</span> <span class="c1">// 自定义类中的迭代器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">T</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="n">my_random_access_iterator_tag</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// iterator_traits可以获取迭代器（或指针类型）的元素类型和迭代器类型（指针类型视为随机访问迭代器）
</span></span></span><span class="line"><span class="cl"><span class="c1">// 输入：使用类类型的迭代器或指针类型进行实例化
</span></span></span><span class="line"><span class="cl"><span class="c1">// 输出：萃取出元素类型和迭代器类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">my_iterator_traits</span><span class="p">{</span> <span class="c1">// IterT是类类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="k">typename</span> <span class="n">IterT</span><span class="o">::</span><span class="n">iterator_category</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="k">typename</span> <span class="n">IterT</span><span class="o">::</span><span class="n">value_type</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="k">struct</span> <span class="nc">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">*&gt;</span><span class="p">{</span> <span class="c1">// 特化版本：IterT是基本类型，IterT是基本类型的指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">iterator_category</span> <span class="o">=</span> <span class="n">my_random_access_iterator_tag</span><span class="p">;</span> <span class="c1">// 指针可以使用+=操作，因此视为随机访问迭代器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">using</span> <span class="n">value_type</span> <span class="o">=</span> <span class="n">IterT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// std双向迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bidirectional_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">d</span><span class="o">--</span><span class="p">)</span> <span class="o">++</span><span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span> 
</span></span><span class="line"><span class="cl">        <span class="nf">while</span><span class="p">(</span><span class="o">++</span><span class="n">d</span><span class="p">)</span> <span class="o">--</span><span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// std随机访问迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">random_access_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 自定义随机访问迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">my_random_access_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">iter</span> <span class="o">+=</span> <span class="n">d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 自定义前向迭代器版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">doAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">,</span> <span class="n">my_forward_iterator_tag</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">assert</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="s">&#34;d must be not less then 0&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">d</span><span class="o">--</span><span class="p">)</span> <span class="o">++</span><span class="n">iter</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">IterT</span><span class="p">,</span> <span class="k">typename</span> <span class="n">DistT</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="n">myAdvance</span><span class="p">(</span><span class="n">IterT</span><span class="o">&amp;</span> <span class="n">iter</span><span class="p">,</span> <span class="n">DistT</span> <span class="n">d</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 将IterT中迭代器类型和元素类型萃取出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">typeid</span><span class="p">(</span><span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">iterator_category</span><span class="p">).</span><span class="n">name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="k">typeid</span><span class="p">(</span><span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">value_type</span><span class="p">).</span><span class="n">name</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// 错误使用：如果iter是指针类型，则IterT为基本类型，无iterator_category属性
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// std::cout&lt;&lt;typeid(IterT::iterator_category).name()&lt;&lt;std::endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// std::cout&lt;&lt; (typeid(typename my_iterator_traits&lt;IterT&gt;::iterator_category) == typeid(std::bidirectional_iterator_tag)) &lt;&lt;std::endl;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    
</span></span><span class="line"><span class="cl">    <span class="c1">// 不好的写法：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 静态类型检查，即使iter不是随机访问迭代器，也会进入if语句块内进行检查
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// if( typeid(typename my_iterator_traits&lt;IterT&gt;::iterator_category) == typeid(std::random_access_iterator_tag) )
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">//     iter += d;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="n">doAdvance</span><span class="p">(</span><span class="n">iter</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="k">typename</span> <span class="n">my_iterator_traits</span><span class="o">&lt;</span><span class="n">IterT</span><span class="o">&gt;::</span><span class="n">iterator_category</span><span class="p">());</span> 
</span></span><span class="line"><span class="cl">    <span class="c1">// 最后默认初始化一个iterator_category的对象，进行重载匹配，调用对应的函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">myAdvance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;*</span><span class="n">p</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lst</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">lst</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">myAdvance</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;*</span><span class="n">it</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h1 id="48-认识模板元编程">48： 认识模板元编程</h1>
<ul>
<li>模板元编程（template metaprogramming，TMP）：编写模板，执行于编译期，生成具象化的代码
<ul>
<li>优点：可以将很多工作从运行期转移到编译期
<ul>
<li>一些错误可以提前发现</li>
<li>运行时更高效：可执行文件体积小，运行期短，内存需求少</li>
<li>避免了[[ch07-模板与泛型编程#^826df6|静态类型检查]]的问题</li>
</ul>
</li>
<li>缺点：编译时间变长</li>
</ul>
</li>
<li>模板元编程
<ul>
<li>图灵完备</li>
<li>循环由递归实现</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch06 继承与面向对象设计</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch06-%E7%BB%A7%E6%89%BF%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Thu, 01 Feb 2024 21:14:04 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch06-%E7%BB%A7%E6%89%BF%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/</guid>
      <description>32：确定你的public继承构造出is-a关系 public继承的意思是，子类是一种特殊的父类（is-a关系） 子类必须涵盖父类每一个特点，必</description>
      <content:encoded><![CDATA[<h1 id="32确定你的public继承构造出is-a关系">32：确定你的public继承构造出is-a关系</h1>
<ul>
<li>public继承的意思是，子类是一种特殊的父类（is-a关系）
<ul>
<li>子类必须涵盖父类每一个特点，必须无条件继承父类所有特性和接口</li>
<li>否则没有is-a关系，不应该使用public继承
<ul>
<li>因为很多时候凭生活经验判断，可能会错误判断为具有is-a关系，但是子类可能没有父类的某个特性</li>
</ul>
</li>
</ul>
</li>
<li>程序设计没有银弹</li>
</ul>
<h1 id="33避免覆盖继承而来的名称">33：避免覆盖继承而来的名称</h1>
<ul>
<li>背景：父类中有多个重载的虚函数（同名），子类只重写了其中一个，会导致子类中父类的其他重载函数不可见
<ul>
<li>根本原因：如果子类重写了父类的重载函数的一部分，在进行名字查找中，可以在相应的静态类型（子类）中查找到名字，但是类型无法匹配</li>
</ul>
</li>
<li>避免方法：
<ul>
<li>对于父类的重载方法，子类要么全部重写，要么一个都不重写
<ul>
<li>使用<code>using</code>声明</li>
</ul>
</li>
<li>使用转交函数（forwarding function）？</li>
</ul>
</li>
</ul>
<h1 id="34区分接口继承与实现继承">34：区分接口继承与实现继承</h1>
<ul>
<li>public继承可以分为<code>函数接口继承</code>和<code>函数实现继承</code>
<ul>
<li>基类中声明纯虚函数，派生类只继承其接口，且派生类需要提供实现
<ul>
<li>从代码层面提醒派生类主动实现其接口，即使纯虚函数在基类中也可以有实现（派生类也需要显式指明需要使用基类中的实现）</li>
</ul>
</li>
<li>基类中声明虚函数，派生类继承其接口和缺省实现</li>
<li>基类中声明普通函数，派生类继承其接口和实现（好的编程习惯是不对子类方法进行重写）</li>
</ul>
</li>
</ul>
<h1 id="35考虑virtual函数以外的其他选择">35：考虑virtual函数以外的其他选择</h1>
<ul>
<li>通常面向多态的做法：
<ul>
<li>将接口设置为virtual的</li>
</ul>
</li>
<li>通过<code>Non-Virtual Interface(NVI)</code>来实现template method模式
<ul>
<li>将接口<code>Func</code>的真正实现函数<code>onFunc</code>设置为private virtual的
<ul>
<li>基类中的private virtual方法，通过public继承到派生类，派生类可以进行重写</li>
</ul>
</li>
<li>将接口<code>Func</code>设置为public non-virtual的，在<code>Func</code>中调用<code>onFunc</code>
<ul>
<li>non-virtual的接口<code>Func</code>就称为virtual <code>onFunc</code>的wrapper</li>
</ul>
</li>
<li>优点：在接口<code>Func</code>中调用<code>onFunc</code>前后，可以前置和后置的工作</li>
<li>缺点：在某些场景的继承体系中，virtual函数必须调用基类的版本，因此virtual函数必须是protected甚至public的，此时无法使用NVI</li>
</ul>
</li>
<li>strategy模式
<ul>
<li>基于<code>Function Pointers</code>的strategy模式
<ul>
<li>直接在构造函数中传入一个函数指针，用于实现多态</li>
<li>进一步的，可以基于C++11的<code>std::function</code>来实现strategy模式，在构造函数中传入一个可调用对象</li>
<li>古典的strategy模式：将函数指针替换为类指针，使用该类中的成员函数</li>
</ul>
</li>
<li>优点：同一种类型可以使用不同的方法进行计算，而且可以在运行期变更使用的函数</li>
<li>缺点：函数指针只能访问public成员，否则只能弱化封装性，将外部函数声明为友元</li>
</ul>
</li>
</ul>
<h1 id="36绝不重写继承而来的non-virtual函数">36：绝不重写继承而来的non-virtual函数</h1>
<ul>
<li>从语法上看
<ul>
<li>虚函数执行的是动态绑定，非虚函数执行的是静态绑定</li>
<li>如果有多态调用的需求，设置为虚函数</li>
</ul>
</li>
<li>从设计上看
<ul>
<li>public继承意味着一种is-a关系，子类是一种特殊的父类，不变性（父类的共性）凌驾于特异性（子类的个性）之上</li>
<li>重写public继承而来的non-virtual表示子类修改了父类的特性，违背了is-a关系，造成了设计上的矛盾</li>
</ul>
</li>
</ul>
<h1 id="37绝不重写继承而来的虚函数的缺省参数值">37：绝不重写继承而来的(虚函数的)缺省参数值</h1>
<ul>
<li>虚函数执行的是动态绑定，但是缺省参数值是静态绑定
<ul>
<li>因此可能执行的是动态类型版本的虚函数，但是缺省参数值是静态类型版本虚函数的，没有使用动态类型版本的缺省参数值，极易引起误会</li>
<li>缺省参数值采用静态绑定是为了提高运行时效率，这样可以在编译期将参数确定，而非得到运行时</li>
</ul>
</li>
<li>解决方法：
<ul>
<li>如果使用虚函数，则采用相同的缺省参数值</li>
<li>使用<code>Non-Virtual Interface(NVI)</code>代替虚函数
<ul>
<li>将接口<code>Func</code>设置为public non-virtual的（因此不期望被重写），并带有缺省参数，因此不管怎么继承，缺省参数值都是相同的</li>
<li>将接口<code>Func</code>的实现逻辑<code>onFunc</code>设置为private virtual的，<code>Func</code>中将缺省参数传递给<code>onFunc</code>，调用动态版本的虚函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="38通过复合构造出has-a关系或根据某物实现出">38：通过复合构造出has-a关系或“根据某物实现出”</h1>
<ul>
<li>复合：一个类作为另一个类的数据成员</li>
<li>当复合发生在应用域内的对象之间时，表现出has-a的关系
<ul>
<li>比如Person类中有一个Address类</li>
</ul>
</li>
<li>当复合发生在实现域内的对象之间时，表现出“根据某物实现出”的关系
<ul>
<li>比如使用List类模拟实现出一个Set类</li>
</ul>
</li>
</ul>
<h1 id="39-明智而审慎地使用private继承">39： 明智而审慎地使用private继承</h1>
<ul>
<li>private继承的特点：
<ul>
<li>如果派生类private继承自基类，则从派生类无法转换到基类</li>
<li>但是如果派生类public继承自基类，则派生类可以slice（切掉）转换为基类</li>
</ul>
</li>
<li>private继承的意义：“根据某物实现出”
<ul>
<li>仅仅是为了让派生类使用基类中的某些方法，派生类与基类没有直接意义上的联系</li>
</ul>
</li>
<li>private继承的使用：当需要进行“根据某物实现出”的时候
<ul>
<li>能用复合，就不要用private：绝大多数private继承的场合都可以使用“public继承+复合”进行代替
<ul>
<li>使用private继承：
<ul>
<li>比如想在Widget的派生类中，不定义OnTick方法，即使使用private继承，在Widget的派生类中仍然可以重新定义OnTick方法（类似NVI中方法）</li>
<li>同时Widget编译时必须依赖Timer</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// 使用private继承
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Timer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnTick</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="o">:</span> <span class="k">private</span> <span class="n">Timer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnTick</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span> <span class="c1">// override
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// Widget的派生类中仍有OnTick方法
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>使用复合：
<ul>
<li>在Widget的派生类中，可以没有OnTick方法（同C++11对成员函数使用<code>final</code>）</li>
<li>可以将WidgetTimer定义移出Widget，从而Widget编译时不需要Timer</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Timer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnTick</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">class</span> <span class="nc">WidgetTimer</span><span class="o">:</span> <span class="k">public</span> <span class="n">Timer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">                <span class="k">virtual</span> <span class="kt">void</span> <span class="n">OnTick</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">WidgetTimer</span> <span class="n">timer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>使用private继承的情况：空白基类最优化（Empty Base Optimization，EBO）</li>
</ul>
</li>
</ul>
<h1 id="40-明智而审慎地使用多重继承">40： 明智而审慎地使用多重继承</h1>
<ul>
<li>多重继承中可能遇到歧义调用，需要指明调用哪个基类中的接口
<ul>
<li>即使同名接口一个在基类中是public的，一个是private的（不会被调用），也会发生歧义</li>
<li>因为C++首先会找到最佳匹配函数，之后才会验证其可用性，如果两个同名的函数匹配程度相同，则发生二义性</li>
</ul>
</li>
<li>遇到菱形继承时，使用虚继承，且尽量少的在虚基类中携带数据</li>
<li>多重继承的使用场景：public继承自某个抽象基类，private继承自某个协助实现的基类</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch05 实现</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch05-%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 01 Feb 2024 21:13:46 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch05-%E5%AE%9E%E7%8E%B0/</guid>
      <description>26：尽可能延后变量定义式的出现时间 原因一：程序前面部分可能有if判断、异常处理等，可能不会运行到后面部分 原因二：直接构造的效率高于默认构造</description>
      <content:encoded><![CDATA[<h1 id="26尽可能延后变量定义式的出现时间">26：尽可能延后变量定义式的出现时间</h1>
<ul>
<li>原因一：程序前面部分可能有if判断、异常处理等，可能不会运行到后面部分</li>
<li>原因二：直接构造的效率高于默认构造+赋值</li>
<li>原因三：变量可能在循环中使用，变量定义在循环内部而非循环前面，可以避免将变量的作用域扩大；除非对循环部分的性能有要求。</li>
</ul>
<h1 id="27尽量少做转型动作">27：尽量少做转型动作</h1>
<ul>
<li>三种风格的转型：
<ul>
<li>C语言风格：<code>(T)expression</code></li>
<li>函数风格：<code>T(expression)</code></li>
<li>C++风格：
<ul>
<li><code>const_cast&lt;T&gt;(expression)</code>：去除const属性</li>
<li><code>dynamic_cast&lt;T&gt;(exprssion)</code>：将指向为基类的指针转型为指向派生类的指针，可能耗费重大运行成本
<ul>
<li>尽量少使用</li>
</ul>
</li>
<li><code>reinterpret_cast&lt;T&gt;(expression)</code></li>
<li><code>static_cast&lt;T&gt;(expression)</code>：最常用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="28避免返回handles指向对象内部成分">28：避免返回handles指向对象内部成分</h1>
<ul>
<li>handles：引用、指针、迭代器</li>
<li>避免返回指向内部对象的handles，返回一个成员变量的副本
<ul>
<li>增加可封装性</li>
<li>帮助const成员函数的行为像一个const</li>
<li>将发生”dangling handles“的可能性降到最低（当临时对象析构后，也就无法通过handle获取对象内部的成员）</li>
</ul>
</li>
</ul>
<h1 id="29为异常安全而努力是值得的">29：为“异常安全”而努力是值得的</h1>
<ul>
<li>异常安全的含义：当异常被抛出时
<ul>
<li>不泄露资源：使用RAII</li>
<li>不发生数据败坏</li>
</ul>
</li>
<li>异常安全的函数提供三种不同级别的保证：
<ul>
<li>基本承诺：不发生数据败坏，但是不保证程序状态</li>
<li>强烈保证：程序状态不变（即程序回复到”调用函数之前“的状态）
<ul>
<li>通过RAII和调换代码顺序实现</li>
<li>或者通过copy and swap实现：创建副本资源并进行操作，所有操作完成后，使用一个不会抛出异常的swap将副本与当前资源进行交换</li>
</ul>
</li>
<li>不抛掷承诺：总能完成功能，作用域内置类型上的所有操作都提供nothrow承诺</li>
</ul>
</li>
<li>强烈保证有时无法实现</li>
<li>异常安全保证具有木桶效应</li>
</ul>
<h1 id="30透彻了解内联的里里外外">30：透彻了解内联的里里外外</h1>
<blockquote>
<p><code>inline</code>最初只是针对编译器的优化建议，而非强制；是否内联由优化等级所控制，与是否内联无关</p>
</blockquote>
<ul>
<li>声明：
<ul>
<li>隐式声明：将函数定义与类内部（但不是一种好的编程风格）</li>
<li>显示声明：<code>inline</code></li>
</ul>
</li>
<li>内联函数通常被置于头文件中，因为内联大部分情况下时编译期行为</li>
<li><code>inline</code>必须放在函数定义前
<ul>
<li>从实现上看，<code>inline</code>放在函数声明前不起作用</li>
<li>从编程风格看，应该严格区分声明与定义，而且用户不需要、也没有必要知道该函数是否内联</li>
</ul>
</li>
<li><code>inline</code>只是对编译器的一个申请，不是强制命令</li>
</ul>
<h1 id="31将文件间的编译依存关系降到最低">31：将文件间的编译依存关系降到最低</h1>
<blockquote>
<ul>
<li>pimpl idiom（pimpl：pointer to implementation）设计思想：
<ul>
<li>原来main class包含类的具体实现逻辑</li>
<li>现在将main class中具体实现逻辑，放到一个实现类Impl中，在private中添加一个指向Impl的指针</li>
<li>因此main class只是提供接口，实现类Impl负责实现接口，”类的接口与实现分离“</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>背景：即使只是改动类的实现，而不改变类的接口，这样所有包含该类的源码都要重新编译
<ul>
<li>根本原因在于，编译器在编译期必须知道对象的大小，如果不知道类的定义，就无法为对象分配内存</li>
</ul>
</li>
<li>方法一：提供句柄类，用”声明的依存性“替换”定义的依存性“
<ul>
<li>原来：假设1000个文件依赖于Person.h，这1000个文件都要重新编译链接
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// Person.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">mName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 假设在Person.cpp中，略微修改了std::string Person::name()的实现，1000个文件需要全部重新编译
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>现在：只需要修改PersonImpl的具体实现，重新编译这一个文件即可
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// Person.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">PersonImpl</span><span class="p">;</span> <span class="c1">// PersonImpl声明
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">PersonImpl</span> <span class="o">*</span><span class="n">pImpl</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Person.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;Person.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;PersonImpl.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">Person</span><span class="o">::</span><span class="n">name</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">pImpl</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">();</span> <span class="c1">// 调用实现类中同名函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// PersonImpl.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">PersonImpl</span><span class="p">{</span> <span class="c1">// PersonImpl与Person有相同的public函数，且Person的private数据成员移动到了PersonImpl的private部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">public</span><span class="o">:</span>    
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">mName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// PersonImpl.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;PersonImpl.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">PersonImpl</span><span class="o">::</span><span class="n">name</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">mName</span><span class="p">;}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>方法二：将句柄类定义为抽象类
<ul>
<li>基类中定义一个工厂方法，返回动态类型为派生类，静态类型为基类的指针</li>
<li>因此修改派生类中的方法的实现逻辑，不会影响到基类，”类的接口与实现分离“</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="c1">// Person.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Person</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="o">~</span><span class="n">Person</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Person.cpp
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;Person.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&#34;RealPerson.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="n">std</span><span class="o">::</span><span class="n">shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span> <span class="n">Person</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">shared</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">RealPerson</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// RealPerson.h
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">class</span> <span class="nc">RealPerson</span><span class="o">:</span> <span class="k">public</span> <span class="n">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">RealPerson</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">mName</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span><span class="p">()</span> <span class="k">const</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">virtual</span> <span class="o">~</span><span class="n">RealPerson</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>    
</span></span><span class="line"><span class="cl">    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">mName</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>参考
<ul>
<li><a href="https://www.zhihu.com/question/52832178/answer/192499529">https://www.zhihu.com/question/52832178/answer/192499529</a></li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch04 设计与声明</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch04-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%A3%B0%E6%98%8E/</link>
      <pubDate>Thu, 01 Feb 2024 21:13:35 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch04-%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%A3%B0%E6%98%8E/</guid>
      <description>18：让接口容易被正确使用，不易被误用 函数接口传参，使用者可能理解错误或不小心传错 将函数参数封装为新的类型，比如封装新的年月日类，而非直接传</description>
      <content:encoded><![CDATA[<h1 id="18让接口容易被正确使用不易被误用">18：让接口容易被正确使用，不易被误用</h1>
<ul>
<li>函数接口传参，使用者可能理解错误或不小心传错
<ul>
<li>将函数参数封装为新的类型，比如封装新的年月日类，而非直接传入数字</li>
</ul>
</li>
<li>限制类型内可以进行的操作
<ul>
<li>比如添加const限制，比如item3</li>
</ul>
</li>
<li>尽量使自定义类型和内置类型的行为保持一致</li>
<li>消除使用者的资源管理责任
<ul>
<li>比如直接返回一个智能指针，而非返回一个raw指针</li>
</ul>
</li>
</ul>
<h1 id="19设计class犹如设计type">19：设计class犹如设计type</h1>
<p>设计类时，考虑的问题：</p>
<ul>
<li>如何创建以销毁：如何实现构造函数和析构函数</li>
<li>初始化与赋值的区别：如何实现构造函数和赋值操作符</li>
<li>类对象传值：如何实现拷贝构造函数</li>
<li>成员类型的合法值：在构造函数和赋值操作中进行检查</li>
<li>继承关系的约束：基类的相关虚函数、成员函数是否需要被声明为virtual</li>
<li>是否允许由别的类转换而来：如何写转换构造函数</li>
<li>哪些操作符和函数是合理的</li>
<li>哪些操作符和函数应该拒绝</li>
<li>成员给哪些用户使用：成员的访问控制权限</li>
<li>新类型的未声明接口是什么</li>
<li>是否有必要将类一般化为类模板</li>
<li>这个新类型是否真的需要</li>
</ul>
<h1 id="20传参时尽量传常量引用而非传值">20：传参时，尽量传常量引用而非传值</h1>
<ul>
<li>优点：
<ul>
<li>减少一次对象的复制</li>
<li>避免对象切割（比如形参是基类，实参是派生类），同时实现多态</li>
</ul>
</li>
<li>使用传值的情况：内置类型，STL迭代器，函数对象</li>
</ul>
<h1 id="21函数返回值尽量不要为引用">21：函数返回值尽量不要为引用</h1>
<blockquote>
<ul>
<li>禁止在函数中返回一个指向局部变量的指针或引用</li>
<li>不要在函数中返回一个动态分配的对象</li>
<li>不要在可能多次调用的函数中返回一个局部静态变量</li>
</ul>
</blockquote>
<ul>
<li>错误返回引用的例子：
<ul>
<li>返回栈空间中局部变量的引用：函数返回后，栈上相应对象被销毁，因此未定义</li>
<li><a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/1c97b0c2a188e5fe29a79443c7ac79c2a3eae6ec/4.DesignsAndDeclarations/21.DontTryToReturnAReferenceWhenYouMustReturnAnObject.md#%E4%BC%A0%E9%80%92%E5%A0%86%E4%B8%AD%E7%94%9F%E6%88%90%E5%8F%98%E9%87%8F%E7%9A%84%E5%BC%95%E7%94%A8">返回堆空间中局部变量的引用</a>：虽然函数返回后不会释放对象，但是函数返回赋值的变量占有了堆空间的资源，而且极易容易忘记释放（因为一般也基本不会考虑对返回值进行delete），造成内存泄露</li>
<li>返回静态变量的引用：当多次调用该函数返回静态变量的引用时，静态变量只有一个，<a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/1c97b0c2a188e5fe29a79443c7ac79c2a3eae6ec/4.DesignsAndDeclarations/21.DontTryToReturnAReferenceWhenYouMustReturnAnObject.md#%E4%BC%A0%E9%80%92%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%BC%95%E7%94%A8">例子</a></li>
</ul>
</li>
<li>C++11中可以使用移动语义，减少拷贝带来的消耗</li>
</ul>
<h1 id="22将成员变量声明为private">22：将成员变量声明为private</h1>
<ul>
<li>将成员变量声明为public的缺点：
<ul>
<li>缺乏语法一致性：访问public成员变量，可以直接访问或者调用成员函数</li>
<li>对成员变量处理缺少准确控制：将成员变量设置为private的，可以提供setter/getter函数来控制其读写权限</li>
<li>不利于封装：在成员变量发生变化时，可以在相关函数中通知其他变量，从而进行相应修改</li>
</ul>
</li>
</ul>
<h1 id="23宁以non-membernon-friend替换member函数">23：宁以non-member、non-friend替换member函数</h1>
<blockquote>
<p>功能颗粒度较高的函数设置为类外的函数，而非封装为public成员函数</p>
</blockquote>
<ul>
<li>背景：public成员函数可分为两类：
<ul>
<li>功能颗粒度较低的函数：public/protected成员函数，内部直接访问private成员</li>
<li>功能颗粒度较高的函数：public/protected成员函数，内部由若干个public成员函数集成而来</li>
</ul>
</li>
<li>尽量将功能颗粒度较高的函数封装为类外的函数：
<ul>
<li>优化类的封装性：如果封装为public函数，本来希望该函数只是public函数的集成，但是这样没法在代码层面体现出来</li>
<li>允许我们从更多维度组织代码结构，提供更大的包裹弹性：比如将不同public成员函数封装为不同功能的外部函数</li>
<li>优化编译依赖关系：比如不同的public成员函数可以封装为不同功能的外部函数，这些外部函数分别放在不同文件中，但是属于同一个命名空间中；这样使用时，需要哪个功能，就只需要包含该文件即可</li>
</ul>
</li>
</ul>
<h1 id="24若所有参数皆需要类型转换请为此采用non-member函数">24：若所有参数皆需要类型转换，请为此采用non-member函数</h1>
<blockquote>
<p>如果希望运算符的任意操作数可以发生隐式类型转换，则应该将运算符重载为非成员函数（比如友元）</p>
</blockquote>
<ul>
<li>背景：运算符可以重载，重载为成员函数呢，还是重载为非成员函数呢？
<ul>
<li>规定：如果运算符是成员函数，则它的第一个运算对象不会发生隐式类型转换
<ul>
<li>因为编译器根据第一个运算对象的类型，确定调用的运算符是属于哪一类的</li>
<li>比如：<code>z = x * y</code>等价于<code>z = x.operator*(y)</code>，x不会发生隐式类型转换</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="25考虑写出一个不抛出异常的swap函数">25：考虑写出一个不抛出异常的swap函数</h1>
<ul>
<li>如果Widge是一个类，可以在std命名空间中实现<code>std::swap&lt;T&gt;</code>的Widge全特化版本，同时在Widge中实现类内的swap函数以修改private成员的值
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">other</span><span class="p">){</span> <span class="c1">// member swap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">swap</span><span class="p">;</span> <span class="c1">// default swap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// 调用std::swap进行private成员的处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">std</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;&gt;</span> <span class="c1">// std::swap特例化版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">swap</span><span class="o">&lt;</span><span class="n">Widge</span><span class="o">&gt;</span> <span class="p">(</span><span class="n">Widget</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Widget</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="n">a</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">b</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>如果Widge是一个类模板
<ul>
<li>不能偏特例化一个函数模板
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">std</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span> <span class="c1">// non-member swap
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">void</span> <span class="n">swap</span><span class="o">&lt;</span><span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&gt;</span> <span class="p">(</span><span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span><span class="n">a</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">b</span><span class="p">);}</span> <span class="c1">// 编译报错
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>但是可以偏特例化一个类模板，添加一个重载版本
<ul>
<li>但是不要在std命名空间中添加新东西</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">std</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span><span class="n">a</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">b</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>解决方法：置于一个新的命名空间中
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">namespace</span> <span class="n">WidgetStuff</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span> <span class="p">...</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">void</span> <span class="n">swap</span><span class="p">(</span><span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Widget</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span><span class="n">a</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">b</span><span class="p">);}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>因此，如果想使得Widget专属版swap在尽可能多的语境下被调用，需要
<ul>
<li>在Widget中提供一个public swap函数（不可抛出异常），内部调用<code>std::swap</code></li>
<li>同时可能需要同时实现两个版本：
<ul>
<li>Widget所在命名空间WidgetStuff中，实现一个nom-member swap，内部调用<code>Widget::swap</code></li>
<li>如果Widget是一个类而非类模板，在std中特化<code>std::swap</code>，内部调用<code>Widget::swap</code></li>
</ul>
</li>
</ul>
</li>
<li>C++11之后，<code>std::swap</code>改用<code>std::move</code>实现，所以几乎不存在性能缺陷</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch03 资源管理</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch03-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</link>
      <pubDate>Thu, 01 Feb 2024 21:13:22 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch03-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</guid>
      <description>13：以对象管理资源 资源获取即初始化（RAII）：使用析构函数确保资源被释放 复制时使用移动语义，移交资源的所有权 背景：使用动态内存分配时，很</description>
      <content:encoded><![CDATA[<h1 id="13以对象管理资源">13：以对象管理资源</h1>
<blockquote>
<ul>
<li>资源获取即初始化（RAII）：使用析构函数确保资源被释放</li>
<li>复制时使用移动语义，移交资源的所有权</li>
</ul>
</blockquote>
<ul>
<li>背景：使用动态内存分配时，很容易忘记delete，尤其是程序在中间退出（比如if判断后return）</li>
<li>RAII（Resource Acquisition Is Initialization）资源获取即初始化：
<ul>
<li>资源的有效期与持有资源的对象的生命周期严格绑定（即获取资源的时候要通过构造函数初始化）</li>
<li>对象独占资源</li>
<li>即让编译器在每个退出的分支上，对象都进行析构，从而释放资源</li>
<li>使用模板更加方便</li>
</ul>
</li>
<li>移交所有权
<ul>
<li>背景：如果两个指针同时指向一个资源，会析构两遍；因此RAII类独占资源（类似<code>unique_ptr</code>）</li>
<li>在RAII类中，将拷贝相关的函数设置为<code>=delete</code>，RAII无法进行拷贝</li>
<li>因此只能通过移动构造函数使用<code>std::move</code>进行移交所有权</li>
</ul>
</li>
<li>如何把RAII类作为函数的参数
<ul>
<li>值传递：各位caller，我不要ownership了，请拿走</li>
<li>非const引用传递：拿不拿走都行，提前商量好（不推荐）</li>
<li>const引用传递：可以拿走用一下，但是ownership还是我的</li>
<li>右值引用：同第二条，无法确定caller是否拿走了ownership</li>
</ul>
</li>
<li>C++98与C++11
<ul>
<li>C++98中<code>std::auto_ptr</code>类似于C++11中<code>std::unique_ptr</code>，但是<code>std::unique_ptr</code>不允许所有权被转移</li>
<li>C++98中<code>std::tr1::shared_ptr</code>类似于C++11中<code>std::shared_ptr</code>，<code>weak_ptr</code>只是拥有资源的使用权而非所有权，因此不占用引用计数，可以解决环状引用的问题</li>
</ul>
</li>
<li>梳理：RAII作为一种管理资源的方式（或思想），早期使用<code>auto_ptr</code>作为解决方案，C++11之后使用unique_ptr和move语义作为解决方案</li>
<li>参考：
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/600337719">现代C++学习—— 什么是RAII</a></li>
</ul>
</li>
</ul>
<h1 id="14在资源管理类中小心copying行为">14：在资源管理类中小心copying行为</h1>
<blockquote>
<p>复制RAII对象必须一并处理资源的copy行为</p>
</blockquote>
<ul>
<li>copy行为的不同情况：
<ul>
<li>大部分情况下，对RAII对象的复制操作本身就不合法</li>
<li>对底层资源使用引用计数法（<code>shared_ptr</code>）</li>
<li>复制底层资源（行为像值，进行深拷贝）</li>
<li>转移资源所有权（<code>unique_ptr</code>）</li>
</ul>
</li>
</ul>
<h1 id="15在资源管理类中提供对原始资源的访问">15：在资源管理类中提供对原始资源的访问</h1>
<ul>
<li>将RAII对象转换为对资源的直接访问
<ul>
<li>通过显示转换：提供一个<code>get()</code>函数返回智能指针内部的原始指针</li>
<li>通过隐式转换
<ul>
<li>像使用原始指针一样使用智能指针，比如智能指针一样可以使用<code>-&gt;</code>访问成员</li>
<li>直接访问原始指针：在RAII类内实现返回原始指针的类型转换运算符</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="16成对使用new和delete时要采取相同形式">16：成对使用new和delete时要采取相同形式</h1>
<ul>
<li>new一个对象，使用delete释放；new一个数组，使用<code>delete []</code>进行释放
<ul>
<li><code>delete []</code>表示知道释放的是数组，读取数组元素数量，从而多次调用析构函数</li>
</ul>
</li>
<li>尽量避免对数组使用<code>typedef</code>，此时在delete时很容易出现混淆：用delete还是<code>delete[]</code>，可以的话可以使用<code>std::vector</code>等容器</li>
</ul>
<h1 id="17以独立语句将new的对象置入智能指针">17：以独立语句将new的对象置入智能指针</h1>
<ul>
<li>背景：编译器可能对单一语句中的执行顺序进行重新调整
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">priority</span><span class="p">()</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">func</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">MyResource</span><span class="o">&gt;</span> <span class="n">sp</span><span class="p">,</span> <span class="kt">int</span> <span class="n">priority</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">MyResource</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">MyResource</span><span class="p">),</span> <span class="n">priority</span><span class="p">());</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">该语句的执行顺序可能是：
</span></span></span><span class="line"><span class="cl"><span class="cm">    MyResource* tmp_ptr = new MyResource;
</span></span></span><span class="line"><span class="cl"><span class="cm">    int priority = priority();
</span></span></span><span class="line"><span class="cl"><span class="cm">    std::shared_ptr&lt;MyResource&gt; sp = std::shared_ptr&lt;MyResource&gt;(tmp_ptr);
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果<code>int priority = priority();</code>执行失败，则<code>tmp_ptr</code>指向的临时资源无法被释放，发生内存泄漏</li>
<li>根本原因是：资源被创建和资源被转换成资源管理对象有时间差，中间可能有干扰</li>
</ul>
</li>
<li>解决方法：以独立语句将new的对象置于智能指针中，因为编译器无法对跨语句的操作进行调整
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">MyResource</span><span class="o">&gt;</span> <span class="n">sp</span><span class="p">(</span><span class="k">new</span> <span class="n">MyResource</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="n">func</span><span class="p">(</span><span class="n">sp</span><span class="p">,</span> <span class="n">priority</span><span class="p">());</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch02 构造、析构、赋值运算</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch02-%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97/</link>
      <pubDate>Thu, 01 Feb 2024 21:12:53 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch02-%E6%9E%84%E9%80%A0%E6%9E%90%E6%9E%84%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97/</guid>
      <description>05：了解C++默默编写并调用了哪些函数 如果没有自定义相应拷贝控制成员，而且需要使用该拷贝控制成员，则编译器进行合成 有时编译器不会进行合成，</description>
      <content:encoded><![CDATA[<h1 id="05了解c默默编写并调用了哪些函数">05：了解C++默默编写并调用了哪些函数</h1>
<blockquote>
<ul>
<li>如果没有自定义相应拷贝控制成员，而且需要使用该拷贝控制成员，则编译器进行合成</li>
<li>有时编译器不会进行合成，因为一些操作非法</li>
</ul>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl"><span class="n">MyClass</span> <span class="n">m1</span><span class="p">;</span> <span class="c1">// 生成默认构造函数和析构函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">MyClass</span> <span class="nf">m2</span><span class="p">(</span><span class="n">m1</span><span class="p">);</span> <span class="c1">// 生成复制构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">m2</span> <span class="o">=</span> <span class="n">m1</span><span class="p">;</span> <span class="c1">// 生成赋值构造运算符
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>默认构造函数和析构函数
<ul>
<li>作用：调用{基类和non-static成员变量}的构造函数和析构函数</li>
<li>当自定义构造函数后，编译器就不会自动生成构造函数</li>
<li>生成的析构函数是non-virtual的，除非基类的析构函数是virtual的</li>
</ul>
</li>
<li>复制构造函数</li>
<li>赋值构造运算符
<ul>
<li>自动生成赋值构造运算符的条件是，相关操作必须合法
<ul>
<li>比如成员变量是const或引用，则不能进行赋值</li>
<li>比如基类中赋值构造运算符是private的，则派生类中无法调用父类相应的赋值构造运算符对父类成员进行赋值</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="06若不想使用编译器自动生成的函数就该明确拒绝">06：若不想使用编译器自动生成的函数，就该明确拒绝</h1>
<blockquote>
<p>在声明中将拷贝控制成员标记为<code>=delete</code>，将不会自动生成该拷贝控制成员</p>
</blockquote>
<ul>
<li>背景：有时不希望类具有拷贝等行为（语义要求）</li>
<li>三种方法：将不需要自动生成的拷贝控制成员
<ul>
<li>在private中进行定义
<ul>
<li>虽然类外部无法访问，但不是绝对安全，可以在成员函数和友元中使用</li>
<li>写为空函数体，使其在链接过程中报错</li>
</ul>
</li>
<li>在基类中声明为private
<ul>
<li>这样即使在成员函数和友元中使用相应拷贝控制成员，也会因为无法拷贝控制相应基类成员，从而将报错从链接期提前到编译期</li>
</ul>
</li>
<li>在声明中标记为<code>=delete</code></li>
</ul>
</li>
</ul>
<h1 id="07为多态基类声明virtual析构函数">07：为多态基类声明virtual析构函数</h1>
<blockquote>
<p>声明多态性质的基类的析构函数为virtual的</p>
</blockquote>
<ul>
<li>背景：当<code>delete</code>一个指向派生类的基类指针时，只会调用non-virtual的基类析构函数，派生类中成员无法释放</li>
<li>只有当类中至少包含一个除析构函数外的virtual函数时（多态性质），才将析构函数声明为virtual的
<ul>
<li>为了保持可移植性</li>
<li>如果该类不包含virtual函数，则通常该类不会作为基类</li>
</ul>
</li>
<li>将基类析构函数声明为pure virtual函数，从而将基类构造为抽象基类（避免了考虑将其他哪个函数声明为pure virtual函数）</li>
<li>所有的STL容器都不包含virtual析构函数，因此不要将STL容器作为基类
<ul>
<li>因为STL容器设计不是用来作为基类，不带有多态语义要求，只有多态性质的基类才需要声明一个virtual析构函数</li>
<li>不是所有基类都带有多态性质</li>
</ul>
</li>
</ul>
<h1 id="08别让异常逃离析构函数">08：别让异常逃离析构函数</h1>
<blockquote>
<ul>
<li>析构函数不要抛出异常，但是析构函数中可以使用try catch进行异常处理</li>
</ul>
</blockquote>
<ul>
<li>C++11中，默认将析构函数声明为<code>noexcept</code>，防止在析构函数中抛出异常
<ul>
<li><code>try</code>语句块中抛出异常时，会将作用域中对象依次调用析构函数，然后进入catch语句块中
<ul>
<li>如果此时调用的析构函数中继续报错，则core dumped</li>
</ul>
</li>
</ul>
</li>
<li>可以在析构函数中使用try catch捕获异常，或者<a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/2.ConstructorsDestructorsAndAssignmentOperation/08.PreventExceptionsFromLeavingDestructors.md#%E9%87%8D%E6%96%B0%E8%AE%BE%E8%AE%A1%E6%8E%A5%E5%8F%A3%E8%AE%A9%E4%BD%BF%E7%94%A8%E8%80%85%E6%9C%89%E6%9C%BA%E4%BC%9A%E5%AF%B9%E5%BC%82%E5%B8%B8%E5%81%9A%E5%87%BA%E5%8F%8D%E5%BA%94">重新设计接口</a>，使得防止抛出异常的函数在析构函数中被调用</li>
</ul>
<h1 id="09绝不在构造和析构过程中调用virtual函数">09：绝不在构造和析构过程中调用<code>virtual</code>函数</h1>
<blockquote>
<p>不要再构造/析构函数（及其调用的函数中）中调用virtual函数，因为这样虚函数不会呈现多态</p>
</blockquote>
<ul>
<li>当派生类中的基类部分被构造时，其调用的虚函数只会调用基类中的版本，不会调用派生类中的版本，即不会呈现多态
<ul>
<li>从安全性角度看，因为此时派生类部分还未构造，使用派生类的虚函数版本可能产生未定义的行为，所以C++规定使用基类的版本</li>
<li>从原理角度看，在构造基类部分时，对象的类型实际上是基类类型</li>
</ul>
</li>
<li>当派生类中的基类部分被析构时，同样不会呈现多态
<ul>
<li>从安全性角度看，此时派生类部分已经析构，调用派生类的虚函数版本产生未定义的行为</li>
<li>从原理角度看，此时对象为基类类型</li>
</ul>
</li>
<li>构造函数/析构函数内调用的函数，也要保证其中不调用虚函数</li>
</ul>
<h1 id="10令operator返回一个reference-to-this">10：令<code>operator=</code>返回一个<code>reference to *this</code></h1>
<blockquote>
<p>令赋值运算符返回一个<code>*this</code>的引用</p>
</blockquote>
<h1 id="11在operator中处理自我赋值">11：在<code>operator=</code>中处理自我赋值</h1>
<blockquote>
<p>进行重新排列赋值或者copy and swap</p>
</blockquote>
<ul>
<li>背景：有时可能很隐蔽的进行了自赋值的操作，特别是类管理资源时，很可能被意外delete掉</li>
<li>进行重新排列赋值：先保存当前资源副本，然后new，最后delete原来的资源；可以保证异常安全性，而且identity test没有必要
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="n">MyClass</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">MyClass</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="n">Resource</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">MyResource</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">MyResource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Resource</span><span class="p">();</span> <span class="c1">// 如果new失败，则当前资源不会被释放 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">delete</span> <span class="n">tmp</span><span class="p">;</span> <span class="c1">// new成功
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>copy and swap</li>
</ul>
<h1 id="12复制对象时勿忘记其每一个成分">12：复制对象时勿忘记其每一个成分</h1>
<ul>
<li>派生类复制时，不要忘记将基类部分也复制</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;cstdio&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Base</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Base</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span><span class="o">:</span> <span class="n">base_id</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Base</span><span class="p">(</span><span class="k">const</span> <span class="n">Base</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span><span class="o">:</span> <span class="n">base_id</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">base_id</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Base</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Base</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span> <span class="n">base_id</span> <span class="o">=</span> <span class="n">b</span><span class="p">.</span><span class="n">base_id</span><span class="p">;</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;}</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">base_id</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Derived</span><span class="o">:</span> <span class="k">public</span> <span class="n">Base</span><span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">Derived</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="n">string</span> <span class="n">name</span><span class="p">)</span><span class="o">:</span> <span class="n">Base</span><span class="p">(</span><span class="n">id</span><span class="p">),</span> <span class="n">myname</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="n">Derived</span><span class="p">(</span><span class="k">const</span> <span class="n">Derived</span><span class="o">&amp;</span> <span class="n">d</span><span class="p">)</span><span class="o">:</span> <span class="n">Base</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">myname</span><span class="p">(</span><span class="n">d</span><span class="p">.</span><span class="n">myname</span><span class="p">)</span> <span class="p">{}</span> <span class="c1">// 将派生类直接赋值给基类，派生类被切掉
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">Derived</span><span class="o">&amp;</span> <span class="k">operator</span><span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">Derived</span><span class="o">&amp;</span> <span class="n">d</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">Base</span><span class="o">::</span><span class="k">operator</span><span class="o">=</span><span class="p">(</span><span class="n">d</span><span class="p">);</span> <span class="c1">// 调用基类operator=
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">myname</span> <span class="o">=</span> <span class="n">d</span><span class="p">.</span><span class="n">myname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">string</span> <span class="n">myname</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded>
    </item>
    
    <item>
      <title>[Effective Cpp Notes] Ch01 让自己习惯C&#43;&#43;</title>
      <link>https://qinganzhang.github.io/posts/effective-cpp/ch01-%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B9%A0%E6%83%AFc&#43;&#43;/</link>
      <pubDate>Thu, 01 Feb 2024 21:10:56 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/effective-cpp/ch01-%E8%AE%A9%E8%87%AA%E5%B7%B1%E4%B9%A0%E6%83%AFc&#43;&#43;/</guid>
      <description>01 视C++为一个语言联邦 C++高效编程守则视状况而变化，取决于你使用C++的哪一部分 C++支持面向过程、面向对象、面向函数、泛型编程、元编程</description>
      <content:encoded><![CDATA[<h1 id="01-视c为一个语言联邦">01 视C++为一个语言联邦</h1>
<blockquote>
<p>C++高效编程守则视状况而变化，取决于你使用C++的哪一部分</p>
</blockquote>
<ul>
<li>C++支持面向过程、面向对象、面向函数、泛型编程、元编程，因此可以将C++视为一个由相关语言组成的联邦而非单一语言（各个方面的编程范式不太相同）：
<ul>
<li>C：有指针、数组，没有模板、重载和异常</li>
<li>Object-Oriented C++：类、封装、继承、多态、虚函数</li>
<li>Template C++：模板元编程</li>
<li>STL：</li>
</ul>
</li>
<li>编程范式（或者编程技巧）的区别：
<ul>
<li>对于C而言，传值比传引用更加高效</li>
<li>对于Object-Oriented C++而言，常量引用传递往往更好（可以传递左值、右值）</li>
<li>对于Template C++而言，模板往往不知道处理的对象是什么类型</li>
<li>对于STL而言，迭代器和函数对象是基于C的指针，所以此时应该选择值传递</li>
</ul>
</li>
</ul>
<h1 id="02尽量以constenuminline替换define">02：尽量以<code>const,enum,inline</code>替换<code>#define</code></h1>
<blockquote>
<ul>
<li>尽量使用编译器操作代替预处理器操作：
<ul>
<li>对于常量，尽量使用<code>const</code>对象或<code>enum</code>来替换<code>#define</code></li>
<li>对于形似函数的宏，最好改用<code>inline</code>替换<code>#define</code></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>尽量使用编译器操作代替预处理器操作
<ul>
<li><code>#define</code>是在预处理阶段进行替换，宏的名字不会出现在符号表中。</li>
</ul>
</li>
<li>对于常量，尽量使用<code>const</code>对象或<code>enum</code>来替换<code>#define</code>
<ul>
<li>两个典型场景：
<ul>
<li>定义常量指针</li>
<li>定义class专属常量，比如<code>const static</code>成员
<ul>
<li>类内static成员可以进行【声明时初始化】，虽然不是定义（即没有分配空间），但是只要不取地址，此时也可以使用该变量</li>
<li>如果类内static成员进行【声明时初始化】，而且需要取地址，则需要在类外对变量进行定义
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Widget</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">val</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">int</span> <span class="n">Widget</span><span class="o">::</span><span class="n">val</span><span class="p">;</span> <span class="c1">// 由于const，无法进行赋值
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>对于形似函数的宏，最好改用<code>inline</code>替换<code>#define</code>
<ul>
<li>虽然使用宏本身少了一次调用过程，但是有时即使加上括号，结果也不正确
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="cp">#define CALL_WITH_MAX(a, b) f((a) &gt; (b) ? (a) : (b))
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">CALL_WITH_MAX</span><span class="p">(</span><span class="o">++</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span>      <span class="c1">// a 累加了一次
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">CALL_WITH_MAX</span><span class="p">(</span><span class="o">++</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span> <span class="c1">// a 累加了两次
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>使用<code>inline</code>可以保证正确性，并且可以使用模板</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/1.AccustomingYourselfToCpp/02.PreferConstsEnumsInlinesToDefine.md">https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/1.AccustomingYourselfToCpp/02.PreferConstsEnumsInlinesToDefine.md</a></li>
</ul>
</li>
</ul>
<h1 id="03尽可能使用const">03：尽可能使用<code>const</code></h1>
<blockquote>
<ul>
<li>声明为<code>const</code>可以帮助编译器检测错误</li>
<li><code>const</code>成员函数默认遵循<code>bitwise constness</code>，但是编写程序时应该使用<code>logical constness</code>，必要时将成员声明为<code>mutable</code>来保证可以修改</li>
<li><code>const</code>和<code>non-const</code>成员函数有实质等价的实现，令<code>non-const</code>版本调用<code>const</code>版本可以避免代码重复</li>
</ul>
</blockquote>
<ul>
<li>const和指针：顶层const与底层const</li>
<li>const和STL：const迭代器是顶层const，<code>const_iterator</code>是底层const</li>
<li>const和函数：
<ul>
<li>函数返回值和函数形参尽量声明为const的，有助于编译器定位相关报错
<ul>
<li>比如将比较运算符<code>==</code>误写为赋值运算符<code>=</code></li>
</ul>
</li>
<li>成员函数声明为const的
<ul>
<li>使得成员函数更容易被理解（这个成员函数不能修改成员），而且此时形参往往也是const引用</li>
<li>一个const成员函数，一个non-const成员函数，可以进行重载
<ul>
<li>const对象调用const版本成员函数，普通对象调用non-const版本成员函数</li>
<li>常量性转移
<ul>
<li>背景：const成员函数与non-const成员函数中间逻辑相同，可能存在大量的重复代码，一个方法是将重复的代码写成函数放在private中</li>
<li>更好的办法是，让non-const成员函数调用const成员函数（如果反过来，const成员函数调用non-const成员函数，不能保证对象不被修改）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">TextBlock</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">const</span> <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[]</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">pos</span><span class="p">)</span> <span class="k">const</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">return</span> <span class="n">text</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>        
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="kt">char</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">[]</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">pos</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&amp;&gt;</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">TextBlock</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">)</span> <span class="c1">// *this是TextBlock&amp;, 强转加上const
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>                <span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="c1">// const TextBlock&amp;调用operator[]，否则TextBlock&amp;调用operator[]一直重复调用自己
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span><span class="o">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">text</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
</li>
<li><code>mutable</code>：使得成员变量即使在const成员函数中也可以被修改，主要是为了实现<code>logical constness</code>
<ul>
<li>背景：<code>bitwise constness</code>与<code>logical constness</code>
<ul>
<li><code>bitwise constness</code>：成员函数不应该修改任何<code>non-static</code>成员变量（const成员函数的默认方式）
<ul>
<li>编译器容易实现，只需要寻找成员变量的赋值操作</li>
</ul>
</li>
<li><code>logical constness</code>：允许成员函数修改成员变量，对于使用者而言，可以体现出constness即可
<ul>
<li>比如一个指针成员变量，按照<code>bitwise constness</code>，限定指针为顶层的，但是却无法保证不修改所指对象</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>参考
<ul>
<li><a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/1.AccustomingYourselfToCpp/03.UseConstWheneverPossible.md">https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/1.AccustomingYourselfToCpp/03.UseConstWheneverPossible.md</a></li>
</ul>
</li>
</ul>
<h1 id="04确定对象被使用前已被初始化">04：确定对象被使用前已被初始化</h1>
<blockquote>
<ul>
<li>内置类型对象一定要进行手动初始化</li>
<li>构造函数中最好使用初始化列表对成员变量进行初始化，而非在函数体中进行赋值</li>
<li>为了避免跨编译单元的初始化顺序问题，尽量以local static对象代替non-local static对象</li>
</ul>
</blockquote>
<ul>
<li>内置类型变量的初始化
<ul>
<li>内置类型变量（即使是类中的内置类型成员变量）是否会初始化，取决于其在内存中的位置（堆空间？栈空间？）</li>
</ul>
</li>
<li>自定义类对象的初始化
<ul>
<li>初始化与赋值的区别
<ul>
<li>赋值：比如在构造函数函数体中进行“赋值”
<ul>
<li>非内置类型的成员变量的初始化发生在进入构造函数之前，每个成员变量的default构造函数被自动调用，构造了两次（默认构造一次，复制构造一次）</li>
<li>但是内置类型的成员变量不会自动初始化，此时无区别</li>
</ul>
</li>
<li>初始化：比如在构造函数初始化列表中
<ul>
<li>此时相当于只调用了一次成员变量的构造函数（赋值构造）</li>
<li>如果是const或者是引用，此时不能被赋值，只能进行初始化</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>变量初始化顺序
<ul>
<li>在初始化列表中，编译器按照父类-&gt;子类的顺序进行成员变量初始化，但尽量还是与成员声明顺序保持一致</li>
<li><a href="https://github.com/XiaotaoGuo/Effective-Cpp-Reading-Note/blob/master/1.AccustomingYourselfToCpp/04.MakeSureThatObjectsAreInitilizedBeforeTheyAreUsed.md#%E4%B8%8D%E5%90%8C%E7%BC%96%E8%AF%91%E5%8D%95%E5%85%83%E5%86%85%E5%AE%9A%E4%B9%89%E7%9A%84-non-local-static-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F">不同编译单元内定义的non-local static对象的初始化顺序</a>
<ul>
<li><a href="obsidian://booknote?type=annotation&amp;book=Effective%20C++-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/Effective%20C++.pdf&amp;id=04a94357-a1e7-7b4a-a173-c2c4f30846d0&amp;page=61&amp;rect=114.240,403.600,300.642,413.680">一些情况下</a>，不同编译单元内的non-local static对象的初始化顺序有要求，但是C++没有明确定义（比如要求先FileSystem中tfs初始化，后Diectory中tdr初始化）</li>
<li>将每个 non-local static 对象移至自己的专属函数内（变成 local static 对象）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Linux笔记</title>
      <link>https://qinganzhang.github.io/posts/linux%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 29 Jan 2024 15:39:32 +0800</pubDate>
      
      <guid>https://qinganzhang.github.io/posts/linux%E7%AC%94%E8%AE%B0/</guid>
      <description>1. linux入门 1.1 实用程序 man：查询联机手册 1 2 man (section) name # section:1命令，2系统调用，3库函数，5配置文件（因为可能有同名的） man -k regexp</description>
      <content:encoded><![CDATA[<h1 id="1-linux入门">1. linux入门</h1>
<h2 id="11--实用程序">1.1  实用程序</h2>
<ol>
<li>
<p><code>man</code>：查询联机手册</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">man (section) name	# section:1命令，2系统调用，3库函数，5配置文件（因为可能有同名的）
</span></span><span class="line"><span class="cl">man -k regexp	# 用正则匹配
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>date</code>：获取时间和日期</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">date &#34;+%Y-%m-%d %H:%M:%S Day %j&#34;	# 格式控制字符串必须以+号开头
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>bc</code>：计算器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">bc -l	# 类似于ipython的交互式界面
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>重定向</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -l &gt; filelist.txt	# 输出重定向
</span></span><span class="line"><span class="cl">sort &lt; filelist.txt		# 输入重定向
</span></span><span class="line"><span class="cl">ls -l &gt;&gt; filelist.txt	# 追加内容
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>管道</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -l | sort # 将ls的stdout作为sort的输入
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>more, less</code>：逐屏显示（文件或输出），less可以向上翻页但是more不行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">less -Nm	 # fb翻页，du翻半页，gG第一/最后一行，v编辑，/?向下或上搜索字符串(nN上一个下一个)
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>cat</code>：列出文件内容；<code>od</code>：逐字节打印</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat -n test.txt
</span></span><span class="line"><span class="cl">cat &gt; file.txt # 没有命令行参数，从stdin获取输出，直到Ctrl-D，将内容写入文件
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>head, tail</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">head -n 20 file.txt 	# 显示前20行
</span></span><span class="line"><span class="cl">hand -n -20 file.txt	# 除了尾部20行，其余算头并显示
</span></span><span class="line"><span class="cl">tail -f file.txt		# 实时打印文件尾部追加的内容
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>tee</code>：三通，将stdin输出到stdout，同时写入文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ls -lh | tee out.txt
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>wc</code></p>
<ul>
<li><code>-w</code>：字计数</li>
<li><code>-l</code>：行计数</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ps -ef | wc -l	# 查看当前进程总数
</span></span><span class="line"><span class="cl">ls | wc -w # 查看当前文件夹下文件个数
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>sort</code>：</p>
<ul>
<li><code>-r</code>：降序</li>
<li><code>-o</code>：结果覆盖原文件</li>
<li><code>-n</code>：按照数字而非字符串排序</li>
</ul>
</li>
<li>
<p><code>tr str1 str2</code>：替换字符串，将stdin中str1的字符替换为str2的字符，然后标准输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cat file.txt | tr &#39;[a-z]&#39; &#39;[A-Z]&#39;	# 将file.txt文件中小写字母替换为大写字母
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>unique</code>：筛选文件中重复的行</p>
</li>
</ol>
<h2 id="12--了解系统状态">1.2  了解系统状态</h2>
<ol>
<li>
<p><code>who</code>：确定谁在系统中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">tty # 输出当前终端设备文件名
</span></span><span class="line"><span class="cl">who am i 	# 输出当前终端上的登录用户
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>uptime</code>：已开机时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">当前时间 开机时间 用户数量 CPU负载（1，5，15分钟内有几个进程在等待调度运行）
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>top</code>：列出资源占用排名靠前的进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">top -d 1 -n 5	# delay=1, 运行5次
</span></span><span class="line"><span class="cl">当前时间 开机时间 用户数量 CPU负载
</span></span><span class="line"><span class="cl">任务（进程）
</span></span><span class="line"><span class="cl">PID USER PR NI VIRT进程虚拟地址空间 RES驻留内存数（占用物理内存数） SHR共享内存数 %CPU %MEM TIME+占用CPU的时间 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>ps</code>：查询进程状态，列出当前终端上启动的进程</p>
<ul>
<li><code>-e</code>：列出系统中所有进程</li>
<li><code>-f</code>：以full格式列出</li>
<li><code>-l</code>：以long格式列出</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">UID PID PPID C（最近几秒占用CPU情况） PRI优先级 SZ进程逻辑地址空间 WCHAN进程在何处睡眠 TTY终端名字 TIME累计占用CPU时间 CMD
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>free</code>：了解内存使用情况</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">内存总量 已使用内存 空闲内存 共享内存 缓冲使用的内存 现在实际可以使用的内存
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>vmstat</code>：了解系统负载</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">vmstat 1 -Sm # 每一秒更新一次
</span></span><span class="line"><span class="cl">最关注的是cpu使用率，us=user, sy=system, id=idle, wa=wait for disk IO
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h1 id="2-正则表达式">2. 正则表达式</h1>
<h2 id="21--元字符">2.1  元字符</h2>
<pre><code>[正则表达式](https://www.runoob.com/regexp/regexp-tutorial.html)与文件名通配符规则不同
</code></pre>
<ul>
<li>
<p><code>.</code>：匹配任意单字符</p>
</li>
<li>
<p><code>*</code>：匹配前面单字符0次或任意多次</p>
</li>
<li>
<p><code>[</code>：方括号内的字符为集合，表示其中任意一个，方括号内的<code>.</code> <code>*</code> <code>\</code> 表示自己，<code>[ ][ ]</code>表示左右中括号的两个字符，<code>-</code>表示一个区间（如果在最后则不表示区间）</p>
</li>
<li>
<p><code>\</code></p>
</li>
<li>
<p><code>^</code>：在中括号内时开头表示补集，<code>[^a-z]</code>表示匹配任一非小写字母（如果不在中括号内开头则不表示补集），在正则表达式开头时表示首部的限制（不在首部则不表示此限制）</p>
</li>
<li>
<p><code>$</code>：在正则表达式尾部时表示尾部的限制（不在尾部则不表示此限制）</p>
</li>
</ul>
<h2 id="22--正则表达式拓展">2.2  正则表达式拓展</h2>
<ul>
<li><code>()</code>：分组</li>
<li><code>|</code>：逻辑或</li>
<li><code>+</code>：匹配前面单字符1次或任意多次</li>
<li><code>?</code>：匹配前面单字符0次或1次</li>
<li><code>{m,n}</code>：匹配前面的单字符m到n次</li>
<li><code>{m}</code>：匹配前面的单字符m次</li>
<li><code>{m,}</code>：匹配前面的单字符至少m次</li>
<li><code>\d</code>：数字， <code>\D</code>：非数字，<code>\s</code>：空白符（包括换行）， <code>\S</code>：非空白符（不包括换行）， <code>\w</code>：数字字母下划线（相当于 [A-Za-z0-9_]）</li>
</ul>
<h2 id="23--常用命令">2.3  常用命令</h2>
<ol>
<li>
<p><code>grep</code> -n 模式 文件名列表</p>
<ul>
<li>
<p><code>-F</code>：按字符串搜索（同fgrep）</p>
</li>
<li>
<p><code>-G</code>：基本正则语法，默认</p>
</li>
<li>
<p><code>-E</code>：拓展正则语法（同egrep）</p>
</li>
<li>
<p><code>-n</code>：显示行号</p>
</li>
<li>
<p><code>-o</code>：提取匹配的部分</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">grep -n &#39;main&#39; *.cpp	# 从文件中筛选
</span></span><span class="line"><span class="cl">ps -ef | grep -n &#39;^zhang&#39;	# 从输入中筛选
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><code>sed</code>：利用正则表达式处理文本（替换、删除等）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">sed &#39;s/^zhang/ZHANG/g&#39;	# 将开头为zhang的替换为ZHNAG，s表示替换，用/划分不同的部分，g表示如果有多个符合则全部替换
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>awk</code>：逐行扫描进行条件判断，满足条件执行动作</p>
</li>
</ol>
<h1 id="3-文件编辑">3. 文件编辑</h1>
<h2 id="31--vim常用操作">3.1  vim常用操作</h2>
<h2 id="32--常见问题">3.2  常见问题</h2>
<ol>
<li>
<p>vim编辑结束后Ctrl+S：Linux进入了流量控制状态，Ctrl+Q流量控制解除</p>
</li>
<li>
<p>Ctrl+Z导致进程挂起（进程还在但是处于Stopped状态）：使用<code>jobs</code>命令查看当前Stopped的进程，使用<code>%1</code>将1号作业恢复到前台运行</p>
</li>
<li>
<p>backspace无法使用：Ctrl+H或者<code>stty erase ^H</code></p>
</li>
<li>
<p>Linux和Windows的文本文件存储格式不同（行尾不同），dos2unix/unix2dos转换</p>
</li>
</ol>
<h1 id="4-目录管理">4. 目录管理</h1>
<h2 id="41--系统目录">4.1  系统目录</h2>
<ul>
<li>/etc：配置文件</li>
<li>/tmp：临时文件</li>
<li>/var：系统运行时要改变的数据（比如日志）</li>
<li>/bin：系统常用命令（eg：ls、cp、cat）</li>
<li>/usr/bin：常用命令（eg：ssh，ftp，make， gcc，git）</li>
<li>/sbin, /usr/bin：系统管理员专用命令</li>
<li>/dev：设备文件</li>
<li>/usr/include：C语言头文件</li>
<li>/lib, /usr/lib：C语言链接库文件，静态链接库（.a文件)和动态链接库（.so文件，共享的目标代码，多个.o文件的集成，广泛使用）
<ul>
<li><code>ldd</code>：用来查看程序运行时所需的共享库</li>
</ul>
</li>
</ul>
<h2 id="42--文件通配符">4.2  文件通配符</h2>
<pre><code>command后面跟着的是参数或文件通配符，shell进行替换，而正则表达式不进行替换
</code></pre>
<ol>
<li>元字符
<ul>
<li><code>*</code>：匹配任意长度的文件名字符串（包括空串），当<code>.</code>作为开头或是包含<code>/</code>时，必须显示匹配</li>
<li><code>?</code>：匹配任一单字符</li>
<li><code>[]</code>：集合，匹配其中任一字符</li>
<li><code>~</code>：当前用户主目录</li>
<li><code>.</code>：当前目录</li>
<li><code>/</code>：根目录，斜线<code>/</code>，反斜线<code>\</code></li>
</ul>
</li>
</ol>
<h2 id="43--常用命令">4.3  常用命令</h2>
<ol>
<li>
<p><code>ls</code></p>
<ul>
<li>
<p><code>-F</code>：如果是目录，名字后面带<code>/</code>，如果是可执行文件，名字后面带<code>*</code>，如果是链接文件，名字后面带<code>@</code>，普通文件无标记（现在文件都用颜色表示）</p>
</li>
<li>
<p><code>-l</code>：</p>
<p>第一个字符为文件类型，-普通文件，d目录文件，l符号链接文件，c字符设备文件，b块设备文件，p管道文件</p>
<p>访问权限（文件所有者、同组用户、其他用户）</p>
<p>文件链接数</p>
<p>文件所有者名字和组名</p>
<p>文件大小（单位为字节，如果是目录则列出目录表大小不是目录大小）</p>
<p>最后修改日期和时间，文件名</p>
</li>
<li>
<p><code>-d</code>：列出目录自身的信息</p>
</li>
<li>
<p><code>ls *</code>：递归一层列出</p>
</li>
<li>
<p><code>-a</code>：列出所有文件</p>
</li>
</ul>
</li>
<li>
<p><code>cp</code>：复制</p>
<ul>
<li><code>cp file1 file2</code>：将file1复制到file2（如果file2不存在则创建，如果存在则覆盖）</li>
<li><code>cp -r dir1 dir2</code>：如果dir2不存在则复制dir1并改名为dir2，如果dir2存在则将dir1复制到dir2下</li>
<li><code>cp file1 file2 dir</code>：将file1，file2复制到dir目录</li>
<li><code>-u</code>：增量拷贝，便于备份目录</li>
</ul>
</li>
<li>
<p><code>mv</code>：移动</p>
<ul>
<li><code>mv file1 file2</code>：相当于将file1改名为file2</li>
<li><code>mv file1 file2 dir</code>：要求dir存在</li>
<li><code>mv dir1 dir2</code>：如果dir2不存在则相当于改名，如果dir2存在移动dir1到dir2下</li>
</ul>
</li>
<li>
<p><code>rm</code></p>
<p>-r递归删除， -i删除前确认， -f强迫删除只读文件</p>
<p><code>--</code>后参数被shell认为是处理对象而不是命令选项</p>
</li>
<li>
<p><code>mkdir</code>和<code>rmdir</code></p>
<ul>
<li><code>-p</code>：自动创建路径中不存在的目录</li>
</ul>
</li>
<li>
<p><code>touch</code>：将文件最后一次修改时间设置为当前时间（如果文件不存在，则创建文件）</p>
</li>
<li>
<p><code>find</code>：遍历目录树， find 查找范围 条件 动作</p>
<ul>
<li>
<p>条件</p>
<ul>
<li><code>-name wildcard</code>：文件名与wildcard匹配，wildcard加单引号，wildcard可以是正则表达式</li>
<li><code>-regex pattern</code>：整个路径名与pattern匹配</li>
<li><code>-type</code>：f普通文件，d目录，l符号链接文件，c（char），b（block），p（pipe）</li>
<li><code>-size +-n</code> ：指定文件大小（大于+，默认等于，小于-），单位是c（字符），b（块，512字节），k，M，G，默认b</li>
<li><code>-mtime +-n</code>：文件是最近n天内修改的</li>
<li><code>-newer file</code>：文件修改时间比file还新</li>
<li><code>!</code>：非，前后要有空格， 默认是与</li>
<li><code>\( 条件1 -o 条件2 \)</code>：或，因为<code>()</code>是shell的特殊符号</li>
</ul>
</li>
<li>
<p>动作</p>
<ul>
<li>
<p><code>-print</code>：打印查找的文件路径名</p>
</li>
<li>
<p><code>-exec</code>：对查找到的目标执行命令，在-exec之后和分号之前作为一条命令，{}表示文件路径名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find . -type f -name &#39;utils.*&#39; -exec ls -lh {} \;
</span></span><span class="line"><span class="cl">find . ! -newer file.txt \( -name &#39;*.c&#39; -o -name &#39;*.h&#39; \) -exec grep -n -- --help {} /dev/null \;	# 查找早于file.txt的.c或.h文件，并且在检索到的文件(用{}表示)中查找包含--help的内容，通过grep添加两个文件（{}和/dev/null）来显示查找到的内容是在哪一个文件中
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>-ok</code>：类似-exec，在执行命令前需要确认</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>xargs</code>：批量处理文件，常用于先列出文件然后再xargs批处理</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">find . -name &#39;*.c&#39; -print | grep -n --help	# 每找到一个文件都要创建一个进程来grep
</span></span><span class="line"><span class="cl">find . -name &#39;*.c&#39; -print | xargs grep -n --help	# 找到所有文件后，只创建一个进程来批处理(grep)这些找到的文件，将标准输入追加到参数列表后面,效率高
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>tar</code>：<code>tar c/t/x vzj f my.tar filelist</code></p>
<ol>
<li>必选参数
<ul>
<li><code>c</code>：<code>tar cvf my.tar filelist</code>将filelist中文件打包到my.tar中</li>
<li><code>t</code>：<code>tar tvf my.tar</code>查看my.tar中有什么文件</li>
<li><code>x</code>：<code>tar xvf my.tar</code>解包，此时不需要压缩算法</li>
<li><code>f</code>：指定设备文件名（即.tar文件）</li>
</ul>
</li>
<li>可选参数
<ul>
<li><code>v</code>：verbose</li>
<li><code>z</code>：gzip压缩，快，常<code>gz</code>后缀</li>
<li><code>j</code>：bzip2压缩，压缩率高，常<code>bz2</code>后缀</li>
</ul>
</li>
</ol>
</li>
<li>
<p><code>gzip, gunzip; bzip2, bunzip2</code>：压缩解压缩</p>
</li>
<li>
<p><code>du</code>：<code>du -d 1 -h</code>显示文件大小，类似windows</p>
<ul>
<li><code>-d</code>：递归深度</li>
</ul>
</li>
</ol>
<h1 id="5-文件管理">5. 文件管理</h1>
<h2 id="51--运行时获取信息">5.1  运行时获取信息</h2>
<ol>
<li>配置文件</li>
<li>环境变量：<code>env</code>打印当前环境变量，PATH是可执行文件的查找路径，CLASSPATH是类库查找路径，使用export来添加环境变量</li>
<li>命令行参数</li>
<li>交互式键盘输入</li>
</ol>
<h2 id="52--文件系统">5.2  文件系统</h2>
<ol>
<li>
<p>文件系统命令</p>
<ul>
<li>
<p><code>mkfs</code>：创建文件系统</p>
</li>
<li>
<p><code>mount, umount</code>：安装、卸载文件系统</p>
</li>
<li>
<p><code>df </code>：查看文件系统空间空间</p>
</li>
</ul>
</li>
<li>
<p>文件系统结构</p>
<ul>
<li>
<p>引导块：启动系统</p>
</li>
<li>
<p>专用块：管理快（或超级块），存放文件系统的管理信息</p>
</li>
<li>
<p>i节点区：每个文件一个i-node，包括索引、指针和文件信息</p>
</li>
<li>
<p>文件存储区：目录表（文件名和i-node指针）和文件内容</p>
</li>
</ul>
</li>
</ol>
<h2 id="53--链接">5.3  链接</h2>
<ol>
<li>
<p>硬链接：目录项指定的“文件名 i-node”映射关系</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln file.txt lnk	# 创建file.txt的硬链接lnk，删除lnk时对应i-node的link数减一，仅限于同一个文件系统中的普通文件
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>软链接（符号链接）：创建一个“符号链接文件”，里面存储路径（如果时相对路径，则相对于该符号链接文件）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ln -s file.txt lnk # 创建file.txt的软链接lnk
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="54--可执行文件">5.4  可执行文件</h2>
<ol>
<li>程序文件：二进制</li>
<li>脚本文件：第一行指定解释程序，在运行中由解释程序创建一个进程进行解释执行</li>
</ol>
<h2 id="55--权限">5.5  权限</h2>
<ol>
<li>目录权限：实际上是对目录表的权限，无读权限则无法ls，无写权限则无法创建、删除文件等（但文件可能可以修改），执行权限表示分析路径名中可以检索该目录</li>
<li><code>chmod [ugoa][+-=][rwxst] file</code>
<ul>
<li>u=user, g=group, o=other, a=all,</li>
</ul>
</li>
</ol>
<h1 id="6-shell">6. Shell</h1>
<h2 id="61--shell">6.1  shell</h2>
<pre><code>命令解释器，交互式方式下替换、转义、内部外部命令，非交互式方式下编写脚本程序批量处理
</code></pre>
<h2 id="62--bash启动方式">6.2  bash启动方式</h2>
<ol>
<li>
<p>注册shell，启动时自动执行</p>
<p>（用户级）：~/.bash_profile</p>
<p>（系统级）：/etc/profile</p>
<p>退出时，自动执行</p>
<p>（用户级）：~/.bash_logout</p>
<p>（系统级）：/etc/bash.bash.logout</p>
</li>
<li>
<p>交互式shell，启动时自动执行</p>
<p>（用户级）：~/.bashrc</p>
<p>（系统级）：/etc/bash.bashrc</p>
</li>
<li>
<p>脚本解释器：</p>
<ul>
<li>新创建子进程，在子进程中执行脚本
<ul>
<li><code>bash &lt; test.sh</code>：无法携带命令行参数</li>
<li><code>bash test.sh ..</code>：<code>-x</code>参数便于调试和观察</li>
<li><code>chmod u+x test.sh; ./test.sh ..</code></li>
</ul>
</li>
<li>在当前shell中执行
<ul>
<li><code>chmod u+x test.sh; . test.sh ..</code></li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="63--别名">6.3  别名</h2>
<p>在.bashrc中添加一个别名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">alias lls = &#34;ls -lh&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="64--重定向">6.4  重定向</h2>
<ol>
<li>
<p>输入重定向</p>
<ul>
<li>
<p><code>&lt;</code>：从file中获取输入</p>
</li>
<li>
<p><code>&lt;&lt;</code>：从shell脚本中获取输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">cat</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Now</span><span class="p">:</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># WORD是定界符，之间内容进行替换并执行获取输入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">cat</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="s1">&#39;WORD&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Now</span><span class="p">:</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">WORD</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c1"># 当定界符有单引号时，之间内容不做替换
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>&lt;&lt;&lt;</code>：从命令行获取信息作为标准输入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">base64 &lt;&lt;&lt; &#39;test&#39;
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>输出重定向</p>
<ul>
<li>
<p><code>&gt;</code>：覆盖，stdout重定向</p>
</li>
<li>
<p><code>&gt;&gt;</code>：追加，stdout重定向</p>
</li>
<li>
<p><code>2&gt;</code>：将句柄2（stderr）重定向（句柄1是stdout）</p>
</li>
<li>
<p><code>2&gt;&amp;1</code>：将句柄2重定向到文件描述符1指向的文件，放在命令最后</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc test.c &gt; test.err 2&gt;&amp;1
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>管道<code>|</code>将前一命令的stdout作为后一命令的stdin，同样可以使用<code>2&gt;&amp;1</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gcc test.c &gt; test.err 2&gt;&amp;1 | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ol>
<h2 id="65--设置">6.5  设置</h2>
<ol>
<li><code>set -u</code>：当引用一个未定义的变量时，产生一个错误</li>
<li><code>set +u</code>：当引用一个未定义的变量时，视为一个空字符串</li>
<li><code>set -x</code>：打印出shell替换后的命令和参数，常用于观察命令经过shell替换后哪里错误</li>
<li><code>set +x</code>：取消<code>set -x</code></li>
</ol>
<h2 id="66--常用命令">6.6  常用命令</h2>
<ol>
<li>
<p><code>echo</code>：打印命令行参数</p>
<ul>
<li><code>-e</code>：转义打印</li>
</ul>
</li>
<li>
<p><code>printf</code>：类似C语言</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">printf &#34;home:%s\n&#34; $HOME
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>read</code>：获取用户输入</p>
</li>
</ol>
<h2 id="67--环境变量">6.7  环境变量</h2>
<p>子进程继承父进程的环境变量，以后再不影响</p>
<ul>
<li>使用export将局部变量转为环境变量</li>
<li>PATH：命令查找路径，不要将<code>.</code>放入PATH，PATH以<code>:</code>分隔路径</li>
<li><code>env</code>：列出环境变量</li>
<li><code>set</code>：列出环境变量、局部变量、函数定义</li>
</ul>
<h2 id="68--替换">6.8  替换</h2>
<ol>
<li>
<p>文件名生成替换：遵循文件通配符规则</p>
</li>
<li>
<p>变量替换：<code>$var</code></p>
</li>
<li>
<p>命令替换：以命令的stdout进行替换，  `````` ````(反撇号)或者 <code>$()</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">`</span><span class="kt">date</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">now</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="err">$</span><span class="p">(</span><span class="kt">date</span><span class="p">)</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="69--语法">6.9  语法</h2>
<h3 id="691--变量">6.9.1  变量</h3>
<ul>
<li><strong>shell先替换，再执行</strong></li>
<li>变量都是字符串，可以修改</li>
<li>赋值语句等号两边不能有空格（否则会认为是参数），右侧字符串如果有特殊字符需要用双引号</li>
<li>引用变量：<code>$var</code>或<code>${var}</code>，引用未定义变量认为是空字符串</li>
<li>内部变量：位置参数
<ul>
<li><code>$0, $1, $2</code>：第一个命令行参数（脚本文件本身的名字），第二个命令行参数，第三个命令行参数</li>
<li><code>$#</code>：命令行参数的个数</li>
<li><code>$*</code>：相当于<code>&quot;$1 $2 $3 ...&quot;</code>将整体作为一个参数</li>
<li><code>$@</code>：相当于<code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot; ... </code>将变长的命令行参数传递给其他命令</li>
<li><code>shift n</code> ：位置参数的移位操作，位置参数顺次向前移动n个位置</li>
</ul>
</li>
</ul>
<h3 id="692--元字符">6.9.2  元字符</h3>
<ul>
<li>
<p>空格，tab：命令行参数分隔符</p>
</li>
<li>
<p>回车：运行命令</p>
</li>
<li>
<p><code>&gt;&lt;|</code>：重定向与管道（还有<code>||</code>）</p>
</li>
<li>
<p><code>;</code>：一个内多个命令（还有<code>;;</code>）</p>
</li>
<li>
<p><code>&amp;</code>：后台运行（还有<code>&amp;&amp;</code>）</p>
</li>
<li>
<p><code>$</code>：引用变量</p>
</li>
<li>
<p>````` <code>：反撇号用于命令替换，出现元字符注意转义，可以嵌套但要转义`\\` 、</code>` ````</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">year=`expr \`date &#39;+%Y&#39;\` - 10 `
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>文件通配符：<code>*[]?</code></p>
</li>
<li>
<p><code>()</code>：用于定义shell函数或在子shell中执行一组命令</p>
</li>
<li>
<p><code>&quot;</code>：除了<code>$</code>和````` <code>，其他的特殊字符都不转义，里面只能有四种转义：`\&quot;` 、 `\$`、 </code>` ````、  <code>\\</code></p>
</li>
<li>
<p><code>'</code>：都不转义，中间不能有单引号（可以拆分成多段）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">在*.conf文件中匹配&#39;192.168.x.x&#39;结尾
</span></span><span class="line"><span class="cl">pattern:  &#39;192\.168\.[0-9.]*&#39;$
</span></span><span class="line"><span class="cl">grep \&#39;&#39;192\.168\.[0-9.]*&#39;\&#39;&#39;$&#39; *.conf	# 使用单引号
</span></span><span class="line"><span class="cl">grep &#34;&#39;192\\.168\\.[0-9.]*&#39;\S&#34; *.conf	# 使用双引号
</span></span><span class="line"><span class="cl">grep \&#39;192\\.168\\.\[0-9.]\*\&#39;\$ *.conf	# 只使用转义,不被引号包括的字符串
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="693--条件判断">6.9.3  条件判断</h3>
<ol>
<li>
<p>逻辑判断</p>
<ul>
<li>
<p>命令的返回码是0，则命令执行成功</p>
</li>
<li>
<p><code>$?</code>输出上一个命令的返回码，用管道连接时以最后一个命令的返回码为准</p>
</li>
<li>
<p><code>&amp;&amp;</code> <code>||</code>：与，或，可以短路</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cmd1 &amp;&amp; cmd2	# cmd1执行失败就不执行cmd2
</span></span><span class="line"><span class="cl">cmd1 || cmd2	# cmd1执行成功就不执行cmd2
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>检测命令：<code>test</code>或<code>[</code>(是一个命令而非词法符号，最后一个参数必须是])</p>
<ul>
<li>
<p>文件特性检测：</p>
<ul>
<li>
<p><code>-f</code>普通文件，<code>-d</code>目录文件，<code>-r</code>可读，<code>-w</code>可写，<code>-x</code>可执行，<code>-s</code>size&gt;0</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">test -r myfile.txt &amp;&amp; echo readable
</span></span><span class="line"><span class="cl">[ -r myfile.txt] &amp;&amp; echo readable
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>检测命令是否执行成功</p>
</li>
<li>
<p>比较</p>
<ul>
<li>
<p>字符串比较：shell中有三种字符串</p>
<p><code>str1 = str2</code>或<code>str1 != str2</code>等号两边一定要有空格</p>
</li>
<li>
<p>整数的比较</p>
<p><code>-eq</code>=，<code>-ne</code>!=， <code>-gt</code>&gt;，  <code>-lt</code>&lt;， <code>-ge</code>&gt;=， <code>-le</code>&lt;=</p>
</li>
<li>
<p>逻辑运算</p>
<p><code>!</code> 非，<code>-o</code>或， <code>-a</code>与</p>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p>命令组合：经常命令检测之后执行多条命令</p>
<ul>
<li>
<p><code>{}</code>：在当前shell中执行，命令组合最后有分号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ -d $DIR ] &amp;&amp; { cd ..; ls -l; ps; } | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>()</code>：在子进程中执行，命令组合最后无分号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ -d $DIR ] $$ ( cd..; ls -l; ps ) | less
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>条件结构</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">if condition
</span></span><span class="line"><span class="cl">	then list
</span></span><span class="line"><span class="cl">elif condition
</span></span><span class="line"><span class="cl">	then list
</span></span><span class="line"><span class="cl">else
</span></span><span class="line"><span class="cl">	list
</span></span><span class="line"><span class="cl">fi
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="694--表达式运算expr">6.9.4  表达式运算<code>expr</code></h3>
<ul>
<li>运算类型：<code>()</code>，五种算术运算，六种关系运算，<code>&amp; |</code>与或， <code>:</code>正则</li>
<li>注意运算符的转义</li>
<li><code>:</code>正则：<code>expr str : pattern</code>
<ul>
<li>从最左字符开始尽量匹配，最终输出匹配的长度</li>
<li>使用的是基本正则语法，但是<code>\+</code> <code>\?</code> <code>\|</code>表示匹配一个或多个，匹配0个或1个，或（两端任选其一）</li>
<li>使用<code>\( \)</code>，将其中匹配的内容提取出来</li>
</ul>
</li>
</ul>
<h3 id="695--循环结构">6.9.5  循环结构</h3>
<ol>
<li>
<p><code>while</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">while condition
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>for</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">for name in word1, word2, ...
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 或者
</span></span><span class="line"><span class="cl">for name
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl"># 相当于
</span></span><span class="line"><span class="cl">for name in $1, $2, ...
</span></span><span class="line"><span class="cl">	do list
</span></span><span class="line"><span class="cl">done
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">for i in `seq 1 255` # 相当于for i in range(1,256)
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>break n</code>：跳出n层循环</p>
</li>
<li>
<p><code>continue</code></p>
</li>
<li>
<p><code>exit val</code>：结束脚本执行，返回值为val</p>
</li>
</ol>
<h3 id="696--其他">6.9.6  其他</h3>
<ol>
<li><code>eval</code>：将参数先进行变量替换或加工，然后将结果作为程序来执行</li>
</ol>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
